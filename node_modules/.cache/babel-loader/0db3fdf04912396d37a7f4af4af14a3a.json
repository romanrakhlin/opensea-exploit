{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar jsonschema_1 = require(\"jsonschema\");\n\nvar values = require(\"lodash.values\");\n\nvar schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\n\n\nvar SchemaValidator =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a SchemaValidator instance\n   */\n  function SchemaValidator() {\n    this._validator = new jsonschema_1.Validator();\n\n    for (var _i = 0, _a = values(schemas_1.schemas); _i < _a.length; _i++) {\n      var schema = _a[_i];\n\n      this._validator.addSchema(schema, schema.id);\n    }\n  }\n  /**\n   * Add a schema to the validator. All schemas and sub-schemas must be added to\n   * the validator before the `validate` and `isValid` methods can be called with\n   * instances of that schema.\n   * @param schema The schema to add\n   */\n\n\n  SchemaValidator.prototype.addSchema = function (schema) {\n    this._validator.addSchema(schema, schema.id);\n  }; // In order to validate a complex JS object using jsonschema, we must replace any complex\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n  // complex types implement the `toString` method, we can stringify the object and\n  // then parse it. The resultant object can then be checked using jsonschema.\n\n  /**\n   * Validate the JS object conforms to a specific JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns The results of the validation\n   */\n\n\n  SchemaValidator.prototype.validate = function (instance, schema) {\n    var jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n    return this._validator.validate(jsonSchemaCompatibleObject, schema);\n  };\n  /**\n   * Check whether an instance properly adheres to a JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns Whether or not the instance adheres to the schema\n   */\n\n\n  SchemaValidator.prototype.isValid = function (instance, schema) {\n    var isValid = this.validate(instance, schema).errors.length === 0;\n    return isValid;\n  };\n\n  return SchemaValidator;\n}();\n\nexports.SchemaValidator = SchemaValidator;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEA;AAEA;;;;;AAGA;AAAA;AAAA;EAEI;;;EAGA;IACI,KAAKA,UAAL,GAAkB,IAAIC,sBAAJ,EAAlB;;IACA,KAAqB,uBAAM,CAACC,iBAAD,CAA3B,EAAqBC,cAArB,EAAqBA,IAArB,EAAoC;MAA/B,IAAMC,MAAM,SAAZ;;MACD,KAAKJ,UAAL,CAAgBK,SAAhB,CAA0BD,MAA1B,EAAkCA,MAAM,CAACE,EAAzC;IACH;EACJ;EACD;;;;;;;;EAMOC,sCAAP,UAAiBH,MAAjB,EAA+B;IAC3B,KAAKJ,UAAL,CAAgBK,SAAhB,CAA0BD,MAA1B,EAAkCA,MAAM,CAACE,EAAzC;EACH,CAFM,CAjBX,CAoBI;EACA;EACA;EACA;;EACA;;;;;;;;EAMOC,qCAAP,UAAgBC,QAAhB,EAA+BJ,MAA/B,EAA6C;IACzC,IAAMK,0BAA0B,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,QAAf,CAAX,CAAnC;IACA,OAAO,KAAKR,UAAL,CAAgBa,QAAhB,CAAyBJ,0BAAzB,EAAqDL,MAArD,CAAP;EACH,CAHM;EAIP;;;;;;;;EAMOG,oCAAP,UAAeC,QAAf,EAA8BJ,MAA9B,EAA4C;IACxC,IAAMU,OAAO,GAAG,KAAKD,QAAL,CAAcL,QAAd,EAAwBJ,MAAxB,EAAgCW,MAAhC,CAAuCC,MAAvC,KAAkD,CAAlE;IACA,OAAOF,OAAP;EACH,CAHM;;EAIX;AAAC,CA5CD;;AAAaG","names":["_validator","jsonschema_1","schemas_1","_i","schema","addSchema","id","SchemaValidator","instance","jsonSchemaCompatibleObject","JSON","parse","stringify","validate","isValid","errors","length","exports"],"sourceRoot":"","sources":["../../src/schema_validator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}