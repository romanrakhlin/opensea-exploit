{"ast":null,"code":"const encodeDefaultCall = (abi, address) => {\n  const parameters = abi.inputs.map(input => {\n    switch (input.kind) {\n      case \"replaceable\":\n        return WyvernProtocol.generateDefaultValue(input.type);\n\n      case \"owner\":\n        return address;\n\n      case \"asset\":\n      default:\n        return input.value;\n    }\n  });\n  return encodeCall(abi, parameters);\n};\n\nconst encodeSell = (schema, asset, address, validatorAddress) => {\n  const transfer = validatorAddress && schema.functions.checkAndTransfer ? schema.functions.checkAndTransfer(asset, validatorAddress) : schema.functions.transfer(asset); // const transfer = schema.functions.transfer(asset);\n\n  let defaultCall = encodeDefaultCall(transfer, address);\n  let pattern = WyvernProtocol.encodeReplacementPattern(transfer);\n  return {\n    target: transfer.target,\n    calldata: defaultCall,\n    replacementPattern: pattern\n  };\n};\n\nexport default encodeSell;","map":{"version":3,"names":["encodeDefaultCall","abi","address","parameters","inputs","map","input","kind","WyvernProtocol","generateDefaultValue","type","value","encodeCall","encodeSell","schema","asset","validatorAddress","transfer","functions","checkAndTransfer","defaultCall","pattern","encodeReplacementPattern","target","calldata","replacementPattern"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeSell.js"],"sourcesContent":["const encodeDefaultCall = (abi, address) => {\n    const parameters = abi.inputs.map((input) => {\n        switch (input.kind) {\n            case \"replaceable\":\n                return WyvernProtocol.generateDefaultValue(input.type);\n            case \"owner\":\n                return address;\n            case \"asset\":\n            default:\n                return input.value;\n        }\n    });\n\n    return encodeCall(abi, parameters);\n};\n\nconst encodeSell = (schema, asset, address, validatorAddress) => {\n    const transfer = validatorAddress && schema.functions.checkAndTransfer\n        ? schema.functions.checkAndTransfer(asset, validatorAddress)\n        : schema.functions.transfer(asset);\n    \n    // const transfer = schema.functions.transfer(asset);\n    let defaultCall = encodeDefaultCall(transfer, address)\n    let pattern = WyvernProtocol.encodeReplacementPattern(transfer)\n\n    return {\n        target: transfer.target,\n        calldata: defaultCall,\n        replacementPattern: pattern\n    };\n};\n\nexport default encodeSell;"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;EACxC,MAAMC,UAAU,GAAGF,GAAG,CAACG,MAAJ,CAAWC,GAAX,CAAgBC,KAAD,IAAW;IACzC,QAAQA,KAAK,CAACC,IAAd;MACI,KAAK,aAAL;QACI,OAAOC,cAAc,CAACC,oBAAf,CAAoCH,KAAK,CAACI,IAA1C,CAAP;;MACJ,KAAK,OAAL;QACI,OAAOR,OAAP;;MACJ,KAAK,OAAL;MACA;QACI,OAAOI,KAAK,CAACK,KAAb;IAPR;EASH,CAVkB,CAAnB;EAYA,OAAOC,UAAU,CAACX,GAAD,EAAME,UAAN,CAAjB;AACH,CAdD;;AAgBA,MAAMU,UAAU,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBb,OAAhB,EAAyBc,gBAAzB,KAA8C;EAC7D,MAAMC,QAAQ,GAAGD,gBAAgB,IAAIF,MAAM,CAACI,SAAP,CAAiBC,gBAArC,GACXL,MAAM,CAACI,SAAP,CAAiBC,gBAAjB,CAAkCJ,KAAlC,EAAyCC,gBAAzC,CADW,GAEXF,MAAM,CAACI,SAAP,CAAiBD,QAAjB,CAA0BF,KAA1B,CAFN,CAD6D,CAK7D;;EACA,IAAIK,WAAW,GAAGpB,iBAAiB,CAACiB,QAAD,EAAWf,OAAX,CAAnC;EACA,IAAImB,OAAO,GAAGb,cAAc,CAACc,wBAAf,CAAwCL,QAAxC,CAAd;EAEA,OAAO;IACHM,MAAM,EAAEN,QAAQ,CAACM,MADd;IAEHC,QAAQ,EAAEJ,WAFP;IAGHK,kBAAkB,EAAEJ;EAHjB,CAAP;AAKH,CAdD;;AAgBA,eAAeR,UAAf"},"metadata":{},"sourceType":"module"}