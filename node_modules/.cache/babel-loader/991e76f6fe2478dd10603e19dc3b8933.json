{"ast":null,"code":"// Wyvern\nimport { WyvernProtocol } from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\"; // Ethereum\n\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\"; // Other\n\nimport axios from \"axios\"; // import * as _ from \"lodash\";\n// Constants\n\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { OPENSEA_FEE_RECIPIENT, NULL_BLOCK_HASH, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport { mainnetWyvernConfigByNetwork } from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\";\nimport { StaticCheckTxOrigin } from \"./Constants\"; // Contracts\n\nimport { WyvernContract } from \"./contracts\"; // Methods\n\nimport createOrder from \"./methods/CreateOrder\";\nimport cancelOrder from \"./methods/CancelOrder\"; // Helpers\n\nimport encodeSell from \"./helpers/EncodeSell\";\nimport getTimeParameters from \"./helpers/GetTimeParameters\";\nimport signTypedDataAsync from \"./helpers/SignTypedDataAsync\";\nimport encodeCall from \"./helpers/EncodeCall\"; // FUNCTIONS\n\nconst tokenFromJSON = token => {\n  const fromJSON = {\n    name: token.name,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    address: token.address,\n    imageUrl: token.image_url,\n    ethPrice: token.eth_price,\n    usdPrice: token.usd_price\n  };\n  return fromJSON;\n};\n\nconst orderFromJSON = order => {\n  const createdDate = new Date(`${order.created_date}Z`);\n  const fromJSON = {\n    hash: order.order_hash || order.hash,\n    cancelledOrFinalized: order.cancelled || order.finalized,\n    markedInvalid: order.marked_invalid,\n    metadata: order.metadata,\n    quantity: new BigNumber(order.quantity || 1),\n    exchange: order.exchange,\n    makerAccount: order.maker,\n    takerAccount: order.taker,\n    // Use string address to conform to Wyvern Order schema\n    maker: order.maker.address,\n    taker: order.taker.address,\n    makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n    takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n    makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n    takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n    makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n    waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n    feeMethod: order.fee_method,\n    feeRecipientAccount: order.fee_recipient,\n    feeRecipient: order.fee_recipient.address,\n    side: order.side,\n    saleKind: order.sale_kind,\n    target: order.target,\n    howToCall: order.how_to_call,\n    calldata: order.calldata,\n    replacementPattern: order.replacement_pattern,\n    staticTarget: order.static_target,\n    staticExtradata: order.static_extradata,\n    paymentToken: order.payment_token,\n    basePrice: new BigNumber(order.base_price),\n    extra: new BigNumber(order.extra),\n    currentBounty: new BigNumber(order.current_bounty || 0),\n    currentPrice: new BigNumber(order.current_price || 0),\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(order.listing_time),\n    expirationTime: new BigNumber(order.expiration_time),\n    salt: new BigNumber(order.salt),\n    v: parseInt(order.v),\n    r: order.r,\n    s: order.s,\n    paymentTokenContract: order.payment_token_contract ? tokenFromJSON(order.payment_token_contract) : undefined,\n    asset: order.asset,\n    assetBundle: order.asset_bundle\n  }; // Use client-side price calc, to account for buyer fee (not added by server) and latency\n\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\n\nconst encodeBuy = (schema, asset, address, validatorAddress) => {\n  // const transfer = schema.functions.transfer(asset);\n  const transfer = validatorAddress && schema.functions.checkAndTransfer ? schema.functions.checkAndTransfer(asset, validatorAddress) : schema.functions.transfer(asset);\n  const replaceables = transfer.inputs.filter(i => i.kind === \"replaceable\");\n  const ownerInputs = transfer.inputs.filter(i => i.kind === \"owner\"); // Validate\n\n  if (replaceables.length !== 1) {\n    throw new Error(\"Only 1 input can match transfer destination, but instead \" + replaceables.length + \" did\");\n  } // Compute calldata\n\n\n  const parameters = transfer.inputs.map(input => {\n    switch (input.kind) {\n      case \"replaceable\":\n        return address;\n\n      case \"owner\":\n        return WyvernProtocol.generateDefaultValue(input.type);\n\n      default:\n        try {\n          return input.value.toString();\n        } catch (e) {\n          console.error(schema);\n          console.error(asset);\n          throw e;\n        }\n\n    }\n  });\n  const calldata = encodeCall(transfer, parameters); // Compute replacement pattern\n\n  let replacementPattern = \"0x\";\n\n  if (ownerInputs.length > 0) {\n    replacementPattern = WyvernProtocol.encodeReplacementPattern(transfer, \"owner\");\n  }\n\n  return {\n    target: transfer.target,\n    calldata,\n    replacementPattern\n  };\n};\n\nfunction makeMatchingOrder(_ref) {\n  let {\n    order,\n    accountAddress,\n    recipientAddress\n  } = _ref;\n  accountAddress = accountAddress.toLowerCase();\n  recipientAddress = recipientAddress.toLowerCase();\n\n  const computeOrderParams = () => {\n    const shouldValidate = order.target === MERKLE_VALIDATOR_MAINNET;\n\n    if (\"asset\" in order.metadata) {\n      const schema = ERC721Schema; // currently supporting ERC721 only\n\n      return order.side == 0 ? encodeSell(schema, order.metadata.asset, recipientAddress, shouldValidate ? order.target : undefined) : encodeBuy(schema, order.metadata.asset, recipientAddress, shouldValidate ? order.target : undefined);\n    } else {\n      throw new Error(\"Invalid order metadata\");\n    }\n  };\n\n  const {\n    target,\n    calldata,\n    replacementPattern\n  } = computeOrderParams();\n  const times = getTimeParameters(0); // Compat for matching buy orders that have fee recipient still on them\n\n  const feeRecipient = OPENSEA_FEE_RECIPIENT; // Maybe NULLADDRESS\n\n  const matchingOrder = {\n    exchange: order.exchange,\n    maker: accountAddress,\n    taker: order.maker,\n    quantity: order.quantity,\n    makerRelayerFee: order.makerRelayerFee,\n    takerRelayerFee: order.takerRelayerFee,\n    makerProtocolFee: order.makerProtocolFee,\n    takerProtocolFee: order.takerProtocolFee,\n    makerReferrerFee: order.makerReferrerFee,\n    waitingForBestCounterOrder: false,\n    feeMethod: order.feeMethod,\n    feeRecipient,\n    side: (order.side + 1) % 2,\n    saleKind: 0,\n    // 0 fixed price 1 ducch aucion\n    target,\n    howToCall: order.howToCall,\n    calldata,\n    replacementPattern,\n    staticTarget: WyvernProtocol.NULL_ADDRESS,\n    staticExtradata: \"0x\",\n    paymentToken: order.paymentToken,\n    basePrice: order.basePrice,\n    extra: BigNumber(0),\n    listingTime: times.listingTime,\n    expirationTime: times.expirationTime,\n    salt: WyvernProtocol.generatePseudoRandomSalt(),\n    metadata: order.metadata\n  };\n  return matchingOrder;\n}\n\nfunction assignOrdersToSides(order, matchingOrder) {\n  const isSellOrder = order.side == 1;\n  let buy;\n  let sell;\n\n  if (!isSellOrder) {\n    buy = order;\n    sell = { ...matchingOrder,\n      v: buy.v,\n      r: buy.r,\n      s: buy.s\n    };\n  } else {\n    sell = order;\n    buy = { ...matchingOrder,\n      v: sell.v,\n      r: sell.r,\n      s: sell.s\n    };\n  }\n\n  return {\n    buy,\n    sell\n  };\n}\n\nconst _getMetadata = (order, referrerAddress) => {\n  const referrer = referrerAddress || order.metadata.referrerAddress;\n\n  if (referrer && isValidAddress(referrer)) {\n    return `0x000000000000000000000000${referrer.substr(2)}`;\n  }\n\n  return undefined;\n};\n\nconst _correctGasAmount = estimation => {\n  return Math.ceil(estimation * 1.01);\n};\n/**\n * Gets the price for the order using the contract\n * @param order The order to calculate the price for\n */\n\n\nasync function getCurrentPrice(order, wyvernExchange) {\n  const currentPrice = await wyvernExchange.methods.calculateCurrentPrice_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee.toFixed(), order.takerRelayerFee.toFixed(), order.makerProtocolFee.toFixed(), order.takerProtocolFee.toFixed(), order.basePrice.toFixed(), order.extra.toFixed(), order.listingTime.toFixed(), order.expirationTime.toFixed(), order.salt.toFixed()], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata);\n  return currentPrice;\n}\n/**\n * Estimates the price of an order\n * @param order The order to estimate price on\n * @param secondsToBacktrack The number of seconds to subtract on current time,\n *  to fix race conditions\n * @param shouldRoundUp Whether to round up fractional wei\n */\n\n\nexport function estimateCurrentPrice(order) {\n  let secondsToBacktrack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n  let shouldRoundUp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // round up should be enabled\n  let {\n    basePrice,\n    listingTime,\n    expirationTime,\n    extra\n  } = order;\n  const {\n    side,\n    takerRelayerFee,\n    saleKind\n  } = order;\n  const now = new BigNumber(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);\n  basePrice = new BigNumber(basePrice);\n  listingTime = new BigNumber(listingTime);\n  expirationTime = new BigNumber(expirationTime);\n  extra = new BigNumber(extra);\n  let exactPrice = basePrice; // saleKind 0 : Fixed price 1: Duction acution\n\n  if (saleKind === 0) {// Do nothing, price is correct\n  } else if (saleKind === 1) {\n    const diff = extra.times(now.minus(listingTime)).dividedBy(expirationTime.minus(listingTime)); // side 0 : buy 1: sell\n\n    exactPrice = side == 1 ?\n    /* Sell-side - start price: basePrice. End price: basePrice - extra. */\n    basePrice.minus(diff) :\n    /* Buy-side - start price: basePrice. End price: basePrice + extra. */\n    basePrice.plus(diff);\n  } // Add taker fee only for buyers\n\n\n  if (side === 1 && !order.waitingForBestCounterOrder) {\n    // Buyer fee increases sale price\n    exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1);\n  }\n\n  return shouldRoundUp ? exactPrice.ceil() : exactPrice;\n}\n\nasync function _getRequiredAmountForTakingSellOrder(sell, wyvernExchange) {\n  const currentPrice = await getCurrentPrice(sell, wyvernExchange);\n  const estimatedPrice = estimateCurrentPrice(sell);\n  const maxPrice = BigNumber.max(currentPrice, estimatedPrice); // TODO Why is this not always a big number?\n\n  sell.takerRelayerFee = BigNumber(sell.takerRelayerFee);\n  const feePercentage = sell.takerRelayerFee.div(INVERSE_BASIS_POINT);\n  const fee = feePercentage.times(maxPrice);\n  return fee.plus(maxPrice); // use .ceil()\n}\n\nasync function _atomicMatch(_ref2) {\n  let {\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata = NULL_BLOCK_HASH\n  } = _ref2;\n  let value;\n\n  if (buy.paymentToken == WyvernProtocol.NULL_ADDRESS) {\n    value = await _getRequiredAmountForTakingSellOrder(sell, wyvernExchange);\n  }\n\n  const txnData = {\n    from: accountAddress,\n    value\n  };\n  const args = [[buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target, buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken], [250.0.toString(), 0.0.toString(), buy.makerProtocolFee.toString(), buy.takerProtocolFee.toString(), 0.0.toString(), buy.extra.toString(), buy.listingTime.toString(), buy.expirationTime.toString(), buy.salt.toString(), 250.0.toString(), 0.0.toString(), sell.makerProtocolFee.toString(), sell.takerProtocolFee.toString(), 0.0.toString(), 0.0.toString(), sell.listingTime.toString(), sell.expirationTime.toString(), sell.salt.toString()], [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall], buy.calldata, sell.calldata, buy.replacementPattern, sell.replacementPattern, buy.staticExtradata, sell.staticExtradata, [buy.v || 0, sell.v || 0], [buy.r || NULL_BLOCK_HASH, buy.s || NULL_BLOCK_HASH, sell.r || NULL_BLOCK_HASH, sell.s || NULL_BLOCK_HASH, metadata]]; // const gasEstimate = await wyvernExchange.functions.estimateGasAsync(txnData);\n  // txnData.gas = _correctGasAmount(gasEstimate);\n\n  const atomicMatchMethod = wyvernExchange.functions.atomicMatch_(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], txnData).then(res => {\n    console.log(res);\n  });\n  return {\n    atomicMatchMethod,\n    txnData\n  };\n}\n\nasync function fulfillOrder(_ref3) {\n  let {\n    order,\n    provider,\n    accountAddress,\n    recipientAddress,\n    referrerAddress\n  } = _ref3;\n  console.info(`Account: ${accountAddress} | Recipient: ${recipientAddress} | Referrer: ${referrerAddress}`); // check if valid order\n\n  const wyvernExchange = WyvernContract(provider);\n  const isValid = await validateOrder({\n    order,\n    accountAddress,\n    wyvernExchange\n  });\n  const matchingOrder = makeMatchingOrder({\n    order,\n    accountAddress,\n    recipientAddress: recipientAddress\n  });\n  const {\n    buy,\n    sell\n  } = assignOrdersToSides(order, matchingOrder);\n\n  const metadata = _getMetadata(order, referrerAddress);\n\n  return await _atomicMatch({\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata\n  });\n}\n\n;\n\nconst assetContractFromJSON = assetContract => {\n  return {\n    name: assetContract.name,\n    description: assetContract.description,\n    type: assetContract.assetContract_type,\n    schemaName: assetContract.schema_name,\n    address: assetContract.address,\n    tokenSymbol: assetContract.symbol,\n    buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n    sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n    openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n    imageUrl: assetContract.image_url,\n    externalLink: assetContract.external_link,\n    wikiLink: assetContract.wiki_link\n  };\n};\n\nexport const collectionFromJSON = collection => {\n  const createdDate = new Date(`${collection.created_date}Z`);\n  return {\n    createdDate,\n    name: collection.name,\n    description: collection.description,\n    slug: collection.slug,\n    editors: collection.editors,\n    hidden: collection.hidden,\n    featured: collection.featured,\n    featuredImageUrl: collection.featured_image_url,\n    displayData: collection.display_data,\n    paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n    openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n    payoutAddress: collection.payout_address,\n    imageUrl: collection.image_url,\n    largeImageUrl: collection.large_image_url,\n    stats: collection.stats,\n    traitStats: collection.traits,\n    externalLink: collection.external_url,\n    wikiLink: collection.wiki_url\n  };\n};\n\nconst userFromJSON = user => {\n  return {\n    username: user.username\n  };\n};\n\nconst accountFromJSON = account => {\n  return {\n    address: account.address,\n    config: account.config,\n    profileImgUrl: account.profile_img_url,\n    user: account.user ? userFromJSON(account.user) : null\n  };\n};\n\nconst transactionFromJSON = transaction => {\n  return {\n    fromAccount: accountFromJSON(transaction.from_account),\n    toAccount: accountFromJSON(transaction.to_account),\n    createdDate: new Date(`${transaction.created_date}Z`),\n    modifiedDate: new Date(`${transaction.modified_date}Z`),\n    transactionHash: transaction.transaction_hash,\n    transactionIndex: transaction.transaction_index,\n    blockNumber: transaction.block_number,\n    blockHash: transaction.block_hash,\n    timestamp: new Date(`${transaction.timestamp}Z`)\n  };\n};\n\nconst assetEventFromJSON = assetEvent => {\n  return {\n    eventType: assetEvent.event_type,\n    eventTimestamp: assetEvent.event_timestamp,\n    auctionType: assetEvent.auction_type,\n    totalPrice: assetEvent.total_price,\n    transaction: assetEvent.transaction ? transactionFromJSON(assetEvent.transaction) : null,\n    paymentToken: assetEvent.payment_token ? tokenFromJSON(assetEvent.payment_token) : null\n  };\n};\n\nconst assetFromJSON = asset => {\n  const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n  const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n  const fromJSON = {\n    tokenId: asset.token_id.toString(),\n    tokenAddress: asset.asset_contract.address,\n    name: asset.name,\n    description: asset.description,\n    owner: asset.owner,\n    assetContract: assetContractFromJSON(asset.asset_contract),\n    collection: collectionFromJSON(asset.collection),\n    orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n    sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n    buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n    isPresale: asset.is_presale,\n    // Don't use previews if it's a special image\n    imageUrl: isAnimated || isSvg ? asset.image_url : asset.image_preview_url || asset.image_url,\n    imagePreviewUrl: asset.image_preview_url,\n    imageUrlOriginal: asset.image_original_url,\n    imageUrlThumbnail: asset.image_thumbnail_url,\n    externalLink: asset.external_link,\n    openseaLink: asset.permalink,\n    traits: asset.traits,\n    numSales: asset.num_sales,\n    lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n    backgroundColor: asset.background_color ? `#${asset.background_color}` : null,\n    transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n    transferFeePaymentToken: asset.transfer_fee_payment_token ? tokenFromJSON(asset.transfer_fee_payment_token) : null\n  }; // If orders were included, put them in sell/buy order groups\n\n  if (fromJSON.orders && !fromJSON.sellOrders) {\n    fromJSON.sellOrders = fromJSON.orders.filter(o => o.side == 1);\n  }\n\n  if (fromJSON.orders && !fromJSON.buyOrders) {\n    fromJSON.buyOrders = fromJSON.orders.filter(o => o.side == 0);\n  }\n\n  return fromJSON;\n};\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\n\n\nasync function getAsset(_ref4) {\n  let {\n    tokenAddress,\n    tokenId\n  } = _ref4;\n  const {\n    data\n  } = await axios(`${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`);\n  return assetFromJSON(data);\n}\n\nasync function validateOrder(_ref5) {\n  let {\n    order,\n    accountAddress,\n    wyvernExchange\n  } = _ref5;\n  // Check sell parameters\n  const sellValid = await wyvernExchange.functions.validateOrder_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [250.0.toFixed(), 0.0.toFixed(), order.makerProtocolFee, order.takerProtocolFee, 0.0.toFixed(), 0.0.toFixed(), order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, order.v, order.r, order.s);\n\n  if (!sellValid) {\n    // eslint-disable-next-line no-throw-literal\n    throw {\n      message: new Error(`Failed to validate sell order parameters. It looks like this listing is invalid.`),\n      code: \"InvalidOrder\"\n    }; // TODO: call order invalidate API\n  }\n\n  return sellValid;\n}\n\n;\n\nasync function postOrder(order) {\n  let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  try {\n    const {\n      data\n    } = await axios.post(`https://api.opensea.io/wyvern/v1/orders/post/`, order, {\n      headers: {\n        \"x-api-key\": X_API_KEY\n      }\n    });\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n\n  ;\n}\n\n;\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\n\nconst orderToGolomJSON = order => {\n  const asJSON = {\n    exchange: order.exchange.toLowerCase(),\n    maker: {\n      address: order.maker.toLowerCase()\n    },\n    taker: {\n      address: order.taker.toLowerCase()\n    },\n    maker_relayer_fee: order.makerRelayerFee.toString(),\n    taker_relayer_fee: order.takerRelayerFee.toString(),\n    maker_protocol_fee: order.makerProtocolFee.toString(),\n    taker_protocol_fee: order.takerProtocolFee.toString(),\n    makerReferrerFee: order.makerReferrerFee.toString(),\n    fee_method: order.feeMethod,\n    fee_recipient: {\n      address: order.feeRecipient.toLowerCase()\n    },\n    side: order.side,\n    sale_kind: order.saleKind,\n    target: order.target.toLowerCase(),\n    how_to_call: order.howToCall,\n    calldata: order.calldata,\n    replacement_pattern: order.replacementPattern,\n    static_target: order.staticTarget.toLowerCase(),\n    static_extradata: order.staticExtradata,\n    payment_token: order.paymentToken.toLowerCase(),\n    quantity: order.quantity.toString(),\n    base_price: order.basePrice.toString(),\n    englishAuctionReservePrice: order.englishAuctionReservePrice ? order.englishAuctionReservePrice.toString() : undefined,\n    extra: order.extra.toString(),\n    createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n    listing_time: order.listingTime.toString(),\n    expiration_time: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n    metadata: order.metadata,\n    v: order.v,\n    r: order.r,\n    s: order.s,\n    prefixed_hash: order.hash\n  };\n  return asJSON;\n};\n\nexport { fulfillOrder, createOrder, cancelOrder }; // maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28","map":{"version":3,"names":["WyvernProtocol","HowToCall","Network","ERC721Schema","isValidAddress","parseEther","BigNumber","axios","OPENSEA_URL","X_API_KEY","ACTIVITY_POLLING_INTERVAL","LISTING_POLLING_INTERVAL","OFFERS_POLLING_INTERVAL","OPENSEA_FEE_RECIPIENT","NULL_BLOCK_HASH","INVERSE_BASIS_POINT","DEFAULT_BUYER_FEE_BASIS_POINTS","DEFAULT_SELLER_FEE_BASIS_POINTS","OPENSEA_SELLER_BOUNTY_BASIS_POINTS","DEFAULT_MAX_BOUNTY","STATIC_CALL_TX_ORIGIN_ADDRESS","MERKLE_VALIDATOR_MAINNET","mainnetWyvernConfigByNetwork","OrderTypesEIP712","WyvernDomainNameEIP712","WyvernDomainVersionEIP712","StaticCheckTxOrigin","WyvernContract","createOrder","cancelOrder","encodeSell","getTimeParameters","signTypedDataAsync","encodeCall","tokenFromJSON","token","fromJSON","name","symbol","decimals","address","imageUrl","image_url","ethPrice","eth_price","usdPrice","usd_price","orderFromJSON","order","createdDate","Date","created_date","hash","order_hash","cancelledOrFinalized","cancelled","finalized","markedInvalid","marked_invalid","metadata","quantity","exchange","makerAccount","maker","takerAccount","taker","makerRelayerFee","maker_relayer_fee","takerRelayerFee","taker_relayer_fee","makerProtocolFee","maker_protocol_fee","takerProtocolFee","taker_protocol_fee","makerReferrerFee","maker_referrer_fee","waitingForBestCounterOrder","fee_recipient","NULL_ADDRESS","feeMethod","fee_method","feeRecipientAccount","feeRecipient","side","saleKind","sale_kind","target","howToCall","how_to_call","calldata","replacementPattern","replacement_pattern","staticTarget","static_target","staticExtradata","static_extradata","paymentToken","payment_token","basePrice","base_price","extra","currentBounty","current_bounty","currentPrice","current_price","createdTime","Math","round","getTime","listingTime","listing_time","expirationTime","expiration_time","salt","v","parseInt","r","s","paymentTokenContract","payment_token_contract","undefined","asset","assetBundle","asset_bundle","estimateCurrentPrice","encodeBuy","schema","validatorAddress","transfer","functions","checkAndTransfer","replaceables","inputs","filter","i","kind","ownerInputs","length","Error","parameters","map","input","generateDefaultValue","type","value","toString","e","console","error","encodeReplacementPattern","makeMatchingOrder","accountAddress","recipientAddress","toLowerCase","computeOrderParams","shouldValidate","times","matchingOrder","generatePseudoRandomSalt","assignOrdersToSides","isSellOrder","buy","sell","_getMetadata","referrerAddress","referrer","substr","_correctGasAmount","estimation","ceil","getCurrentPrice","wyvernExchange","methods","calculateCurrentPrice_","toFixed","secondsToBacktrack","shouldRoundUp","now","minus","exactPrice","diff","dividedBy","plus","_getRequiredAmountForTakingSellOrder","estimatedPrice","maxPrice","max","feePercentage","div","fee","_atomicMatch","txnData","from","args","atomicMatchMethod","atomicMatch_","then","res","log","fulfillOrder","provider","info","isValid","validateOrder","assetContractFromJSON","assetContract","description","assetContract_type","schemaName","schema_name","tokenSymbol","buyerFeeBasisPoints","buyer_fee_basis_points","sellerFeeBasisPoints","seller_fee_basis_points","openseaBuyerFeeBasisPoints","opensea_buyer_fee_basis_points","openseaSellerFeeBasisPoints","opensea_seller_fee_basis_points","devBuyerFeeBasisPoints","dev_buyer_fee_basis_points","devSellerFeeBasisPoints","dev_seller_fee_basis_points","externalLink","external_link","wikiLink","wiki_link","collectionFromJSON","collection","slug","editors","hidden","featured","featuredImageUrl","featured_image_url","displayData","display_data","paymentTokens","payment_tokens","payoutAddress","payout_address","largeImageUrl","large_image_url","stats","traitStats","traits","external_url","wiki_url","userFromJSON","user","username","accountFromJSON","account","config","profileImgUrl","profile_img_url","transactionFromJSON","transaction","fromAccount","from_account","toAccount","to_account","modifiedDate","modified_date","transactionHash","transaction_hash","transactionIndex","transaction_index","blockNumber","block_number","blockHash","block_hash","timestamp","assetEventFromJSON","assetEvent","eventType","event_type","eventTimestamp","event_timestamp","auctionType","auction_type","totalPrice","total_price","assetFromJSON","isAnimated","endsWith","isSvg","tokenId","token_id","tokenAddress","asset_contract","owner","orders","sellOrders","sell_orders","buyOrders","buy_orders","isPresale","is_presale","image_preview_url","imagePreviewUrl","imageUrlOriginal","image_original_url","imageUrlThumbnail","image_thumbnail_url","openseaLink","permalink","numSales","num_sales","lastSale","last_sale","backgroundColor","background_color","transferFee","transfer_fee","transferFeePaymentToken","transfer_fee_payment_token","o","getAsset","data","sellValid","validateOrder_","message","code","postOrder","retries","post","headers","orderToGolomJSON","asJSON","englishAuctionReservePrice","prefixed_hash"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/opensea.js"],"sourcesContent":["// Wyvern\nimport { WyvernProtocol } from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\";\n\n// Ethereum\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\";\n\n// Other\nimport axios from \"axios\";\n// import * as _ from \"lodash\";\n\n// Constants\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { OPENSEA_FEE_RECIPIENT, NULL_BLOCK_HASH, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport { mainnetWyvernConfigByNetwork } from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\";\nimport { StaticCheckTxOrigin } from \"./Constants\";\n\n// Contracts\nimport { WyvernContract } from \"./contracts\";\n\n// Methods\nimport createOrder from \"./methods/CreateOrder\";\nimport cancelOrder from \"./methods/CancelOrder\";\n\n// Helpers\nimport encodeSell from \"./helpers/EncodeSell\";\nimport getTimeParameters from \"./helpers/GetTimeParameters\";\nimport signTypedDataAsync from \"./helpers/SignTypedDataAsync\";\nimport encodeCall from \"./helpers/EncodeCall\";\n\n// FUNCTIONS\nconst tokenFromJSON = (token) => {\n    const fromJSON = {\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        address: token.address,\n        imageUrl: token.image_url,\n        ethPrice: token.eth_price,\n        usdPrice: token.usd_price,\n    };\n\n    return fromJSON;\n};\n\nconst orderFromJSON = (order) => {\n    const createdDate = new Date(`${order.created_date}Z`);\n    const fromJSON = {\n        hash: order.order_hash || order.hash,\n        cancelledOrFinalized: order.cancelled || order.finalized,\n        markedInvalid: order.marked_invalid,\n        metadata: order.metadata,\n        quantity: new BigNumber(order.quantity || 1),\n        exchange: order.exchange,\n        makerAccount: order.maker,\n        takerAccount: order.taker,\n\n        // Use string address to conform to Wyvern Order schema\n        maker: order.maker.address,\n        taker: order.taker.address,\n        makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n        takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n        makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n        takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n        makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n        waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n        feeMethod: order.fee_method,\n        feeRecipientAccount: order.fee_recipient,\n        feeRecipient: order.fee_recipient.address,\n        side: order.side,\n        saleKind: order.sale_kind,\n        target: order.target,\n        howToCall: order.how_to_call,\n        calldata: order.calldata,\n        replacementPattern: order.replacement_pattern,\n        staticTarget: order.static_target,\n        staticExtradata: order.static_extradata,\n        paymentToken: order.payment_token,\n        basePrice: new BigNumber(order.base_price),\n        extra: new BigNumber(order.extra),\n        currentBounty: new BigNumber(order.current_bounty || 0),\n        currentPrice: new BigNumber(order.current_price || 0),\n\n        createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n        listingTime: new BigNumber(order.listing_time),\n        expirationTime: new BigNumber(order.expiration_time),\n\n        salt: new BigNumber(order.salt),\n        v: parseInt(order.v),\n        r: order.r,\n        s: order.s,\n\n        paymentTokenContract: order.payment_token_contract\n          ? tokenFromJSON(order.payment_token_contract)\n          : undefined,\n        asset: order.asset,\n        assetBundle: order.asset_bundle,\n    };\n\n    // Use client-side price calc, to account for buyer fee (not added by server) and latency\n    fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n    return fromJSON;\n};\n\nconst encodeBuy = (schema, asset, address, validatorAddress) => {\n    // const transfer = schema.functions.transfer(asset);\n    const transfer = validatorAddress && schema.functions.checkAndTransfer\n        ? schema.functions.checkAndTransfer(asset, validatorAddress)\n        : schema.functions.transfer(asset);\n    const replaceables = transfer.inputs.filter((i) => i.kind === \"replaceable\");\n    const ownerInputs = transfer.inputs.filter((i) => i.kind === \"owner\");\n\n    // Validate\n    if (replaceables.length !== 1) {\n        throw new Error(\"Only 1 input can match transfer destination, but instead \" + replaceables.length + \" did\");\n    }\n\n    // Compute calldata\n    const parameters = transfer.inputs.map((input) => {\n        switch (input.kind) {\n            case \"replaceable\":\n                return address;\n            case \"owner\":\n                return WyvernProtocol.generateDefaultValue(input.type);\n            default:\n                try {\n                  return input.value.toString();\n                } catch (e) {\n                  console.error(schema);\n                  console.error(asset);\n                  throw e;\n                }\n        }\n    });\n\n    const calldata = encodeCall(transfer, parameters);\n\n    // Compute replacement pattern\n    let replacementPattern = \"0x\";\n    if (ownerInputs.length > 0) {\n        replacementPattern = WyvernProtocol.encodeReplacementPattern(transfer, \"owner\");\n    }\n\n    return {\n        target: transfer.target,\n        calldata,\n        replacementPattern,\n    };\n};\n\nfunction makeMatchingOrder({\n    order,\n    accountAddress,\n    recipientAddress\n}) {\n    accountAddress = accountAddress.toLowerCase();\n    recipientAddress = recipientAddress.toLowerCase();\n\n    const computeOrderParams = () => {\n        const shouldValidate = order.target === MERKLE_VALIDATOR_MAINNET;\n\n        if (\"asset\" in order.metadata) {\n            const schema = ERC721Schema; // currently supporting ERC721 only\n            return order.side == 0 ? encodeSell(\n                schema,\n                order.metadata.asset,\n                recipientAddress,\n                shouldValidate ? order.target : undefined\n            ) : encodeBuy(\n                schema,\n                order.metadata.asset,\n                recipientAddress,\n                shouldValidate ? order.target : undefined\n            );\n        } else {\n            throw new Error(\"Invalid order metadata\");\n        }\n    };\n\n    const { target, calldata, replacementPattern } = computeOrderParams();\n    const times = getTimeParameters(0);\n    \n    // Compat for matching buy orders that have fee recipient still on them\n    const feeRecipient = OPENSEA_FEE_RECIPIENT; // Maybe NULLADDRESS\n    const matchingOrder = {\n        exchange: order.exchange,\n        maker: accountAddress,\n        taker: order.maker,\n        quantity: order.quantity,\n        makerRelayerFee: order.makerRelayerFee,\n        takerRelayerFee: order.takerRelayerFee,\n        makerProtocolFee: order.makerProtocolFee,\n        takerProtocolFee: order.takerProtocolFee,\n        makerReferrerFee: order.makerReferrerFee,\n        waitingForBestCounterOrder: false,\n        feeMethod: order.feeMethod,\n        feeRecipient,\n        side: (order.side + 1) % 2,\n        saleKind: 0, // 0 fixed price 1 ducch aucion\n        target,\n        howToCall: order.howToCall,\n        calldata,\n        replacementPattern,\n        staticTarget: WyvernProtocol.NULL_ADDRESS,\n        staticExtradata: \"0x\",\n        paymentToken: order.paymentToken,\n        basePrice: order.basePrice,\n        extra: BigNumber(0),\n        listingTime: times.listingTime,\n        expirationTime: times.expirationTime,\n        salt: WyvernProtocol.generatePseudoRandomSalt(),\n        metadata: order.metadata,\n    };\n\n    return matchingOrder;\n}\n\nfunction assignOrdersToSides(order, matchingOrder) {\n    const isSellOrder = order.side == 1;\n\n    let buy;\n    let sell;\n\n    if (!isSellOrder) {\n        buy = order;\n        sell = {\n            ...matchingOrder,\n            v: buy.v,\n            r: buy.r,\n            s: buy.s,\n        };\n    } else {\n        sell = order;\n        buy = {\n            ...matchingOrder,\n            v: sell.v,\n            r: sell.r,\n            s: sell.s,\n        };\n    }\n\n    return { buy, sell };\n}\n\nconst _getMetadata = (order, referrerAddress) => {\n    const referrer = referrerAddress || order.metadata.referrerAddress;\n    if (referrer && isValidAddress(referrer)) {\n        return `0x000000000000000000000000${referrer.substr(2)}`;\n    }\n    return undefined;\n};\n\nconst _correctGasAmount = (estimation) => {\n    return Math.ceil(estimation * 1.01);\n};\n\n/**\n * Gets the price for the order using the contract\n * @param order The order to calculate the price for\n */\nasync function getCurrentPrice(order, wyvernExchange) {\n    const currentPrice = await wyvernExchange.methods.calculateCurrentPrice_(\n        [\n            order.exchange,\n            order.maker,\n            order.taker,\n            order.feeRecipient,\n            order.target,\n            order.staticTarget,\n            order.paymentToken,\n        ],\n        [\n            order.makerRelayerFee.toFixed(),\n            order.takerRelayerFee.toFixed(),\n            order.makerProtocolFee.toFixed(),\n            order.takerProtocolFee.toFixed(),\n            order.basePrice.toFixed(),\n            order.extra.toFixed(),\n            order.listingTime.toFixed(),\n            order.expirationTime.toFixed(),\n            order.salt.toFixed(),\n        ],\n        order.feeMethod,\n        order.side,\n        order.saleKind,\n        order.howToCall,\n        order.calldata,\n        order.replacementPattern,\n        order.staticExtradata\n    );\n\n    return currentPrice;\n}\n\n/**\n * Estimates the price of an order\n * @param order The order to estimate price on\n * @param secondsToBacktrack The number of seconds to subtract on current time,\n *  to fix race conditions\n * @param shouldRoundUp Whether to round up fractional wei\n */\nexport function estimateCurrentPrice(order, secondsToBacktrack = 30, shouldRoundUp = false) {\n    // round up should be enabled\n    let { basePrice, listingTime, expirationTime, extra } = order;\n    const { side, takerRelayerFee, saleKind } = order;\n\n    const now = new BigNumber(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);\n    basePrice = new BigNumber(basePrice);\n    listingTime = new BigNumber(listingTime);\n    expirationTime = new BigNumber(expirationTime);\n    extra = new BigNumber(extra);\n\n    let exactPrice = basePrice;\n    \n    // saleKind 0 : Fixed price 1: Duction acution\n    if (saleKind === 0) {\n        // Do nothing, price is correct\n    } else if (saleKind === 1) {\n        const diff = extra\n            .times(now.minus(listingTime))\n            .dividedBy(expirationTime.minus(listingTime));\n\n        // side 0 : buy 1: sell\n        exactPrice =\n\n        side == 1\n            ? /* Sell-side - start price: basePrice. End price: basePrice - extra. */\n                basePrice.minus(diff)\n            : /* Buy-side - start price: basePrice. End price: basePrice + extra. */\n            basePrice.plus(diff);\n    }\n\n    // Add taker fee only for buyers\n    if (side === 1 && !order.waitingForBestCounterOrder) {\n        // Buyer fee increases sale price\n        exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1);\n    }\n\n    return shouldRoundUp ? exactPrice.ceil() : exactPrice;\n}\n\nasync function _getRequiredAmountForTakingSellOrder(sell, wyvernExchange) {\n    const currentPrice = await getCurrentPrice(sell, wyvernExchange);\n    const estimatedPrice = estimateCurrentPrice(sell);\n\n    const maxPrice = BigNumber.max(currentPrice, estimatedPrice);\n\n    // TODO Why is this not always a big number?\n    sell.takerRelayerFee = BigNumber(sell.takerRelayerFee);\n    const feePercentage = sell.takerRelayerFee.div(INVERSE_BASIS_POINT);\n    const fee = feePercentage.times(maxPrice);\n\n    return fee.plus(maxPrice); // use .ceil()\n}\n\nasync function _atomicMatch({\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata = NULL_BLOCK_HASH,\n}) {\n    let value;\n\n    if (buy.paymentToken == WyvernProtocol.NULL_ADDRESS) {\n        value = await _getRequiredAmountForTakingSellOrder(sell, wyvernExchange);\n    }\n\n    const txnData = { from: accountAddress, value };\n\n    const args = [\n        [\n            buy.exchange,\n            buy.maker,\n            buy.taker,\n            buy.feeRecipient,\n            buy.target,\n            buy.staticTarget,\n            buy.paymentToken,\n            sell.exchange,\n            sell.maker,\n            sell.taker,\n            sell.feeRecipient,\n            sell.target,\n            sell.staticTarget,\n            sell.paymentToken,\n        ],\n        [\n            250.0.toString(),\n            0.0.toString(),\n            buy.makerProtocolFee.toString(),\n            buy.takerProtocolFee.toString(),\n            0.0.toString(),\n            buy.extra.toString(),\n            buy.listingTime.toString(),\n            buy.expirationTime.toString(),\n            buy.salt.toString(),\n            250.0.toString(),\n            0.0.toString(),\n            sell.makerProtocolFee.toString(),\n            sell.takerProtocolFee.toString(),\n            0.0.toString(),\n            0.0.toString(),\n            sell.listingTime.toString(),\n            sell.expirationTime.toString(),\n            sell.salt.toString(),\n        ],\n        [\n            buy.feeMethod,\n            buy.side,\n            buy.saleKind,\n            buy.howToCall,\n            sell.feeMethod,\n            sell.side,\n            sell.saleKind,\n            sell.howToCall,\n        ],\n        buy.calldata,\n        sell.calldata,\n        buy.replacementPattern,\n        sell.replacementPattern,\n        buy.staticExtradata,\n        sell.staticExtradata,\n        [buy.v || 0, sell.v || 0],\n        [\n            buy.r || NULL_BLOCK_HASH,\n            buy.s || NULL_BLOCK_HASH,\n            sell.r || NULL_BLOCK_HASH,\n            sell.s || NULL_BLOCK_HASH,\n            metadata,\n        ]\n    ];\n\n    // const gasEstimate = await wyvernExchange.functions.estimateGasAsync(txnData);\n    // txnData.gas = _correctGasAmount(gasEstimate);\n\n    const atomicMatchMethod = wyvernExchange.functions.atomicMatch_(\n        args[0],\n        args[1],\n        args[2],\n        args[3],\n        args[4],\n        args[5],\n        args[6],\n        args[7],\n        args[8],\n        args[9],\n        args[10],\n        txnData\n    ).then(res => {\n        console.log(res)\n    });\n\n    return { atomicMatchMethod, txnData };\n}\n\nasync function fulfillOrder({\n    order,\n    provider,\n    accountAddress,\n    recipientAddress,\n    referrerAddress\n}) {\n    console.info(`Account: ${accountAddress} | Recipient: ${recipientAddress} | Referrer: ${referrerAddress}`);\n\n    // check if valid order\n    const wyvernExchange = WyvernContract(provider);\n    const isValid = await validateOrder({ order, accountAddress, wyvernExchange });\n\n    const matchingOrder = makeMatchingOrder({\n        order,\n        accountAddress,\n        recipientAddress: recipientAddress\n    });\n\n    const { buy, sell } = assignOrdersToSides(order, matchingOrder);\n    const metadata = _getMetadata(order, referrerAddress);\n\n    return await _atomicMatch({\n        buy,\n        sell,\n        accountAddress,\n        wyvernExchange,\n        metadata\n    });\n};\n\nconst assetContractFromJSON = (assetContract) => {\n    return {\n        name: assetContract.name,\n        description: assetContract.description,\n        type: assetContract.assetContract_type,\n        schemaName: assetContract.schema_name,\n        address: assetContract.address,\n        tokenSymbol: assetContract.symbol,\n        buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n        sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n        openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n        openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n        devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n        devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n        imageUrl: assetContract.image_url,\n        externalLink: assetContract.external_link,\n        wikiLink: assetContract.wiki_link,\n    };\n};\n\nexport const collectionFromJSON = (collection) => {\n    const createdDate = new Date(`${collection.created_date}Z`);\n\n    return {\n        createdDate,\n        name: collection.name,\n        description: collection.description,\n        slug: collection.slug,\n        editors: collection.editors,\n        hidden: collection.hidden,\n        featured: collection.featured,\n        featuredImageUrl: collection.featured_image_url,\n        displayData: collection.display_data,\n        paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n        openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n        openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n        devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n        devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n        payoutAddress: collection.payout_address,\n        imageUrl: collection.image_url,\n        largeImageUrl: collection.large_image_url,\n        stats: collection.stats,\n        traitStats: collection.traits,\n        externalLink: collection.external_url,\n        wikiLink: collection.wiki_url,\n    };\n};\n\nconst userFromJSON = (user) => {\n    return { username: user.username };\n};\n\nconst accountFromJSON = (account) => {\n    return {\n        address: account.address,\n        config: account.config,\n        profileImgUrl: account.profile_img_url,\n        user: account.user ? userFromJSON(account.user) : null\n    };\n};\n\nconst transactionFromJSON = (transaction) => {\n    return {\n        fromAccount: accountFromJSON(transaction.from_account),\n        toAccount: accountFromJSON(transaction.to_account),\n        createdDate: new Date(`${transaction.created_date}Z`),\n        modifiedDate: new Date(`${transaction.modified_date}Z`),\n        transactionHash: transaction.transaction_hash,\n        transactionIndex: transaction.transaction_index,\n        blockNumber: transaction.block_number,\n        blockHash: transaction.block_hash,\n        timestamp: new Date(`${transaction.timestamp}Z`)\n    };\n};\n\nconst assetEventFromJSON = (assetEvent) => {\n    return {\n        eventType: assetEvent.event_type,\n        eventTimestamp: assetEvent.event_timestamp,\n        auctionType: assetEvent.auction_type,\n        totalPrice: assetEvent.total_price,\n        transaction: assetEvent.transaction\n          ? transactionFromJSON(assetEvent.transaction)\n          : null,\n        paymentToken: assetEvent.payment_token\n          ? tokenFromJSON(assetEvent.payment_token)\n          : null\n    };\n};\n\nconst assetFromJSON = (asset) => {\n    const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n    const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n    const fromJSON = {\n        tokenId: asset.token_id.toString(),\n        tokenAddress: asset.asset_contract.address,\n        name: asset.name,\n        description: asset.description,\n        owner: asset.owner,\n        assetContract: assetContractFromJSON(asset.asset_contract),\n        collection: collectionFromJSON(asset.collection),\n        orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n        sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n        buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n\n        isPresale: asset.is_presale,\n        // Don't use previews if it's a special image\n        imageUrl:\n          isAnimated || isSvg\n            ? asset.image_url\n            : asset.image_preview_url || asset.image_url,\n        imagePreviewUrl: asset.image_preview_url,\n        imageUrlOriginal: asset.image_original_url,\n        imageUrlThumbnail: asset.image_thumbnail_url,\n\n        externalLink: asset.external_link,\n        openseaLink: asset.permalink,\n        traits: asset.traits,\n        numSales: asset.num_sales,\n        lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n        backgroundColor: asset.background_color\n          ? `#${asset.background_color}`\n          : null,\n\n        transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n        transferFeePaymentToken: asset.transfer_fee_payment_token\n          ? tokenFromJSON(asset.transfer_fee_payment_token)\n          : null\n    };\n\n    // If orders were included, put them in sell/buy order groups\n    if (fromJSON.orders && !fromJSON.sellOrders) {\n        fromJSON.sellOrders = fromJSON.orders.filter((o) => o.side == 1);\n    }\n\n    if (fromJSON.orders && !fromJSON.buyOrders) {\n        fromJSON.buyOrders = fromJSON.orders.filter((o) => o.side == 0);\n    }\n\n    return fromJSON;\n};\n\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\nasync function getAsset({ tokenAddress, tokenId }) {\n    const { data } = await axios(`${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`);\n    return assetFromJSON(data);\n}\n\nasync function validateOrder({ order, accountAddress, wyvernExchange }) {\n    // Check sell parameters\n    const sellValid = await wyvernExchange.functions.validateOrder_(\n        [\n            order.exchange,\n            order.maker,\n            order.taker,\n            order.feeRecipient,\n            order.target,\n            order.staticTarget,\n            order.paymentToken\n        ],\n        [\n            250.0.toFixed(),\n            0.0.toFixed(),\n            order.makerProtocolFee,\n            order.takerProtocolFee,\n            0.0.toFixed(),\n            0.0.toFixed(),\n            order.listingTime,\n            order.expirationTime,\n            order.salt,\n        ],\n        order.feeMethod,\n        order.side,\n        order.saleKind,\n        order.howToCall,\n        order.calldata,\n        order.replacementPattern,\n        order.staticExtradata,\n        order.v,\n        order.r,\n        order.s\n    );\n\n    if (!sellValid) {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n            message: new Error(`Failed to validate sell order parameters. It looks like this listing is invalid.`),\n            code: \"InvalidOrder\",\n        };\n        // TODO: call order invalidate API\n    }\n\n    return sellValid;\n};\n\nasync function postOrder(order, retries = 2) {\n    try {\n        const { data } = await axios.post(\n            `https://api.opensea.io/wyvern/v1/orders/post/`,\n            order,\n            { headers: { \"x-api-key\": X_API_KEY }}\n        );\n\n        return data;\n    } catch (error) {\n        throw new Error(error);\n    };\n};\n\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\nconst orderToGolomJSON = (order) => {\n    const asJSON = {\n        exchange: order.exchange.toLowerCase(),\n        maker: { address: order.maker.toLowerCase() },\n        taker: { address: order.taker.toLowerCase() },\n        maker_relayer_fee: order.makerRelayerFee.toString(),\n        taker_relayer_fee: order.takerRelayerFee.toString(),\n        maker_protocol_fee: order.makerProtocolFee.toString(),\n        taker_protocol_fee: order.takerProtocolFee.toString(),\n        makerReferrerFee: order.makerReferrerFee.toString(),\n        fee_method: order.feeMethod,\n        fee_recipient: { address: order.feeRecipient.toLowerCase() },\n        side: order.side,\n        sale_kind: order.saleKind,\n        target: order.target.toLowerCase(),\n        how_to_call: order.howToCall,\n        calldata: order.calldata,\n        replacement_pattern: order.replacementPattern,\n        static_target: order.staticTarget.toLowerCase(),\n        static_extradata: order.staticExtradata,\n        payment_token: order.paymentToken.toLowerCase(),\n        quantity: order.quantity.toString(),\n        base_price: order.basePrice.toString(),\n        englishAuctionReservePrice: order.englishAuctionReservePrice\n          ? order.englishAuctionReservePrice.toString()\n          : undefined,\n        extra: order.extra.toString(),\n        createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n        listing_time: order.listingTime.toString(),\n        expiration_time: order.expirationTime.toString(),\n        salt: order.salt.toString(),\n        metadata: order.metadata,\n        v: order.v,\n        r: order.r,\n        s: order.s,\n        prefixed_hash: order.hash,\n      };\n    \n    return asJSON;\n};\n\nexport { fulfillOrder, createOrder, cancelOrder };\n\n// maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28\n"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,WAA/B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,qBAAnC;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,SAAP,MAAsB,cAAtB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,aAAvC;AACA,SAASC,yBAAT,EAAoCC,wBAApC,EAA8DC,uBAA9D,QAA6F,aAA7F;AACA,SAASC,qBAAT,EAAgCC,eAAhC,EAAiDC,mBAAjD,EAAsEC,8BAAtE,EAAsGC,+BAAtG,EAAuIC,kCAAvI,EAA2KC,kBAA3K,EAA+LC,6BAA/L,EAA8NC,wBAA9N,QAA8P,aAA9P;AACA,SAASC,4BAAT,QAA6C,aAA7C;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,EAAmDC,yBAAnD,QAAoF,aAApF;AACA,SAASC,mBAAT,QAAoC,aAApC,C,CAEA;;AACA,SAASC,cAAT,QAA+B,aAA/B,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,WAAP,MAAwB,uBAAxB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,UAAP,MAAuB,sBAAvB,C,CAEA;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;EAC7B,MAAMC,QAAQ,GAAG;IACbC,IAAI,EAAEF,KAAK,CAACE,IADC;IAEbC,MAAM,EAAEH,KAAK,CAACG,MAFD;IAGbC,QAAQ,EAAEJ,KAAK,CAACI,QAHH;IAIbC,OAAO,EAAEL,KAAK,CAACK,OAJF;IAKbC,QAAQ,EAAEN,KAAK,CAACO,SALH;IAMbC,QAAQ,EAAER,KAAK,CAACS,SANH;IAObC,QAAQ,EAAEV,KAAK,CAACW;EAPH,CAAjB;EAUA,OAAOV,QAAP;AACH,CAZD;;AAcA,MAAMW,aAAa,GAAIC,KAAD,IAAW;EAC7B,MAAMC,WAAW,GAAG,IAAIC,IAAJ,CAAU,GAAEF,KAAK,CAACG,YAAa,GAA/B,CAApB;EACA,MAAMf,QAAQ,GAAG;IACbgB,IAAI,EAAEJ,KAAK,CAACK,UAAN,IAAoBL,KAAK,CAACI,IADnB;IAEbE,oBAAoB,EAAEN,KAAK,CAACO,SAAN,IAAmBP,KAAK,CAACQ,SAFlC;IAGbC,aAAa,EAAET,KAAK,CAACU,cAHR;IAIbC,QAAQ,EAAEX,KAAK,CAACW,QAJH;IAKbC,QAAQ,EAAE,IAAItD,SAAJ,CAAc0C,KAAK,CAACY,QAAN,IAAkB,CAAhC,CALG;IAMbC,QAAQ,EAAEb,KAAK,CAACa,QANH;IAObC,YAAY,EAAEd,KAAK,CAACe,KAPP;IAQbC,YAAY,EAAEhB,KAAK,CAACiB,KARP;IAUb;IACAF,KAAK,EAAEf,KAAK,CAACe,KAAN,CAAYvB,OAXN;IAYbyB,KAAK,EAAEjB,KAAK,CAACiB,KAAN,CAAYzB,OAZN;IAab0B,eAAe,EAAE,IAAI5D,SAAJ,CAAc0C,KAAK,CAACmB,iBAApB,CAbJ;IAcbC,eAAe,EAAE,IAAI9D,SAAJ,CAAc0C,KAAK,CAACqB,iBAApB,CAdJ;IAebC,gBAAgB,EAAE,IAAIhE,SAAJ,CAAc0C,KAAK,CAACuB,kBAApB,CAfL;IAgBbC,gBAAgB,EAAE,IAAIlE,SAAJ,CAAc0C,KAAK,CAACyB,kBAApB,CAhBL;IAiBbC,gBAAgB,EAAE,IAAIpE,SAAJ,CAAc0C,KAAK,CAAC2B,kBAAN,IAA4B,CAA1C,CAjBL;IAkBbC,0BAA0B,EAAE5B,KAAK,CAAC6B,aAAN,CAAoBrC,OAApB,IAA+BxC,cAAc,CAAC8E,YAlB7D;IAmBbC,SAAS,EAAE/B,KAAK,CAACgC,UAnBJ;IAoBbC,mBAAmB,EAAEjC,KAAK,CAAC6B,aApBd;IAqBbK,YAAY,EAAElC,KAAK,CAAC6B,aAAN,CAAoBrC,OArBrB;IAsBb2C,IAAI,EAAEnC,KAAK,CAACmC,IAtBC;IAuBbC,QAAQ,EAAEpC,KAAK,CAACqC,SAvBH;IAwBbC,MAAM,EAAEtC,KAAK,CAACsC,MAxBD;IAyBbC,SAAS,EAAEvC,KAAK,CAACwC,WAzBJ;IA0BbC,QAAQ,EAAEzC,KAAK,CAACyC,QA1BH;IA2BbC,kBAAkB,EAAE1C,KAAK,CAAC2C,mBA3Bb;IA4BbC,YAAY,EAAE5C,KAAK,CAAC6C,aA5BP;IA6BbC,eAAe,EAAE9C,KAAK,CAAC+C,gBA7BV;IA8BbC,YAAY,EAAEhD,KAAK,CAACiD,aA9BP;IA+BbC,SAAS,EAAE,IAAI5F,SAAJ,CAAc0C,KAAK,CAACmD,UAApB,CA/BE;IAgCbC,KAAK,EAAE,IAAI9F,SAAJ,CAAc0C,KAAK,CAACoD,KAApB,CAhCM;IAiCbC,aAAa,EAAE,IAAI/F,SAAJ,CAAc0C,KAAK,CAACsD,cAAN,IAAwB,CAAtC,CAjCF;IAkCbC,YAAY,EAAE,IAAIjG,SAAJ,CAAc0C,KAAK,CAACwD,aAAN,IAAuB,CAArC,CAlCD;IAoCbC,WAAW,EAAE,IAAInG,SAAJ,CAAcoG,IAAI,CAACC,KAAL,CAAW1D,WAAW,CAAC2D,OAAZ,KAAwB,IAAnC,CAAd,CApCA;IAqCbC,WAAW,EAAE,IAAIvG,SAAJ,CAAc0C,KAAK,CAAC8D,YAApB,CArCA;IAsCbC,cAAc,EAAE,IAAIzG,SAAJ,CAAc0C,KAAK,CAACgE,eAApB,CAtCH;IAwCbC,IAAI,EAAE,IAAI3G,SAAJ,CAAc0C,KAAK,CAACiE,IAApB,CAxCO;IAyCbC,CAAC,EAAEC,QAAQ,CAACnE,KAAK,CAACkE,CAAP,CAzCE;IA0CbE,CAAC,EAAEpE,KAAK,CAACoE,CA1CI;IA2CbC,CAAC,EAAErE,KAAK,CAACqE,CA3CI;IA6CbC,oBAAoB,EAAEtE,KAAK,CAACuE,sBAAN,GAClBrF,aAAa,CAACc,KAAK,CAACuE,sBAAP,CADK,GAElBC,SA/CS;IAgDbC,KAAK,EAAEzE,KAAK,CAACyE,KAhDA;IAiDbC,WAAW,EAAE1E,KAAK,CAAC2E;EAjDN,CAAjB,CAF6B,CAsD7B;;EACAvF,QAAQ,CAACmE,YAAT,GAAwBqB,oBAAoB,CAACxF,QAAD,CAA5C;EACA,OAAOA,QAAP;AACH,CAzDD;;AA2DA,MAAMyF,SAAS,GAAG,CAACC,MAAD,EAASL,KAAT,EAAgBjF,OAAhB,EAAyBuF,gBAAzB,KAA8C;EAC5D;EACA,MAAMC,QAAQ,GAAGD,gBAAgB,IAAID,MAAM,CAACG,SAAP,CAAiBC,gBAArC,GACXJ,MAAM,CAACG,SAAP,CAAiBC,gBAAjB,CAAkCT,KAAlC,EAAyCM,gBAAzC,CADW,GAEXD,MAAM,CAACG,SAAP,CAAiBD,QAAjB,CAA0BP,KAA1B,CAFN;EAGA,MAAMU,YAAY,GAAGH,QAAQ,CAACI,MAAT,CAAgBC,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,aAAzC,CAArB;EACA,MAAMC,WAAW,GAAGR,QAAQ,CAACI,MAAT,CAAgBC,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,OAAzC,CAApB,CAN4D,CAQ5D;;EACA,IAAIJ,YAAY,CAACM,MAAb,KAAwB,CAA5B,EAA+B;IAC3B,MAAM,IAAIC,KAAJ,CAAU,8DAA8DP,YAAY,CAACM,MAA3E,GAAoF,MAA9F,CAAN;EACH,CAX2D,CAa5D;;;EACA,MAAME,UAAU,GAAGX,QAAQ,CAACI,MAAT,CAAgBQ,GAAhB,CAAqBC,KAAD,IAAW;IAC9C,QAAQA,KAAK,CAACN,IAAd;MACI,KAAK,aAAL;QACI,OAAO/F,OAAP;;MACJ,KAAK,OAAL;QACI,OAAOxC,cAAc,CAAC8I,oBAAf,CAAoCD,KAAK,CAACE,IAA1C,CAAP;;MACJ;QACI,IAAI;UACF,OAAOF,KAAK,CAACG,KAAN,CAAYC,QAAZ,EAAP;QACD,CAFD,CAEE,OAAOC,CAAP,EAAU;UACVC,OAAO,CAACC,KAAR,CAActB,MAAd;UACAqB,OAAO,CAACC,KAAR,CAAc3B,KAAd;UACA,MAAMyB,CAAN;QACD;;IAZT;EAcH,CAfkB,CAAnB;EAiBA,MAAMzD,QAAQ,GAAGxD,UAAU,CAAC+F,QAAD,EAAWW,UAAX,CAA3B,CA/B4D,CAiC5D;;EACA,IAAIjD,kBAAkB,GAAG,IAAzB;;EACA,IAAI8C,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;IACxB/C,kBAAkB,GAAG1F,cAAc,CAACqJ,wBAAf,CAAwCrB,QAAxC,EAAkD,OAAlD,CAArB;EACH;;EAED,OAAO;IACH1C,MAAM,EAAE0C,QAAQ,CAAC1C,MADd;IAEHG,QAFG;IAGHC;EAHG,CAAP;AAKH,CA5CD;;AA8CA,SAAS4D,iBAAT,OAIG;EAAA,IAJwB;IACvBtG,KADuB;IAEvBuG,cAFuB;IAGvBC;EAHuB,CAIxB;EACCD,cAAc,GAAGA,cAAc,CAACE,WAAf,EAAjB;EACAD,gBAAgB,GAAGA,gBAAgB,CAACC,WAAjB,EAAnB;;EAEA,MAAMC,kBAAkB,GAAG,MAAM;IAC7B,MAAMC,cAAc,GAAG3G,KAAK,CAACsC,MAAN,KAAiBjE,wBAAxC;;IAEA,IAAI,WAAW2B,KAAK,CAACW,QAArB,EAA+B;MAC3B,MAAMmE,MAAM,GAAG3H,YAAf,CAD2B,CACE;;MAC7B,OAAO6C,KAAK,CAACmC,IAAN,IAAc,CAAd,GAAkBrD,UAAU,CAC/BgG,MAD+B,EAE/B9E,KAAK,CAACW,QAAN,CAAe8D,KAFgB,EAG/B+B,gBAH+B,EAI/BG,cAAc,GAAG3G,KAAK,CAACsC,MAAT,GAAkBkC,SAJD,CAA5B,GAKHK,SAAS,CACTC,MADS,EAET9E,KAAK,CAACW,QAAN,CAAe8D,KAFN,EAGT+B,gBAHS,EAITG,cAAc,GAAG3G,KAAK,CAACsC,MAAT,GAAkBkC,SAJvB,CALb;IAWH,CAbD,MAaO;MACH,MAAM,IAAIkB,KAAJ,CAAU,wBAAV,CAAN;IACH;EACJ,CAnBD;;EAqBA,MAAM;IAAEpD,MAAF;IAAUG,QAAV;IAAoBC;EAApB,IAA2CgE,kBAAkB,EAAnE;EACA,MAAME,KAAK,GAAG7H,iBAAiB,CAAC,CAAD,CAA/B,CA1BD,CA4BC;;EACA,MAAMmD,YAAY,GAAGrE,qBAArB,CA7BD,CA6B6C;;EAC5C,MAAMgJ,aAAa,GAAG;IAClBhG,QAAQ,EAAEb,KAAK,CAACa,QADE;IAElBE,KAAK,EAAEwF,cAFW;IAGlBtF,KAAK,EAAEjB,KAAK,CAACe,KAHK;IAIlBH,QAAQ,EAAEZ,KAAK,CAACY,QAJE;IAKlBM,eAAe,EAAElB,KAAK,CAACkB,eALL;IAMlBE,eAAe,EAAEpB,KAAK,CAACoB,eANL;IAOlBE,gBAAgB,EAAEtB,KAAK,CAACsB,gBAPN;IAQlBE,gBAAgB,EAAExB,KAAK,CAACwB,gBARN;IASlBE,gBAAgB,EAAE1B,KAAK,CAAC0B,gBATN;IAUlBE,0BAA0B,EAAE,KAVV;IAWlBG,SAAS,EAAE/B,KAAK,CAAC+B,SAXC;IAYlBG,YAZkB;IAalBC,IAAI,EAAE,CAACnC,KAAK,CAACmC,IAAN,GAAa,CAAd,IAAmB,CAbP;IAclBC,QAAQ,EAAE,CAdQ;IAcL;IACbE,MAfkB;IAgBlBC,SAAS,EAAEvC,KAAK,CAACuC,SAhBC;IAiBlBE,QAjBkB;IAkBlBC,kBAlBkB;IAmBlBE,YAAY,EAAE5F,cAAc,CAAC8E,YAnBX;IAoBlBgB,eAAe,EAAE,IApBC;IAqBlBE,YAAY,EAAEhD,KAAK,CAACgD,YArBF;IAsBlBE,SAAS,EAAElD,KAAK,CAACkD,SAtBC;IAuBlBE,KAAK,EAAE9F,SAAS,CAAC,CAAD,CAvBE;IAwBlBuG,WAAW,EAAE+C,KAAK,CAAC/C,WAxBD;IAyBlBE,cAAc,EAAE6C,KAAK,CAAC7C,cAzBJ;IA0BlBE,IAAI,EAAEjH,cAAc,CAAC8J,wBAAf,EA1BY;IA2BlBnG,QAAQ,EAAEX,KAAK,CAACW;EA3BE,CAAtB;EA8BA,OAAOkG,aAAP;AACH;;AAED,SAASE,mBAAT,CAA6B/G,KAA7B,EAAoC6G,aAApC,EAAmD;EAC/C,MAAMG,WAAW,GAAGhH,KAAK,CAACmC,IAAN,IAAc,CAAlC;EAEA,IAAI8E,GAAJ;EACA,IAAIC,IAAJ;;EAEA,IAAI,CAACF,WAAL,EAAkB;IACdC,GAAG,GAAGjH,KAAN;IACAkH,IAAI,GAAG,EACH,GAAGL,aADA;MAEH3C,CAAC,EAAE+C,GAAG,CAAC/C,CAFJ;MAGHE,CAAC,EAAE6C,GAAG,CAAC7C,CAHJ;MAIHC,CAAC,EAAE4C,GAAG,CAAC5C;IAJJ,CAAP;EAMH,CARD,MAQO;IACH6C,IAAI,GAAGlH,KAAP;IACAiH,GAAG,GAAG,EACF,GAAGJ,aADD;MAEF3C,CAAC,EAAEgD,IAAI,CAAChD,CAFN;MAGFE,CAAC,EAAE8C,IAAI,CAAC9C,CAHN;MAIFC,CAAC,EAAE6C,IAAI,CAAC7C;IAJN,CAAN;EAMH;;EAED,OAAO;IAAE4C,GAAF;IAAOC;EAAP,CAAP;AACH;;AAED,MAAMC,YAAY,GAAG,CAACnH,KAAD,EAAQoH,eAAR,KAA4B;EAC7C,MAAMC,QAAQ,GAAGD,eAAe,IAAIpH,KAAK,CAACW,QAAN,CAAeyG,eAAnD;;EACA,IAAIC,QAAQ,IAAIjK,cAAc,CAACiK,QAAD,CAA9B,EAA0C;IACtC,OAAQ,6BAA4BA,QAAQ,CAACC,MAAT,CAAgB,CAAhB,CAAmB,EAAvD;EACH;;EACD,OAAO9C,SAAP;AACH,CAND;;AAQA,MAAM+C,iBAAiB,GAAIC,UAAD,IAAgB;EACtC,OAAO9D,IAAI,CAAC+D,IAAL,CAAUD,UAAU,GAAG,IAAvB,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;;;AACA,eAAeE,eAAf,CAA+B1H,KAA/B,EAAsC2H,cAAtC,EAAsD;EAClD,MAAMpE,YAAY,GAAG,MAAMoE,cAAc,CAACC,OAAf,CAAuBC,sBAAvB,CACvB,CACI7H,KAAK,CAACa,QADV,EAEIb,KAAK,CAACe,KAFV,EAGIf,KAAK,CAACiB,KAHV,EAIIjB,KAAK,CAACkC,YAJV,EAKIlC,KAAK,CAACsC,MALV,EAMItC,KAAK,CAAC4C,YANV,EAOI5C,KAAK,CAACgD,YAPV,CADuB,EAUvB,CACIhD,KAAK,CAACkB,eAAN,CAAsB4G,OAAtB,EADJ,EAEI9H,KAAK,CAACoB,eAAN,CAAsB0G,OAAtB,EAFJ,EAGI9H,KAAK,CAACsB,gBAAN,CAAuBwG,OAAvB,EAHJ,EAII9H,KAAK,CAACwB,gBAAN,CAAuBsG,OAAvB,EAJJ,EAKI9H,KAAK,CAACkD,SAAN,CAAgB4E,OAAhB,EALJ,EAMI9H,KAAK,CAACoD,KAAN,CAAY0E,OAAZ,EANJ,EAOI9H,KAAK,CAAC6D,WAAN,CAAkBiE,OAAlB,EAPJ,EAQI9H,KAAK,CAAC+D,cAAN,CAAqB+D,OAArB,EARJ,EASI9H,KAAK,CAACiE,IAAN,CAAW6D,OAAX,EATJ,CAVuB,EAqBvB9H,KAAK,CAAC+B,SArBiB,EAsBvB/B,KAAK,CAACmC,IAtBiB,EAuBvBnC,KAAK,CAACoC,QAvBiB,EAwBvBpC,KAAK,CAACuC,SAxBiB,EAyBvBvC,KAAK,CAACyC,QAzBiB,EA0BvBzC,KAAK,CAAC0C,kBA1BiB,EA2BvB1C,KAAK,CAAC8C,eA3BiB,CAA3B;EA8BA,OAAOS,YAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASqB,oBAAT,CAA8B5E,KAA9B,EAAqF;EAAA,IAAhD+H,kBAAgD,uEAA3B,EAA2B;EAAA,IAAvBC,aAAuB,uEAAP,KAAO;EACxF;EACA,IAAI;IAAE9E,SAAF;IAAaW,WAAb;IAA0BE,cAA1B;IAA0CX;EAA1C,IAAoDpD,KAAxD;EACA,MAAM;IAAEmC,IAAF;IAAQf,eAAR;IAAyBgB;EAAzB,IAAsCpC,KAA5C;EAEA,MAAMiI,GAAG,GAAG,IAAI3K,SAAJ,CAAcoG,IAAI,CAACC,KAAL,CAAWzD,IAAI,CAAC+H,GAAL,KAAa,IAAxB,CAAd,EAA6CC,KAA7C,CAAmDH,kBAAnD,CAAZ;EACA7E,SAAS,GAAG,IAAI5F,SAAJ,CAAc4F,SAAd,CAAZ;EACAW,WAAW,GAAG,IAAIvG,SAAJ,CAAcuG,WAAd,CAAd;EACAE,cAAc,GAAG,IAAIzG,SAAJ,CAAcyG,cAAd,CAAjB;EACAX,KAAK,GAAG,IAAI9F,SAAJ,CAAc8F,KAAd,CAAR;EAEA,IAAI+E,UAAU,GAAGjF,SAAjB,CAXwF,CAaxF;;EACA,IAAId,QAAQ,KAAK,CAAjB,EAAoB,CAChB;EACH,CAFD,MAEO,IAAIA,QAAQ,KAAK,CAAjB,EAAoB;IACvB,MAAMgG,IAAI,GAAGhF,KAAK,CACbwD,KADQ,CACFqB,GAAG,CAACC,KAAJ,CAAUrE,WAAV,CADE,EAERwE,SAFQ,CAEEtE,cAAc,CAACmE,KAAf,CAAqBrE,WAArB,CAFF,CAAb,CADuB,CAKvB;;IACAsE,UAAU,GAEVhG,IAAI,IAAI,CAAR;IACM;IACEe,SAAS,CAACgF,KAAV,CAAgBE,IAAhB,CAFR;IAGM;IACFlF,SAAS,CAACoF,IAAV,CAAeF,IAAf,CANJ;EAOH,CA7BuF,CA+BxF;;;EACA,IAAIjG,IAAI,KAAK,CAAT,IAAc,CAACnC,KAAK,CAAC4B,0BAAzB,EAAqD;IACjD;IACAuG,UAAU,GAAGA,UAAU,CAACvB,KAAX,CAAiB,CAACxF,eAAD,GAAmBrD,mBAAnB,GAAyC,CAA1D,CAAb;EACH;;EAED,OAAOiK,aAAa,GAAGG,UAAU,CAACV,IAAX,EAAH,GAAuBU,UAA3C;AACH;;AAED,eAAeI,oCAAf,CAAoDrB,IAApD,EAA0DS,cAA1D,EAA0E;EACtE,MAAMpE,YAAY,GAAG,MAAMmE,eAAe,CAACR,IAAD,EAAOS,cAAP,CAA1C;EACA,MAAMa,cAAc,GAAG5D,oBAAoB,CAACsC,IAAD,CAA3C;EAEA,MAAMuB,QAAQ,GAAGnL,SAAS,CAACoL,GAAV,CAAcnF,YAAd,EAA4BiF,cAA5B,CAAjB,CAJsE,CAMtE;;EACAtB,IAAI,CAAC9F,eAAL,GAAuB9D,SAAS,CAAC4J,IAAI,CAAC9F,eAAN,CAAhC;EACA,MAAMuH,aAAa,GAAGzB,IAAI,CAAC9F,eAAL,CAAqBwH,GAArB,CAAyB7K,mBAAzB,CAAtB;EACA,MAAM8K,GAAG,GAAGF,aAAa,CAAC/B,KAAd,CAAoB6B,QAApB,CAAZ;EAEA,OAAOI,GAAG,CAACP,IAAJ,CAASG,QAAT,CAAP,CAXsE,CAW3C;AAC9B;;AAED,eAAeK,YAAf,QAMG;EAAA,IANyB;IACxB7B,GADwB;IAExBC,IAFwB;IAGxBX,cAHwB;IAIxBoB,cAJwB;IAKxBhH,QAAQ,GAAG7C;EALa,CAMzB;EACC,IAAIkI,KAAJ;;EAEA,IAAIiB,GAAG,CAACjE,YAAJ,IAAoBhG,cAAc,CAAC8E,YAAvC,EAAqD;IACjDkE,KAAK,GAAG,MAAMuC,oCAAoC,CAACrB,IAAD,EAAOS,cAAP,CAAlD;EACH;;EAED,MAAMoB,OAAO,GAAG;IAAEC,IAAI,EAAEzC,cAAR;IAAwBP;EAAxB,CAAhB;EAEA,MAAMiD,IAAI,GAAG,CACT,CACIhC,GAAG,CAACpG,QADR,EAEIoG,GAAG,CAAClG,KAFR,EAGIkG,GAAG,CAAChG,KAHR,EAIIgG,GAAG,CAAC/E,YAJR,EAKI+E,GAAG,CAAC3E,MALR,EAMI2E,GAAG,CAACrE,YANR,EAOIqE,GAAG,CAACjE,YAPR,EAQIkE,IAAI,CAACrG,QART,EASIqG,IAAI,CAACnG,KATT,EAUImG,IAAI,CAACjG,KAVT,EAWIiG,IAAI,CAAChF,YAXT,EAYIgF,IAAI,CAAC5E,MAZT,EAaI4E,IAAI,CAACtE,YAbT,EAcIsE,IAAI,CAAClE,YAdT,CADS,EAiBT,CACI,MAAMiD,QAAN,EADJ,EAEI,IAAIA,QAAJ,EAFJ,EAGIgB,GAAG,CAAC3F,gBAAJ,CAAqB2E,QAArB,EAHJ,EAIIgB,GAAG,CAACzF,gBAAJ,CAAqByE,QAArB,EAJJ,EAKI,IAAIA,QAAJ,EALJ,EAMIgB,GAAG,CAAC7D,KAAJ,CAAU6C,QAAV,EANJ,EAOIgB,GAAG,CAACpD,WAAJ,CAAgBoC,QAAhB,EAPJ,EAQIgB,GAAG,CAAClD,cAAJ,CAAmBkC,QAAnB,EARJ,EASIgB,GAAG,CAAChD,IAAJ,CAASgC,QAAT,EATJ,EAUI,MAAMA,QAAN,EAVJ,EAWI,IAAIA,QAAJ,EAXJ,EAYIiB,IAAI,CAAC5F,gBAAL,CAAsB2E,QAAtB,EAZJ,EAaIiB,IAAI,CAAC1F,gBAAL,CAAsByE,QAAtB,EAbJ,EAcI,IAAIA,QAAJ,EAdJ,EAeI,IAAIA,QAAJ,EAfJ,EAgBIiB,IAAI,CAACrD,WAAL,CAAiBoC,QAAjB,EAhBJ,EAiBIiB,IAAI,CAACnD,cAAL,CAAoBkC,QAApB,EAjBJ,EAkBIiB,IAAI,CAACjD,IAAL,CAAUgC,QAAV,EAlBJ,CAjBS,EAqCT,CACIgB,GAAG,CAAClF,SADR,EAEIkF,GAAG,CAAC9E,IAFR,EAGI8E,GAAG,CAAC7E,QAHR,EAII6E,GAAG,CAAC1E,SAJR,EAKI2E,IAAI,CAACnF,SALT,EAMImF,IAAI,CAAC/E,IANT,EAOI+E,IAAI,CAAC9E,QAPT,EAQI8E,IAAI,CAAC3E,SART,CArCS,EA+CT0E,GAAG,CAACxE,QA/CK,EAgDTyE,IAAI,CAACzE,QAhDI,EAiDTwE,GAAG,CAACvE,kBAjDK,EAkDTwE,IAAI,CAACxE,kBAlDI,EAmDTuE,GAAG,CAACnE,eAnDK,EAoDToE,IAAI,CAACpE,eApDI,EAqDT,CAACmE,GAAG,CAAC/C,CAAJ,IAAS,CAAV,EAAagD,IAAI,CAAChD,CAAL,IAAU,CAAvB,CArDS,EAsDT,CACI+C,GAAG,CAAC7C,CAAJ,IAAStG,eADb,EAEImJ,GAAG,CAAC5C,CAAJ,IAASvG,eAFb,EAGIoJ,IAAI,CAAC9C,CAAL,IAAUtG,eAHd,EAIIoJ,IAAI,CAAC7C,CAAL,IAAUvG,eAJd,EAKI6C,QALJ,CAtDS,CAAb,CATD,CAwEC;EACA;;EAEA,MAAMuI,iBAAiB,GAAGvB,cAAc,CAAC1C,SAAf,CAAyBkE,YAAzB,CACtBF,IAAI,CAAC,CAAD,CADkB,EAEtBA,IAAI,CAAC,CAAD,CAFkB,EAGtBA,IAAI,CAAC,CAAD,CAHkB,EAItBA,IAAI,CAAC,CAAD,CAJkB,EAKtBA,IAAI,CAAC,CAAD,CALkB,EAMtBA,IAAI,CAAC,CAAD,CANkB,EAOtBA,IAAI,CAAC,CAAD,CAPkB,EAQtBA,IAAI,CAAC,CAAD,CARkB,EAStBA,IAAI,CAAC,CAAD,CATkB,EAUtBA,IAAI,CAAC,CAAD,CAVkB,EAWtBA,IAAI,CAAC,EAAD,CAXkB,EAYtBF,OAZsB,EAaxBK,IAbwB,CAanBC,GAAG,IAAI;IACVlD,OAAO,CAACmD,GAAR,CAAYD,GAAZ;EACH,CAfyB,CAA1B;EAiBA,OAAO;IAAEH,iBAAF;IAAqBH;EAArB,CAAP;AACH;;AAED,eAAeQ,YAAf,QAMG;EAAA,IANyB;IACxBvJ,KADwB;IAExBwJ,QAFwB;IAGxBjD,cAHwB;IAIxBC,gBAJwB;IAKxBY;EALwB,CAMzB;EACCjB,OAAO,CAACsD,IAAR,CAAc,YAAWlD,cAAe,iBAAgBC,gBAAiB,gBAAeY,eAAgB,EAAxG,EADD,CAGC;;EACA,MAAMO,cAAc,GAAGhJ,cAAc,CAAC6K,QAAD,CAArC;EACA,MAAME,OAAO,GAAG,MAAMC,aAAa,CAAC;IAAE3J,KAAF;IAASuG,cAAT;IAAyBoB;EAAzB,CAAD,CAAnC;EAEA,MAAMd,aAAa,GAAGP,iBAAiB,CAAC;IACpCtG,KADoC;IAEpCuG,cAFoC;IAGpCC,gBAAgB,EAAEA;EAHkB,CAAD,CAAvC;EAMA,MAAM;IAAES,GAAF;IAAOC;EAAP,IAAgBH,mBAAmB,CAAC/G,KAAD,EAAQ6G,aAAR,CAAzC;;EACA,MAAMlG,QAAQ,GAAGwG,YAAY,CAACnH,KAAD,EAAQoH,eAAR,CAA7B;;EAEA,OAAO,MAAM0B,YAAY,CAAC;IACtB7B,GADsB;IAEtBC,IAFsB;IAGtBX,cAHsB;IAItBoB,cAJsB;IAKtBhH;EALsB,CAAD,CAAzB;AAOH;;AAAA;;AAED,MAAMiJ,qBAAqB,GAAIC,aAAD,IAAmB;EAC7C,OAAO;IACHxK,IAAI,EAAEwK,aAAa,CAACxK,IADjB;IAEHyK,WAAW,EAAED,aAAa,CAACC,WAFxB;IAGH/D,IAAI,EAAE8D,aAAa,CAACE,kBAHjB;IAIHC,UAAU,EAAEH,aAAa,CAACI,WAJvB;IAKHzK,OAAO,EAAEqK,aAAa,CAACrK,OALpB;IAMH0K,WAAW,EAAEL,aAAa,CAACvK,MANxB;IAOH6K,mBAAmB,EAAE,CAACN,aAAa,CAACO,sBAPjC;IAQHC,oBAAoB,EAAE,CAACR,aAAa,CAACS,uBARlC;IASHC,0BAA0B,EAAE,CAACV,aAAa,CAACW,8BATxC;IAUHC,2BAA2B,EAAE,CAACZ,aAAa,CAACa,+BAVzC;IAWHC,sBAAsB,EAAE,CAACd,aAAa,CAACe,0BAXpC;IAYHC,uBAAuB,EAAE,CAAChB,aAAa,CAACiB,2BAZrC;IAaHrL,QAAQ,EAAEoK,aAAa,CAACnK,SAbrB;IAcHqL,YAAY,EAAElB,aAAa,CAACmB,aAdzB;IAeHC,QAAQ,EAAEpB,aAAa,CAACqB;EAfrB,CAAP;AAiBH,CAlBD;;AAoBA,OAAO,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;EAC9C,MAAMnL,WAAW,GAAG,IAAIC,IAAJ,CAAU,GAAEkL,UAAU,CAACjL,YAAa,GAApC,CAApB;EAEA,OAAO;IACHF,WADG;IAEHZ,IAAI,EAAE+L,UAAU,CAAC/L,IAFd;IAGHyK,WAAW,EAAEsB,UAAU,CAACtB,WAHrB;IAIHuB,IAAI,EAAED,UAAU,CAACC,IAJd;IAKHC,OAAO,EAAEF,UAAU,CAACE,OALjB;IAMHC,MAAM,EAAEH,UAAU,CAACG,MANhB;IAOHC,QAAQ,EAAEJ,UAAU,CAACI,QAPlB;IAQHC,gBAAgB,EAAEL,UAAU,CAACM,kBAR1B;IASHC,WAAW,EAAEP,UAAU,CAACQ,YATrB;IAUHC,aAAa,EAAE,CAACT,UAAU,CAACU,cAAX,IAA6B,EAA9B,EAAkClG,GAAlC,CAAsC1G,aAAtC,CAVZ;IAWHqL,0BAA0B,EAAE,CAACa,UAAU,CAACZ,8BAXrC;IAYHC,2BAA2B,EAAE,CAACW,UAAU,CAACV,+BAZtC;IAaHC,sBAAsB,EAAE,CAACS,UAAU,CAACR,0BAbjC;IAcHC,uBAAuB,EAAE,CAACO,UAAU,CAACN,2BAdlC;IAeHiB,aAAa,EAAEX,UAAU,CAACY,cAfvB;IAgBHvM,QAAQ,EAAE2L,UAAU,CAAC1L,SAhBlB;IAiBHuM,aAAa,EAAEb,UAAU,CAACc,eAjBvB;IAkBHC,KAAK,EAAEf,UAAU,CAACe,KAlBf;IAmBHC,UAAU,EAAEhB,UAAU,CAACiB,MAnBpB;IAoBHtB,YAAY,EAAEK,UAAU,CAACkB,YApBtB;IAqBHrB,QAAQ,EAAEG,UAAU,CAACmB;EArBlB,CAAP;AAuBH,CA1BM;;AA4BP,MAAMC,YAAY,GAAIC,IAAD,IAAU;EAC3B,OAAO;IAAEC,QAAQ,EAAED,IAAI,CAACC;EAAjB,CAAP;AACH,CAFD;;AAIA,MAAMC,eAAe,GAAIC,OAAD,IAAa;EACjC,OAAO;IACHpN,OAAO,EAAEoN,OAAO,CAACpN,OADd;IAEHqN,MAAM,EAAED,OAAO,CAACC,MAFb;IAGHC,aAAa,EAAEF,OAAO,CAACG,eAHpB;IAIHN,IAAI,EAAEG,OAAO,CAACH,IAAR,GAAeD,YAAY,CAACI,OAAO,CAACH,IAAT,CAA3B,GAA4C;EAJ/C,CAAP;AAMH,CAPD;;AASA,MAAMO,mBAAmB,GAAIC,WAAD,IAAiB;EACzC,OAAO;IACHC,WAAW,EAAEP,eAAe,CAACM,WAAW,CAACE,YAAb,CADzB;IAEHC,SAAS,EAAET,eAAe,CAACM,WAAW,CAACI,UAAb,CAFvB;IAGHpN,WAAW,EAAE,IAAIC,IAAJ,CAAU,GAAE+M,WAAW,CAAC9M,YAAa,GAArC,CAHV;IAIHmN,YAAY,EAAE,IAAIpN,IAAJ,CAAU,GAAE+M,WAAW,CAACM,aAAc,GAAtC,CAJX;IAKHC,eAAe,EAAEP,WAAW,CAACQ,gBAL1B;IAMHC,gBAAgB,EAAET,WAAW,CAACU,iBAN3B;IAOHC,WAAW,EAAEX,WAAW,CAACY,YAPtB;IAQHC,SAAS,EAAEb,WAAW,CAACc,UARpB;IASHC,SAAS,EAAE,IAAI9N,IAAJ,CAAU,GAAE+M,WAAW,CAACe,SAAU,GAAlC;EATR,CAAP;AAWH,CAZD;;AAcA,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;EACvC,OAAO;IACHC,SAAS,EAAED,UAAU,CAACE,UADnB;IAEHC,cAAc,EAAEH,UAAU,CAACI,eAFxB;IAGHC,WAAW,EAAEL,UAAU,CAACM,YAHrB;IAIHC,UAAU,EAAEP,UAAU,CAACQ,WAJpB;IAKHzB,WAAW,EAAEiB,UAAU,CAACjB,WAAX,GACTD,mBAAmB,CAACkB,UAAU,CAACjB,WAAZ,CADV,GAET,IAPD;IAQHjK,YAAY,EAAEkL,UAAU,CAACjL,aAAX,GACV/D,aAAa,CAACgP,UAAU,CAACjL,aAAZ,CADH,GAEV;EAVD,CAAP;AAYH,CAbD;;AAeA,MAAM0L,aAAa,GAAIlK,KAAD,IAAW;EAC7B,MAAMmK,UAAU,GAAGnK,KAAK,CAAC/E,SAAN,IAAmB+E,KAAK,CAAC/E,SAAN,CAAgBmP,QAAhB,CAAyB,MAAzB,CAAtC;EACA,MAAMC,KAAK,GAAGrK,KAAK,CAAC/E,SAAN,IAAmB+E,KAAK,CAAC/E,SAAN,CAAgBmP,QAAhB,CAAyB,MAAzB,CAAjC;EACA,MAAMzP,QAAQ,GAAG;IACb2P,OAAO,EAAEtK,KAAK,CAACuK,QAAN,CAAe/I,QAAf,EADI;IAEbgJ,YAAY,EAAExK,KAAK,CAACyK,cAAN,CAAqB1P,OAFtB;IAGbH,IAAI,EAAEoF,KAAK,CAACpF,IAHC;IAIbyK,WAAW,EAAErF,KAAK,CAACqF,WAJN;IAKbqF,KAAK,EAAE1K,KAAK,CAAC0K,KALA;IAMbtF,aAAa,EAAED,qBAAqB,CAACnF,KAAK,CAACyK,cAAP,CANvB;IAOb9D,UAAU,EAAED,kBAAkB,CAAC1G,KAAK,CAAC2G,UAAP,CAPjB;IAQbgE,MAAM,EAAE3K,KAAK,CAAC2K,MAAN,GAAe3K,KAAK,CAAC2K,MAAN,CAAaxJ,GAAb,CAAiB7F,aAAjB,CAAf,GAAiD,IAR5C;IASbsP,UAAU,EAAE5K,KAAK,CAAC6K,WAAN,GAAoB7K,KAAK,CAAC6K,WAAN,CAAkB1J,GAAlB,CAAsB7F,aAAtB,CAApB,GAA2D,IAT1D;IAUbwP,SAAS,EAAE9K,KAAK,CAAC+K,UAAN,GAAmB/K,KAAK,CAAC+K,UAAN,CAAiB5J,GAAjB,CAAqB7F,aAArB,CAAnB,GAAyD,IAVvD;IAYb0P,SAAS,EAAEhL,KAAK,CAACiL,UAZJ;IAab;IACAjQ,QAAQ,EACNmP,UAAU,IAAIE,KAAd,GACIrK,KAAK,CAAC/E,SADV,GAEI+E,KAAK,CAACkL,iBAAN,IAA2BlL,KAAK,CAAC/E,SAjB1B;IAkBbkQ,eAAe,EAAEnL,KAAK,CAACkL,iBAlBV;IAmBbE,gBAAgB,EAAEpL,KAAK,CAACqL,kBAnBX;IAoBbC,iBAAiB,EAAEtL,KAAK,CAACuL,mBApBZ;IAsBbjF,YAAY,EAAEtG,KAAK,CAACuG,aAtBP;IAuBbiF,WAAW,EAAExL,KAAK,CAACyL,SAvBN;IAwBb7D,MAAM,EAAE5H,KAAK,CAAC4H,MAxBD;IAyBb8D,QAAQ,EAAE1L,KAAK,CAAC2L,SAzBH;IA0BbC,QAAQ,EAAE5L,KAAK,CAAC6L,SAAN,GAAkBrC,kBAAkB,CAACxJ,KAAK,CAAC6L,SAAP,CAApC,GAAwD,IA1BrD;IA2BbC,eAAe,EAAE9L,KAAK,CAAC+L,gBAAN,GACZ,IAAG/L,KAAK,CAAC+L,gBAAiB,EADd,GAEb,IA7BS;IA+BbC,WAAW,EAAEhM,KAAK,CAACiM,YAAN,GAAqB,IAAIpT,SAAJ,CAAcmH,KAAK,CAACiM,YAApB,CAArB,GAAyD,IA/BzD;IAgCbC,uBAAuB,EAAElM,KAAK,CAACmM,0BAAN,GACrB1R,aAAa,CAACuF,KAAK,CAACmM,0BAAP,CADQ,GAErB;EAlCS,CAAjB,CAH6B,CAwC7B;;EACA,IAAIxR,QAAQ,CAACgQ,MAAT,IAAmB,CAAChQ,QAAQ,CAACiQ,UAAjC,EAA6C;IACzCjQ,QAAQ,CAACiQ,UAAT,GAAsBjQ,QAAQ,CAACgQ,MAAT,CAAgB/J,MAAhB,CAAwBwL,CAAD,IAAOA,CAAC,CAAC1O,IAAF,IAAU,CAAxC,CAAtB;EACH;;EAED,IAAI/C,QAAQ,CAACgQ,MAAT,IAAmB,CAAChQ,QAAQ,CAACmQ,SAAjC,EAA4C;IACxCnQ,QAAQ,CAACmQ,SAAT,GAAqBnQ,QAAQ,CAACgQ,MAAT,CAAgB/J,MAAhB,CAAwBwL,CAAD,IAAOA,CAAC,CAAC1O,IAAF,IAAU,CAAxC,CAArB;EACH;;EAED,OAAO/C,QAAP;AACH,CAlDD;AAoDA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe0R,QAAf,QAAmD;EAAA,IAA3B;IAAE7B,YAAF;IAAgBF;EAAhB,CAA2B;EAC/C,MAAM;IAAEgC;EAAF,IAAW,MAAMxT,KAAK,CAAE,GAAEC,WAAY,SAAQyR,YAAa,IAAGF,OAAO,IAAI,CAAE,GAArD,CAA5B;EACA,OAAOJ,aAAa,CAACoC,IAAD,CAApB;AACH;;AAED,eAAepH,aAAf,QAAwE;EAAA,IAA3C;IAAE3J,KAAF;IAASuG,cAAT;IAAyBoB;EAAzB,CAA2C;EACpE;EACA,MAAMqJ,SAAS,GAAG,MAAMrJ,cAAc,CAAC1C,SAAf,CAAyBgM,cAAzB,CACpB,CACIjR,KAAK,CAACa,QADV,EAEIb,KAAK,CAACe,KAFV,EAGIf,KAAK,CAACiB,KAHV,EAIIjB,KAAK,CAACkC,YAJV,EAKIlC,KAAK,CAACsC,MALV,EAMItC,KAAK,CAAC4C,YANV,EAOI5C,KAAK,CAACgD,YAPV,CADoB,EAUpB,CACI,MAAM8E,OAAN,EADJ,EAEI,IAAIA,OAAJ,EAFJ,EAGI9H,KAAK,CAACsB,gBAHV,EAIItB,KAAK,CAACwB,gBAJV,EAKI,IAAIsG,OAAJ,EALJ,EAMI,IAAIA,OAAJ,EANJ,EAOI9H,KAAK,CAAC6D,WAPV,EAQI7D,KAAK,CAAC+D,cARV,EASI/D,KAAK,CAACiE,IATV,CAVoB,EAqBpBjE,KAAK,CAAC+B,SArBc,EAsBpB/B,KAAK,CAACmC,IAtBc,EAuBpBnC,KAAK,CAACoC,QAvBc,EAwBpBpC,KAAK,CAACuC,SAxBc,EAyBpBvC,KAAK,CAACyC,QAzBc,EA0BpBzC,KAAK,CAAC0C,kBA1Bc,EA2BpB1C,KAAK,CAAC8C,eA3Bc,EA4BpB9C,KAAK,CAACkE,CA5Bc,EA6BpBlE,KAAK,CAACoE,CA7Bc,EA8BpBpE,KAAK,CAACqE,CA9Bc,CAAxB;;EAiCA,IAAI,CAAC2M,SAAL,EAAgB;IACZ;IACA,MAAM;MACFE,OAAO,EAAE,IAAIxL,KAAJ,CAAW,kFAAX,CADP;MAEFyL,IAAI,EAAE;IAFJ,CAAN,CAFY,CAMZ;EACH;;EAED,OAAOH,SAAP;AACH;;AAAA;;AAED,eAAeI,SAAf,CAAyBpR,KAAzB,EAA6C;EAAA,IAAbqR,OAAa,uEAAH,CAAG;;EACzC,IAAI;IACA,MAAM;MAAEN;IAAF,IAAW,MAAMxT,KAAK,CAAC+T,IAAN,CAClB,+CADkB,EAEnBtR,KAFmB,EAGnB;MAAEuR,OAAO,EAAE;QAAE,aAAa9T;MAAf;IAAX,CAHmB,CAAvB;IAMA,OAAOsT,IAAP;EACH,CARD,CAQE,OAAO3K,KAAP,EAAc;IACZ,MAAM,IAAIV,KAAJ,CAAUU,KAAV,CAAN;EACH;;EAAA;AACJ;;AAAA;AAED;AACA;AACA;AACA;;AACA,MAAMoL,gBAAgB,GAAIxR,KAAD,IAAW;EAChC,MAAMyR,MAAM,GAAG;IACX5Q,QAAQ,EAAEb,KAAK,CAACa,QAAN,CAAe4F,WAAf,EADC;IAEX1F,KAAK,EAAE;MAAEvB,OAAO,EAAEQ,KAAK,CAACe,KAAN,CAAY0F,WAAZ;IAAX,CAFI;IAGXxF,KAAK,EAAE;MAAEzB,OAAO,EAAEQ,KAAK,CAACiB,KAAN,CAAYwF,WAAZ;IAAX,CAHI;IAIXtF,iBAAiB,EAAEnB,KAAK,CAACkB,eAAN,CAAsB+E,QAAtB,EAJR;IAKX5E,iBAAiB,EAAErB,KAAK,CAACoB,eAAN,CAAsB6E,QAAtB,EALR;IAMX1E,kBAAkB,EAAEvB,KAAK,CAACsB,gBAAN,CAAuB2E,QAAvB,EANT;IAOXxE,kBAAkB,EAAEzB,KAAK,CAACwB,gBAAN,CAAuByE,QAAvB,EAPT;IAQXvE,gBAAgB,EAAE1B,KAAK,CAAC0B,gBAAN,CAAuBuE,QAAvB,EARP;IASXjE,UAAU,EAAEhC,KAAK,CAAC+B,SATP;IAUXF,aAAa,EAAE;MAAErC,OAAO,EAAEQ,KAAK,CAACkC,YAAN,CAAmBuE,WAAnB;IAAX,CAVJ;IAWXtE,IAAI,EAAEnC,KAAK,CAACmC,IAXD;IAYXE,SAAS,EAAErC,KAAK,CAACoC,QAZN;IAaXE,MAAM,EAAEtC,KAAK,CAACsC,MAAN,CAAamE,WAAb,EAbG;IAcXjE,WAAW,EAAExC,KAAK,CAACuC,SAdR;IAeXE,QAAQ,EAAEzC,KAAK,CAACyC,QAfL;IAgBXE,mBAAmB,EAAE3C,KAAK,CAAC0C,kBAhBhB;IAiBXG,aAAa,EAAE7C,KAAK,CAAC4C,YAAN,CAAmB6D,WAAnB,EAjBJ;IAkBX1D,gBAAgB,EAAE/C,KAAK,CAAC8C,eAlBb;IAmBXG,aAAa,EAAEjD,KAAK,CAACgD,YAAN,CAAmByD,WAAnB,EAnBJ;IAoBX7F,QAAQ,EAAEZ,KAAK,CAACY,QAAN,CAAeqF,QAAf,EApBC;IAqBX9C,UAAU,EAAEnD,KAAK,CAACkD,SAAN,CAAgB+C,QAAhB,EArBD;IAsBXyL,0BAA0B,EAAE1R,KAAK,CAAC0R,0BAAN,GACxB1R,KAAK,CAAC0R,0BAAN,CAAiCzL,QAAjC,EADwB,GAExBzB,SAxBO;IAyBXpB,KAAK,EAAEpD,KAAK,CAACoD,KAAN,CAAY6C,QAAZ,EAzBI;IA0BXxC,WAAW,EAAEzD,KAAK,CAACyD,WAAN,GAAoBzD,KAAK,CAACyD,WAAN,CAAkBwC,QAAlB,EAApB,GAAmDzB,SA1BrD;IA2BXV,YAAY,EAAE9D,KAAK,CAAC6D,WAAN,CAAkBoC,QAAlB,EA3BH;IA4BXjC,eAAe,EAAEhE,KAAK,CAAC+D,cAAN,CAAqBkC,QAArB,EA5BN;IA6BXhC,IAAI,EAAEjE,KAAK,CAACiE,IAAN,CAAWgC,QAAX,EA7BK;IA8BXtF,QAAQ,EAAEX,KAAK,CAACW,QA9BL;IA+BXuD,CAAC,EAAElE,KAAK,CAACkE,CA/BE;IAgCXE,CAAC,EAAEpE,KAAK,CAACoE,CAhCE;IAiCXC,CAAC,EAAErE,KAAK,CAACqE,CAjCE;IAkCXsN,aAAa,EAAE3R,KAAK,CAACI;EAlCV,CAAf;EAqCA,OAAOqR,MAAP;AACH,CAvCD;;AAyCA,SAASlI,YAAT,EAAuB3K,WAAvB,EAAoCC,WAApC,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}