{"ast":null,"code":"// Wyvern\nimport WyvernProtocol from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\"; // Ethereum\n\nimport * as ethABI from \"ethereumjs-abi\";\nimport * as ethUtil from \"ethereumjs-util\";\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\"; // Other\n\nimport axios from \"axios\";\nimport * as _ from \"lodash\"; // Constants\n\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { MIN_EXPIRATION_SECONDS, ORDER_MATCHING_LATENCY_SECONDS, OPENSEA_FEE_RECIPIENT, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport mainnetWyvernConfigByNetwork from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\"; // Contracts\n\nimport { WyvernContract, WYVERN_CONTRACT } from \"./contracts\"; // FUNCTIONS\n\nconst tokenFromJSON = token => {\n  const fromJSON = {\n    name: token.name,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    address: token.address,\n    imageUrl: token.image_url,\n    ethPrice: token.eth_price,\n    usdPrice: token.usd_price\n  };\n  return fromJSON;\n};\n\nexport const merkleValidatorByNetwork = {\n  main: MERKLE_VALIDATOR_MAINNET\n};\nexport const orderFromJSON = order => {\n  const createdDate = new Date(`${order.created_date}Z`);\n  const fromJSON = {\n    hash: order.order_hash || order.hash,\n    cancelledOrFinalized: order.cancelled || order.finalized,\n    markedInvalid: order.marked_invalid,\n    metadata: order.metadata,\n    quantity: new BigNumber(order.quantity || 1),\n    exchange: order.exchange,\n    makerAccount: order.maker,\n    takerAccount: order.taker,\n    // Use string address to conform to Wyvern Order schema\n    maker: order.maker.address,\n    taker: order.taker.address,\n    makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n    takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n    makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n    takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n    makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n    waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n    feeMethod: order.fee_method,\n    feeRecipientAccount: order.fee_recipient,\n    feeRecipient: order.fee_recipient.address,\n    side: order.side,\n    saleKind: order.sale_kind,\n    target: order.target,\n    howToCall: order.how_to_call,\n    calldata: order.calldata,\n    replacementPattern: order.replacement_pattern,\n    staticTarget: order.static_target,\n    staticExtradata: order.static_extradata,\n    paymentToken: order.payment_token,\n    basePrice: new BigNumber(order.base_price),\n    extra: new BigNumber(order.extra),\n    currentBounty: new BigNumber(order.current_bounty || 0),\n    currentPrice: new BigNumber(order.current_price || 0),\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(order.listing_time),\n    expirationTime: new BigNumber(order.expiration_time),\n    salt: new BigNumber(order.salt),\n    v: parseInt(order.v),\n    r: order.r,\n    s: order.s,\n    paymentTokenContract: order.payment_token_contract ? tokenFromJSON(order.payment_token_contract) : undefined,\n    asset: order.asset,\n    assetBundle: order.asset_bundle\n  }; // Use client-side price calc, to account for buyer fee (not added by server) and latency\n\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\nexport const orderFromGolomJSON = order => {\n  const createdDate = new Date(`${order.created}`);\n  const orderData = order.data;\n  const metadata = {\n    asset: {\n      address: order.contract_address,\n      id: order.token_id\n    },\n    schema: \"ERC721\" // currently supporting erc721 only\n\n  };\n  const fromJSON = {\n    hash: order.hex,\n    cancelledOrFinalized: false,\n    markedInvalid: order.valid,\n    metadata,\n    quantity: new BigNumber(1),\n    exchange: orderData.exchange,\n    // Use string address to conform to Wyvern Order schema\n    maker: orderData.maker,\n    taker: orderData.taker,\n    makerRelayerFee: new BigNumber(orderData.makerRelayerFee),\n    takerRelayerFee: new BigNumber(orderData.takerRelayerFee),\n    makerProtocolFee: new BigNumber(orderData.makerProtocolFee),\n    takerProtocolFee: new BigNumber(orderData.takerProtocolFee),\n    makerReferrerFee: new BigNumber(0),\n    // need to explore this field more\n    waitingForBestCounterOrder: orderData.feeRecipient == WyvernProtocol.NULL_ADDRESS,\n    feeMethod: orderData.feeMethod,\n    feeRecipient: orderData.feeRecipient,\n    side: orderData.side,\n    saleKind: orderData.saleKind,\n    target: orderData.target,\n    howToCall: orderData.howToCall,\n    calldata: orderData.calldata,\n    replacementPattern: orderData.replacementPattern,\n    staticTarget: orderData.staticTarget,\n    staticExtradata: orderData.staticExtradata,\n    paymentToken: orderData.paymentToken,\n    basePrice: new BigNumber(orderData.basePrice),\n    extra: new BigNumber(orderData.extra),\n    currentBounty: new BigNumber(0),\n    currentPrice: new BigNumber(0),\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(orderData.listingTime),\n    expirationTime: new BigNumber(orderData.expirationTime),\n    salt: new BigNumber(orderData.salt),\n    v: parseInt(orderData.v),\n    r: orderData.r,\n    s: orderData.s,\n    asset: order.asset\n  }; // Use client-side price calc, to account for buyer fee (not added by server) and latency\n\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\n\nconst _getTimeParameters = function (expirationTimestamp, listingTimestamp) {\n  let waitingForBestCounterOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // Validation\n  const minExpirationTimestamp = Math.round(Date.now() / 1000 + MIN_EXPIRATION_SECONDS);\n  const minListingTimestamp = Math.round(Date.now() / 1000);\n\n  if (expirationTimestamp != 0 && expirationTimestamp < minExpirationTimestamp) {\n    throw new Error(`Expiration time must be at least ${MIN_EXPIRATION_SECONDS} seconds from now, or zero (non-expiring).`);\n  }\n\n  if (listingTimestamp && listingTimestamp < minListingTimestamp) {\n    throw new Error(\"Listing time cannot be in the past.\");\n  }\n\n  if (listingTimestamp && expirationTimestamp != 0 && listingTimestamp >= expirationTimestamp) {\n    throw new Error(\"Listing time must be before the expiration time.\");\n  }\n\n  if (waitingForBestCounterOrder && expirationTimestamp == 0) {\n    throw new Error(\"English auctions must have an expiration time.\");\n  }\n\n  if (waitingForBestCounterOrder && listingTimestamp) {\n    throw new Error(`Cannot schedule an English auction for the future.`);\n  }\n\n  if (parseInt(expirationTimestamp.toString()) != expirationTimestamp) {\n    throw new Error(`Expiration timestamp must be a whole number of seconds`);\n  }\n\n  if (waitingForBestCounterOrder) {\n    listingTimestamp = expirationTimestamp; // Expire one week from now, to ensure server can match it\n    // Later, this will expire closer to the listingTime\n\n    expirationTimestamp = expirationTimestamp + ORDER_MATCHING_LATENCY_SECONDS;\n  } else {\n    // Small offset to account for latency\n    listingTimestamp = listingTimestamp || Math.round(Date.now() / 1000 - 100);\n  }\n\n  return {\n    listingTime: BigNumber(listingTimestamp),\n    expirationTime: BigNumber(expirationTimestamp)\n  };\n};\n\nexport const encodeCall = (abi, parameters) => {\n  const inputTypes = abi.inputs.map(i => i.type);\n  let id = ethABI.methodID(abi.name, inputTypes);\n  let encode = ethABI.rawEncode(inputTypes.slice(0, 3), parameters.slice(0, 3));\n  return \"0x\" + Buffer.concat([id, encode]).toString(\"hex\");\n};\n\nconst encodeDefaultCall = (abi, address) => {\n  const parameters = abi.inputs.map(input => {\n    switch (input.kind) {\n      case \"replaceable\":\n        return WyvernProtocol.generateDefaultValue(input.type);\n\n      case \"owner\":\n        return address;\n\n      case \"asset\":\n      default:\n        return input.value;\n    }\n  });\n  return encodeCall(abi, parameters);\n};\n\nconst encodeSell = (schema, asset, address, validatorAddress) => {\n  const transfer = validatorAddress && schema.functions.checkAndTransfer ? schema.functions.checkAndTransfer(asset, validatorAddress) : schema.functions.transfer(asset); //   const transfer = schema.functions.transfer(asset);\n\n  let defaultCall = encodeDefaultCall(transfer, address);\n  let pattern = WyvernProtocol.encodeReplacementPattern(transfer);\n  return {\n    target: transfer.target,\n    calldata: defaultCall,\n    replacementPattern: pattern\n  };\n};\n\nconst encodeBuy = (schema, asset, address, validatorAddress) => {\n  //   const transfer = schema.functions.transfer(asset);\n  const transfer = validatorAddress && schema.functions.checkAndTransfer ? schema.functions.checkAndTransfer(asset, validatorAddress) : schema.functions.transfer(asset);\n  const replaceables = transfer.inputs.filter(i => i.kind === \"replaceable\");\n  const ownerInputs = transfer.inputs.filter(i => i.kind === \"owner\"); // Validate\n\n  if (replaceables.length !== 1) {\n    throw new Error(\"Only 1 input can match transfer destination, but instead \" + replaceables.length + \" did\");\n  } // Compute calldata\n\n\n  const parameters = transfer.inputs.map(input => {\n    switch (input.kind) {\n      case \"replaceable\":\n        return address;\n\n      case \"owner\":\n        return WyvernProtocol.generateDefaultValue(input.type);\n\n      default:\n        try {\n          return input.value.toString();\n        } catch (e) {\n          console.error(schema);\n          console.error(asset);\n          throw e;\n        }\n\n    }\n  });\n  const calldata = encodeCall(transfer, parameters); // Compute replacement pattern\n\n  let replacementPattern = \"0x\";\n\n  if (ownerInputs.length > 0) {\n    replacementPattern = WyvernProtocol.encodeReplacementPattern(transfer, \"owner\");\n  }\n\n  return {\n    target: transfer.target,\n    calldata,\n    replacementPattern\n  };\n}; // \"metadata\": {\n//     \"asset\": {\n//         \"id\": \"5934\",\n//         \"address\": \"0x66fca7555cd481545a5e66ba9a2bec1e256f98e7\"\n//     },\n//     \"schema\": \"ERC721\"\n// },\n\n\nfunction getOrderHash(order) {\n  const orderWithStringTypes = { ...order,\n    maker: order.maker.toLowerCase(),\n    taker: order.taker.toLowerCase(),\n    feeRecipient: order.feeRecipient.toLowerCase(),\n    side: order.side.toString(),\n    saleKind: order.saleKind.toString(),\n    howToCall: order.howToCall.toString(),\n    feeMethod: order.feeMethod.toString(),\n    makerRelayerFee: 250.0.toFixed(),\n    takerRelayerFee: 0.0.toFixed(),\n    basePrice: 0.0.toFixed(),\n    extra: 0.0.toFixed()\n  };\n  return WyvernProtocol.getOrderHashHex(orderWithStringTypes);\n}\n\nfunction makeMatchingOrder(_ref) {\n  let {\n    order,\n    accountAddress,\n    recipientAddress,\n    platform\n  } = _ref;\n  accountAddress = accountAddress.toLowerCase();\n  recipientAddress = recipientAddress.toLowerCase();\n\n  const computeOrderParams = () => {\n    const shouldValidate = order.target === merkleValidatorByNetwork.main;\n\n    if (\"asset\" in order.metadata) {\n      const schema = ERC721Schema; // currently supporting ERC721 only\n\n      return order.side == 0 ? encodeSell(schema, order.metadata.asset, recipientAddress, shouldValidate ? order.target : undefined) : encodeBuy(schema, order.metadata.asset, recipientAddress, shouldValidate ? order.target : undefined);\n    } else {\n      throw new Error(\"Invalid order metadata\");\n    }\n  };\n\n  const {\n    target,\n    calldata,\n    replacementPattern\n  } = computeOrderParams();\n\n  const times = _getTimeParameters(0); // Compat for matching buy orders that have fee recipient still on them\n\n\n  const feeRecipient = order.feeRecipient == WyvernProtocol.NULL_ADDRESS ? platform == PlatformType.Opensea ? OPENSEA_FEE_RECIPIENT : GOLOM_FEE_RECIPIENT : WyvernProtocol.NULL_ADDRESS;\n  const matchingOrder = {\n    exchange: order.exchange,\n    maker: accountAddress,\n    taker: order.maker,\n    quantity: order.quantity,\n    makerRelayerFee: order.makerRelayerFee,\n    takerRelayerFee: order.takerRelayerFee,\n    makerProtocolFee: order.makerProtocolFee,\n    takerProtocolFee: order.takerProtocolFee,\n    makerReferrerFee: order.makerReferrerFee,\n    waitingForBestCounterOrder: false,\n    feeMethod: order.feeMethod,\n    feeRecipient,\n    side: (order.side + 1) % 2,\n    saleKind: 0,\n    // 0 fixed price 1 ducch aucion\n    target,\n    howToCall: order.howToCall,\n    calldata,\n    replacementPattern,\n    staticTarget: WyvernProtocol.NULL_ADDRESS,\n    staticExtradata: \"0x\",\n    paymentToken: order.paymentToken,\n    basePrice: order.basePrice,\n    extra: BigNumber(0),\n    listingTime: times.listingTime,\n    expirationTime: times.expirationTime,\n    salt: WyvernProtocol.generatePseudoRandomSalt(),\n    metadata: order.metadata\n  };\n  return matchingOrder;\n}\n\nfunction assignOrdersToSides(order, matchingOrder) {\n  const isSellOrder = order.side == 1;\n  let buy;\n  let sell;\n\n  if (!isSellOrder) {\n    buy = order;\n    sell = { ...matchingOrder,\n      v: buy.v,\n      r: buy.r,\n      s: buy.s\n    };\n  } else {\n    sell = order;\n    buy = { ...matchingOrder,\n      v: sell.v,\n      r: sell.r,\n      s: sell.s\n    };\n  }\n\n  return {\n    buy,\n    sell\n  };\n}\n\nconst _getMetadata = (order, referrerAddress) => {\n  const referrer = referrerAddress || order.metadata.referrerAddress;\n\n  if (referrer && isValidAddress(referrer)) {\n    return `0x000000000000000000000000${referrer.substr(2)}`;\n  }\n\n  return undefined;\n};\n\nconst _correctGasAmount = estimation => {\n  return Math.ceil(estimation * 1.01);\n};\n\nfunction _getWyvernProtocolForOrder(order, useReadOnly) {\n  if (order.exchange === wyvern2_2ConfigByNetwork.main.wyvernExchangeContractAddress) {\n    return useReadOnly ? this._wyvern2_2ProtocolReadOnly : this._wyvern2_2Protocol;\n  }\n\n  return useReadOnly ? this._wyvernProtocolReadOnly : this._wyvernProtocol;\n}\n/**\n * Gets the price for the order using the contract\n * @param order The order to calculate the price for\n */\n\n\nasync function getCurrentPrice(order, wyvernExchange) {\n  const currentPrice = await wyvernExchange.methods.calculateCurrentPrice_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee.toFixed(), order.takerRelayerFee.toFixed(), order.makerProtocolFee.toFixed(), order.takerProtocolFee.toFixed(), order.basePrice.toFixed(), order.extra.toFixed(), order.listingTime.toFixed(), order.expirationTime.toFixed(), order.salt.toFixed()], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata).call();\n  return currentPrice;\n}\n/**\n * Estimates the price of an order\n * @param order The order to estimate price on\n * @param secondsToBacktrack The number of seconds to subtract on current time,\n *  to fix race conditions\n * @param shouldRoundUp Whether to round up fractional wei\n */\n\n\nexport function estimateCurrentPrice(order) {\n  let secondsToBacktrack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n  let shouldRoundUp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // round up should be enabled\n  let {\n    basePrice,\n    listingTime,\n    expirationTime,\n    extra\n  } = order;\n  const {\n    side,\n    takerRelayerFee,\n    saleKind\n  } = order;\n  const now = new BigNumber(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);\n  basePrice = new BigNumber(basePrice);\n  listingTime = new BigNumber(listingTime);\n  expirationTime = new BigNumber(expirationTime);\n  extra = new BigNumber(extra);\n  let exactPrice = basePrice; // saleKind 0 : Fixed price 1: Duction acution\n\n  if (saleKind === 0) {// Do nothing, price is correct\n  } else if (saleKind === 1) {\n    const diff = extra.times(now.minus(listingTime)).dividedBy(expirationTime.minus(listingTime)); // side 0 : buy 1: sell\n\n    exactPrice = side == 1 ?\n    /* Sell-side - start price: basePrice. End price: basePrice - extra. */\n    basePrice.minus(diff) :\n    /* Buy-side - start price: basePrice. End price: basePrice + extra. */\n    basePrice.plus(diff);\n  } // Add taker fee only for buyers\n\n\n  if (side === 1 && !order.waitingForBestCounterOrder) {\n    // Buyer fee increases sale price\n    exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1);\n  }\n\n  return shouldRoundUp ? exactPrice.ceil() : exactPrice;\n}\n\nasync function _getRequiredAmountForTakingSellOrder(sell, wyvernExchange) {\n  const currentPrice = await getCurrentPrice(sell, wyvernExchange);\n  const estimatedPrice = estimateCurrentPrice(sell);\n  const maxPrice = BigNumber.max(currentPrice, estimatedPrice); // TODO Why is this not always a big number?\n\n  sell.takerRelayerFee = BigNumber(sell.takerRelayerFee);\n  const feePercentage = sell.takerRelayerFee.div(INVERSE_BASIS_POINT);\n  const fee = feePercentage.times(maxPrice);\n  return fee.plus(maxPrice); // use .ceil()\n}\n\nasync function _atomicMatch(_ref2) {\n  let {\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata = NULL_BLOCK_HASH\n  } = _ref2;\n  let value;\n\n  if (buy.paymentToken == WyvernProtocol.NULL_ADDRESS) {\n    value = await _getRequiredAmountForTakingSellOrder(sell, wyvernExchange);\n  }\n\n  const txnData = {\n    from: accountAddress,\n    value\n  };\n  const args = [[buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target, buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken], [250.0.toString(), 0.0.toString(), buy.makerProtocolFee.toString(), buy.takerProtocolFee.toString(), 0.0.toString(), buy.extra.toString(), buy.listingTime.toString(), buy.expirationTime.toString(), buy.salt.toString(), 250.0.toString(), 0.0.toString(), sell.makerProtocolFee.toString(), sell.takerProtocolFee.toString(), 0.0.toString(), 0.0.toString(), sell.listingTime.toString(), sell.expirationTime.toString(), sell.salt.toString()], [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall], buy.calldata, sell.calldata, buy.replacementPattern, sell.replacementPattern, buy.staticExtradata, sell.staticExtradata, [buy.v || 0, sell.v || 0], [buy.r || NULL_BLOCK_HASH, buy.s || NULL_BLOCK_HASH, sell.r || NULL_BLOCK_HASH, sell.s || NULL_BLOCK_HASH, metadata]]; // const gasEstimate = await wyvernExchange.functions.estimateGasAsync(txnData);\n  // txnData.gas = _correctGasAmount(gasEstimate);\n\n  console.log(wyvernExchange);\n  const atomicMatchMethod = wyvernExchange.functions.atomicMatch_(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], txnData).then(res => {\n    console.log(res);\n  });\n  return {\n    atomicMatchMethod,\n    txnData\n  };\n}\n\nconst jsonToOrder = golomOrder => {\n  // console.log(order, golomOrder);\n  const {\n    data,\n    tokenId,\n    contractAddress,\n    created\n  } = golomOrder;\n  const createdDate = new Date(`${created}`);\n  const metadata = {\n    asset: {\n      id: String(tokenId),\n      address: contractAddress\n    },\n    schema: \"ERC721\"\n  };\n  const fromJSON = { ...data,\n    metadata,\n    quantity: new BigNumber(1),\n    makerRelayerFee: new BigNumber(data.makerRelayerFee),\n    takerRelayerFee: new BigNumber(data.takerRelayerFee),\n    makerProtocolFee: new BigNumber(data.makerProtocolFee),\n    takerProtocolFee: new BigNumber(data.takerProtocolFee),\n    makerReferrerFee: new BigNumber(data.makerReferrerFee),\n    waitingForBestCounterOrder: data.feeRecipient == WyvernProtocol.NULL_ADDRESS,\n    basePrice: new BigNumber(data.basePrice),\n    extra: new BigNumber(data.extra),\n    currentBounty: new BigNumber(0),\n    currentPrice: new BigNumber(0),\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(data.listingTime),\n    expirationTime: new BigNumber(data.expirationTime),\n    salt: new BigNumber(data.salt),\n    v: parseInt(data.v),\n    paymentTokenContract: data.payment_token_contract ? tokenFromJSON(data.payment_token_contract) : undefined\n  }; // Use client-side price calc, to account for buyer fee (not added by server) and latency\n\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\n\nasync function fulfillOrder(_ref3) {\n  let {\n    order,\n    provider,\n    accountAddress,\n    recipientAddress,\n    referrerAddress,\n    platform = PlatformType.Opensea\n  } = _ref3;\n  console.info(`Account: ${accountAddress} | Recipient: ${recipientAddress} | Referrer: ${referrerAddress}`); // check if valid order\n  // order = jsonToOrder(order);\n\n  const wyvernExchange = WyvernContract(provider);\n  const isValid = await validateOrder({\n    order,\n    accountAddress,\n    wyvernExchange\n  });\n  const matchingOrder = makeMatchingOrder({\n    order,\n    accountAddress,\n    recipientAddress: recipientAddress,\n    platform\n  });\n  const {\n    buy,\n    sell\n  } = assignOrdersToSides(order, matchingOrder);\n\n  const metadata = _getMetadata(order, referrerAddress);\n\n  return await _atomicMatch({\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata\n  });\n}\n\nfunction getWyvernAsset(schema, asset) {\n  let quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new BigNumber(1);\n  const tokenId = asset.tokenId != null ? asset.tokenId.toString() : undefined;\n  return schema.assetFromFields({\n    ID: tokenId,\n    Quantity: quantity.toString(),\n    Address: asset.tokenAddress.toLowerCase(),\n    Name: asset.name\n  });\n}\n\nasync function computeFees(_ref4) {\n  let {\n    asset,\n    side,\n    accountAddress,\n    platform,\n    extraBountyBasisPoints = 0\n  } = _ref4;\n  let openseaBuyerFeeBasisPoints = DEFAULT_BUYER_FEE_BASIS_POINTS;\n  let openseaSellerFeeBasisPoints = DEFAULT_SELLER_FEE_BASIS_POINTS;\n  let devBuyerFeeBasisPoints = 0;\n  let devSellerFeeBasisPoints = 0;\n  let transferFee = new BigNumber(0);\n  let transferFeeTokenAddress = null;\n  let maxTotalBountyBPS = DEFAULT_MAX_BOUNTY;\n\n  if (asset && platform == PlatformType.Opensea) {\n    openseaBuyerFeeBasisPoints = +asset.openseaBuyerFeeBasisPoints;\n    openseaSellerFeeBasisPoints = +asset.openseaSellerFeeBasisPoints;\n    devBuyerFeeBasisPoints = +asset.devBuyerFeeBasisPoints;\n    devSellerFeeBasisPoints = +asset.devSellerFeeBasisPoints;\n    maxTotalBountyBPS = openseaSellerFeeBasisPoints;\n  } // Compute transferFrom fees\n\n\n  if (side == 1 && asset && platform == PlatformType.Opensea) {// Server-side knowledge\n    // transferFee = asset.transferFee ? new BigNumber(asset.transferFee) : transferFee;\n    // transferFeeTokenAddress = asset.transferFeePaymentToken\n    //   ? asset.transferFeePaymentToken.address\n    //   : transferFeeTokenAddress;\n  } // Compute bounty\n\n\n  const sellerBountyBasisPoints = side == 1 ? extraBountyBasisPoints : 0; // Check that bounty is in range of the opensea fee\n\n  const bountyTooLarge = sellerBountyBasisPoints + OPENSEA_SELLER_BOUNTY_BASIS_POINTS > maxTotalBountyBPS;\n\n  if (sellerBountyBasisPoints > 0 && bountyTooLarge) {\n    let errorMessage = `Total bounty exceeds the maximum for this asset type (${maxTotalBountyBPS / 100}%).`;\n\n    if (maxTotalBountyBPS >= OPENSEA_SELLER_BOUNTY_BASIS_POINTS) {\n      errorMessage += ` Remember that OpenSea will add ${OPENSEA_SELLER_BOUNTY_BASIS_POINTS / 100}% for referrers with OpenSea accounts!`;\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  return {\n    totalBuyerFeeBasisPoints: openseaBuyerFeeBasisPoints + devBuyerFeeBasisPoints,\n    totalSellerFeeBasisPoints: openseaSellerFeeBasisPoints + devSellerFeeBasisPoints,\n    openseaBuyerFeeBasisPoints,\n    openseaSellerFeeBasisPoints,\n    devBuyerFeeBasisPoints,\n    devSellerFeeBasisPoints,\n    sellerBountyBasisPoints,\n    transferFee,\n    transferFeeTokenAddress\n  };\n}\n/**\n * Compute the `basePrice` and `extra` parameters to be used to price an order.\n * Also validates the expiration time and auction type.\n * @param tokenAddress Address of the ERC-20 token to use for trading.\n * Use the null address for ETH\n * @param expirationTime When the auction expires, or 0 if never.\n * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)\n * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei). If unspecified, the order's `extra` attribute will be 0\n */\n\n\nasync function _getPriceParameters(orderSide, tokenAddress, expirationTime, startAmount, endAmount) {\n  let waitingForBestCounterOrder = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let englishAuctionReservePrice = arguments.length > 6 ? arguments[6] : undefined;\n  const priceDiff = endAmount != null ? startAmount - endAmount : 0;\n  const paymentToken = tokenAddress.toLowerCase(); // const isEther = tokenAddress == WyvernProtocol.NULL_ADDRESS;\n  // const { tokens } = await this.api.getPaymentTokens({ address: paymentToken });\n  // const token = tokens[0];\n  // Note: WyvernProtocol.toBaseUnitAmount(makeBigNumber(startAmount), token.decimals)\n  // will fail if too many decimal places, so special-case ether\n  // const basePrice = isEther\n  //   ? new BigNumber(parseEther(startAmount)).round()\n  //   : WyvernProtocol.toBaseUnitAmount(new BigNumber(startAmount), token.decimals);\n\n  const basePrice = new BigNumber(parseEther(String(startAmount))); // const extra = isEther\n  //   ? new BigNumber(parseEther(priceDiff)).decimalPlaces()\n  //   : WyvernProtocol.toBaseUnitAmount(new BigNumber(priceDiff), token.decimals);\n  // console.log(basePrice, priceDiff);\n\n  const extra = new BigNumber(parseEther(String(priceDiff))); // const reservePrice = englishAuctionReservePrice\n  //   ? isEther\n  //     ? new BigNumber(parseEther(englishAuctionReservePrice))\n  //     : WyvernProtocol.toBaseUnitAmount(new BigNumber(englishAuctionReservePrice), token.decimals)\n  //   : undefined;\n\n  const reservePrice = englishAuctionReservePrice ? new BigNumber(parseEther(englishAuctionReservePrice)) : undefined;\n  return {\n    basePrice,\n    extra,\n    paymentToken,\n    reservePrice\n  };\n}\n\nfunction _validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints) {\n  const maxFeePercent = INVERSE_BASIS_POINT / 100;\n\n  if (totalBuyerFeeBasisPoints > INVERSE_BASIS_POINT || totalSellerFeeBasisPoints > INVERSE_BASIS_POINT) {\n    throw new Error(`Invalid buyer/seller fees: must be less than ${maxFeePercent}%`);\n  }\n\n  if (totalBuyerFeeBasisPoints < 0 || totalSellerFeeBasisPoints < 0) {\n    throw new Error(`Invalid buyer/seller fees: must be at least 0%`);\n  }\n}\n\nfunction _getSellFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, waitForHighestBid) {\n  let sellerBountyBasisPoints = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let platform = arguments.length > 4 ? arguments[4] : undefined;\n\n  // just making basic check if fee is less than 100% and not negative\n  _validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints); // Use buyer as the maker when it's an English auction, so Wyvern sets prices correctly\n\n\n  const feeRecipient = waitForHighestBid ? WyvernProtocol.NULL_ADDRESS : OPENSEA_FEE_RECIPIENT; // Swap maker/taker fees when it's an English auction,\n  // since these sell orders are takers not makers\n\n  const makerRelayerFee = waitForHighestBid ? new BigNumber(totalBuyerFeeBasisPoints) : new BigNumber(totalSellerFeeBasisPoints);\n  const takerRelayerFee = waitForHighestBid ? new BigNumber(totalSellerFeeBasisPoints) : new BigNumber(totalBuyerFeeBasisPoints);\n  return {\n    makerRelayerFee,\n    takerRelayerFee,\n    makerProtocolFee: new BigNumber(0),\n    takerProtocolFee: new BigNumber(0),\n    makerReferrerFee: new BigNumber(sellerBountyBasisPoints),\n    feeRecipient,\n    feeMethod: 1 // 0 protocol fee ,1 split fee\n\n  };\n}\n\nconst StaticCheckTxOrigin = [{\n  constant: true,\n  inputs: [],\n  name: \"succeedIfTxOriginMatchesHardcodedAddress\",\n  outputs: [],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: false,\n  inputs: [],\n  name: \"renounceOwnership\",\n  outputs: [],\n  payable: false,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [{\n    name: \"_specifiedAddress\",\n    type: \"address\"\n  }],\n  name: \"succeedIfTxOriginMatchesSpecifiedAddress\",\n  outputs: [],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [],\n  name: \"owner\",\n  outputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [],\n  name: \"isOwner\",\n  outputs: [{\n    name: \"\",\n    type: \"bool\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: false,\n  inputs: [{\n    name: \"_newHardcodedAddress\",\n    type: \"address\"\n  }],\n  name: \"changeHardcodedAddress\",\n  outputs: [],\n  payable: false,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: false,\n  inputs: [{\n    name: \"newOwner\",\n    type: \"address\"\n  }],\n  name: \"transferOwnership\",\n  outputs: [],\n  payable: false,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    name: \"_hardcodedAddress\",\n    type: \"address\"\n  }],\n  payable: false,\n  stateMutability: \"nonpayable\",\n  type: \"constructor\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: false,\n    name: \"previousOwner\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    name: \"newOwner\",\n    type: \"address\"\n  }],\n  name: \"OwnershipTransferred\",\n  type: \"event\"\n}];\nexport const getMethod = (abi, name) => {\n  const methodAbi = abi.find(x => x.type == \"function\" && x.name == name);\n\n  if (!methodAbi) {\n    throw new Error(`ABI ${name} not found`);\n  } // Have to cast since there's a bug in\n  // web3 types on the 'type' field\n\n\n  return methodAbi;\n};\n\nasync function _getStaticCallTargetAndExtraData(_ref5) {\n  let {\n    useTxnOriginStaticCall\n  } = _ref5;\n\n  if (!useTxnOriginStaticCall) {\n    // While testing, we will use dummy values for mainnet. We will remove this if-statement once we have pushed the PR once and tested on Rinkeby\n    return {\n      staticTarget: WyvernProtocol.NULL_ADDRESS,\n      staticExtradata: \"0x\"\n    };\n  }\n\n  if (useTxnOriginStaticCall) {\n    return {\n      staticTarget: STATIC_CALL_TX_ORIGIN_ADDRESS,\n      staticExtradata: encodeCall(getMethod(StaticCheckTxOrigin, \"succeedIfTxOriginMatchesHardcodedAddress\"), [])\n    };\n  } else {\n    // Noop - no checks\n    return {\n      staticTarget: WyvernProtocol.NULL_ADDRESS,\n      staticExtradata: \"0x\"\n    };\n  }\n}\n\nexport const assetContractFromJSON = assetContract => {\n  return {\n    name: assetContract.name,\n    description: assetContract.description,\n    type: assetContract.assetContract_type,\n    schemaName: assetContract.schema_name,\n    address: assetContract.address,\n    tokenSymbol: assetContract.symbol,\n    buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n    sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n    openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n    imageUrl: assetContract.image_url,\n    externalLink: assetContract.external_link,\n    wikiLink: assetContract.wiki_link\n  };\n};\nexport const collectionFromJSON = collection => {\n  const createdDate = new Date(`${collection.created_date}Z`);\n  return {\n    createdDate,\n    name: collection.name,\n    description: collection.description,\n    slug: collection.slug,\n    editors: collection.editors,\n    hidden: collection.hidden,\n    featured: collection.featured,\n    featuredImageUrl: collection.featured_image_url,\n    displayData: collection.display_data,\n    paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n    openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n    payoutAddress: collection.payout_address,\n    imageUrl: collection.image_url,\n    largeImageUrl: collection.large_image_url,\n    stats: collection.stats,\n    traitStats: collection.traits,\n    externalLink: collection.external_url,\n    wikiLink: collection.wiki_url\n  };\n};\nexport const userFromJSON = user => {\n  return {\n    username: user.username\n  };\n};\nexport const accountFromJSON = account => {\n  return {\n    address: account.address,\n    config: account.config,\n    profileImgUrl: account.profile_img_url,\n    user: account.user ? userFromJSON(account.user) : null\n  };\n};\nexport const transactionFromJSON = transaction => {\n  return {\n    fromAccount: accountFromJSON(transaction.from_account),\n    toAccount: accountFromJSON(transaction.to_account),\n    createdDate: new Date(`${transaction.created_date}Z`),\n    modifiedDate: new Date(`${transaction.modified_date}Z`),\n    transactionHash: transaction.transaction_hash,\n    transactionIndex: transaction.transaction_index,\n    blockNumber: transaction.block_number,\n    blockHash: transaction.block_hash,\n    timestamp: new Date(`${transaction.timestamp}Z`)\n  };\n};\nexport const assetEventFromJSON = assetEvent => {\n  return {\n    eventType: assetEvent.event_type,\n    eventTimestamp: assetEvent.event_timestamp,\n    auctionType: assetEvent.auction_type,\n    totalPrice: assetEvent.total_price,\n    transaction: assetEvent.transaction ? transactionFromJSON(assetEvent.transaction) : null,\n    paymentToken: assetEvent.payment_token ? tokenFromJSON(assetEvent.payment_token) : null\n  };\n};\nexport const assetFromJSON = asset => {\n  const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n  const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n  const fromJSON = {\n    tokenId: asset.token_id.toString(),\n    tokenAddress: asset.asset_contract.address,\n    name: asset.name,\n    description: asset.description,\n    owner: asset.owner,\n    assetContract: assetContractFromJSON(asset.asset_contract),\n    collection: collectionFromJSON(asset.collection),\n    orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n    sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n    buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n    isPresale: asset.is_presale,\n    // Don't use previews if it's a special image\n    imageUrl: isAnimated || isSvg ? asset.image_url : asset.image_preview_url || asset.image_url,\n    imagePreviewUrl: asset.image_preview_url,\n    imageUrlOriginal: asset.image_original_url,\n    imageUrlThumbnail: asset.image_thumbnail_url,\n    externalLink: asset.external_link,\n    openseaLink: asset.permalink,\n    traits: asset.traits,\n    numSales: asset.num_sales,\n    lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n    backgroundColor: asset.background_color ? `#${asset.background_color}` : null,\n    transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n    transferFeePaymentToken: asset.transfer_fee_payment_token ? tokenFromJSON(asset.transfer_fee_payment_token) : null\n  }; // If orders were included, put them in sell/buy order groups\n\n  if (fromJSON.orders && !fromJSON.sellOrders) {\n    fromJSON.sellOrders = fromJSON.orders.filter(o => o.side == 1);\n  }\n\n  if (fromJSON.orders && !fromJSON.buyOrders) {\n    fromJSON.buyOrders = fromJSON.orders.filter(o => o.side == 0);\n  }\n\n  return fromJSON;\n};\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\n\nasync function getAsset(_ref6) {\n  let {\n    tokenAddress,\n    tokenId\n  } = _ref6;\n  const {\n    data\n  } = await axios(`${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`);\n  return assetFromJSON(data);\n}\n\nasync function _makeSellOrder(_ref7) {\n  let {\n    asset,\n    quantity,\n    accountAddress,\n    startAmount,\n    endAmount,\n    listingTime,\n    expirationTime,\n    waitForHighestBid,\n    englishAuctionReservePrice = 0,\n    paymentTokenAddress,\n    extraBountyBasisPoints,\n    // this is for extra fee\n    buyerAddress,\n    platform,\n    openSeaAsset // holds fee\n\n  } = _ref7;\n  accountAddress = accountAddress.toLowerCase();\n  const schema = ERC721Schema; // currently supporting ERC721 only\n\n  const quantityBN = new BigNumber(1);\n  const wyAsset = getWyvernAsset(schema, asset, quantityBN);\n  let totalSellerFeeBasisPoints = GOLOM_DEFAULT_FEES; // in bps\n\n  if (asset.tokenAddress == \"0xf07468ead8cf26c752c676e43c814fee9c8cf402\") {\n    totalSellerFeeBasisPoints = 0;\n  }\n\n  let totalBuyerFeeBasisPoints = 0;\n  let sellerBountyBasisPoints = 0; // TODO: No need to fetch asset again we can use values from _token.vue directly\n\n  if (platform == PlatformType.Opensea) {\n    // { totalSellerFeeBasisPoints, totalBuyerFeeBasisPoints, sellerBountyBasisPoints }\n    const fees = await computeFees({\n      asset: openSeaAsset,\n      side: 1,\n      extraBountyBasisPoints,\n      platform\n    }); // 1 for sell 0 for buy\n\n    totalSellerFeeBasisPoints = fees.totalSellerFeeBasisPoints;\n    totalBuyerFeeBasisPoints = fees.totalBuyerFeeBasisPoints;\n    sellerBountyBasisPoints = fees.sellerBountyBasisPoints;\n  }\n\n  const {\n    target,\n    calldata,\n    replacementPattern\n  } = encodeSell(schema, wyAsset, accountAddress, // waitForHighestBid ? undefined : merkleValidatorByNetwork.main\n  merkleValidatorByNetwork.main);\n  console.log(endAmount);\n  const orderSaleKind = endAmount != null && endAmount !== startAmount ? 1 : 0; // 0 fixed price 1 ducch aucion\n\n  const {\n    basePrice,\n    extra,\n    paymentToken,\n    reservePrice\n  } = await _getPriceParameters(1, paymentTokenAddress, expirationTime, startAmount, endAmount, waitForHighestBid, englishAuctionReservePrice);\n\n  const times = _getTimeParameters(expirationTime, listingTime, waitForHighestBid);\n\n  let {\n    makerRelayerFee,\n    takerRelayerFee,\n    makerProtocolFee,\n    takerProtocolFee,\n    makerReferrerFee,\n    feeRecipient,\n    feeMethod\n  } = _getSellFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, waitForHighestBid, sellerBountyBasisPoints);\n\n  if (platform != PlatformType.Opensea) {\n    feeRecipient = GOLOM_FEE_RECIPIENT;\n  }\n\n  const {\n    staticTarget,\n    staticExtradata\n  } = await _getStaticCallTargetAndExtraData({\n    useTxnOriginStaticCall: waitForHighestBid\n  });\n  return {\n    exchange: WYVERN_CONTRACT,\n    maker: accountAddress,\n    taker: buyerAddress,\n    // for private listing\n    quantity: quantityBN,\n    makerRelayerFee,\n    takerRelayerFee,\n    makerProtocolFee,\n    takerProtocolFee,\n    makerReferrerFee,\n    waitingForBestCounterOrder: waitForHighestBid,\n    englishAuctionReservePrice: reservePrice ? new BigNumber(reservePrice) : undefined,\n    feeMethod,\n    feeRecipient,\n    side: 1,\n    saleKind: orderSaleKind,\n    target,\n    howToCall: target === merkleValidatorByNetwork.main ? HowToCall.DelegateCall : HowToCall.Call,\n    calldata,\n    replacementPattern,\n    staticTarget,\n    staticExtradata,\n    paymentToken,\n    basePrice,\n    extra,\n    listingTime: times.listingTime,\n    expirationTime: times.expirationTime,\n    salt: WyvernProtocol.generatePseudoRandomSalt(),\n    metadata: {\n      asset: wyAsset,\n      schema: schema.name\n    }\n  };\n}\n\nasync function validateOrderParams(_ref8) {\n  let {\n    order,\n    accountAddress,\n    wyvernExchange\n  } = _ref8;\n  // Check sell parameters\n  const sellValid = await wyvernExchange.functions.validateOrderParameters_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [0.001.toFixed(), 0.001.toFixed(), order.makerProtocolFee.toFixed(), order.takerProtocolFee.toFixed(), 0.0.toFixed(), 0.0.toFixed(), order.listingTime.toFixed(), order.expirationTime.toFixed(), order.salt.toFixed()], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata); // .call({ from: accountAddress });\n\n  if (!sellValid) {\n    console.error(order);\n    throw new Error(`Failed to validate sell order parameters. Make sure you're on the right network!`);\n  }\n\n  return sellValid;\n}\n\nasync function validateOrder(_ref9) {\n  let {\n    order,\n    accountAddress,\n    wyvernExchange\n  } = _ref9;\n  // Check sell parameters\n  const sellValid = await wyvernExchange.functions.validateOrder_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [250.0.toFixed(), 0.0.toFixed(), order.makerProtocolFee, order.takerProtocolFee, 0.0.toFixed(), 0.0.toFixed(), order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, order.v, order.r, order.s); // .call({ from: accountAddress });\n\n  if (!sellValid) {\n    // eslint-disable-next-line no-throw-literal\n    throw {\n      message: new Error(`Failed to validate sell order parameters. It looks like this listing is invalid.`),\n      code: \"InvalidOrder\"\n    }; // TODO: call order invalidate API\n  }\n\n  return sellValid;\n} // sourced from 0x.js:\n// https://github.com/ProjectWyvern/wyvern-js/blob/39999cb93ce5d80ea90b4382182d1bd4339a9c6c/src/utils/signature_utils.ts\n\n\nasync function parseSignatureHex(signature) {\n  // HACK: There is no consensus on whether the signatureHex string should be formatted as\n  // v + r + s OR r + s + v, and different clients (even different versions of the same client)\n  // return the signature params in different orders. In order to support all client implementations,\n  // we parse the signature in both ways, and evaluate if either one is a valid signature.\n  const validVParamValues = [27, 28];\n\n  const ecSignatureRSV = _parseSignatureHexAsRSV(signature);\n\n  if (_.includes(validVParamValues, ecSignatureRSV.v)) {\n    return ecSignatureRSV;\n  } // For older clients\n\n\n  const ecSignatureVRS = _parseSignatureHexAsVRS(signature);\n\n  if (_.includes(validVParamValues, ecSignatureVRS.v)) {\n    return ecSignatureVRS;\n  }\n\n  throw new Error(\"Invalid signature\");\n\n  function _parseSignatureHexAsVRS(signatureHex) {\n    const signatureBuffer = ethUtil.toBuffer(signatureHex);\n    let v = signatureBuffer[0];\n\n    if (v < 27) {\n      v += 27;\n    }\n\n    const r = signatureBuffer.slice(1, 33);\n    const s = signatureBuffer.slice(33, 65);\n    const ecSignature = {\n      v,\n      r: ethUtil.bufferToHex(r),\n      s: ethUtil.bufferToHex(s)\n    };\n    return ecSignature;\n  }\n\n  function _parseSignatureHexAsRSV(signatureHex) {\n    const {\n      v,\n      r,\n      s\n    } = ethUtil.fromRpcSig(signatureHex);\n    const ecSignature = {\n      v,\n      r: ethUtil.bufferToHex(r),\n      s: ethUtil.bufferToHex(s)\n    };\n    return ecSignature;\n  }\n}\n\nasync function personalSignAsync(provider, message, signerAddress) {\n  return new Promise((resolve, reject) => {\n    const callback = async (err, signature) => {\n      if (err) reject(err);\n\n      if (signature.error) {\n        reject(signature.error.message);\n      }\n\n      resolve(parseSignatureHex(signature.result)); // // console.log(result);\n      // const d = signature.result;\n      // let v = d.slice(-2);\n      // let r = d.slice(2, -66);\n      // let s = d.slice(-66, -2);\n      // let actualsignature = v + r + s + '03';\n      // // const dhs = await this.contractInstace.methods\n      // //   .setApprovalForAll(OPERATOR_ADDRESS, true)\n      // //   .send({ from: this.metamask.metaMaskAddress });\n      // resolve(`0x${actualsignature}`);\n    }; // console.log(orderHex, metaMaskAddress);\n\n\n    provider.sendAsync({\n      method: \"personal_sign\",\n      params: [message, signerAddress],\n      from: signerAddress\n    }, callback);\n  });\n}\n\nexport async function signTypedDataAsync(provider, message, signerAddress) {\n  let signature;\n  console.log(signerAddress);\n  return new Promise((resolve, reject) => {\n    const callback = async (err, result) => {\n      console.log(err);\n      if (err) reject(err);\n\n      if (result.error) {\n        reject(result.error.message);\n      } // eslint-disable-next-line prefer-promise-reject-errors\n\n\n      if (result.error) return reject(\"ERROR\", result); // console.log(result);\n      // const d = result.result;\n      // let v = d.slice(-2);\n      // let r = d.slice(2, -66);\n      // let s = d.slice(-66, -2);\n      // let actualsignature = v + r + s + '03';\n\n      resolve(parseSignatureHex(result.result));\n    };\n\n    const stringified = JSON.stringify({ ...message\n    });\n\n    try {\n      // Using sign typed data V4 works with a stringified message, used by browser providers i.e. Metamask\n      provider.sendAsync({\n        method: \"eth_signTypedData_v4\",\n        params: [signerAddress, stringified],\n        from: signerAddress,\n        id: new Date().getTime()\n      }, callback);\n    } catch (error) {\n      console.log(error); // Fallback to normal sign typed data for node providers, without using stringified message\n      // https://github.com/coinbase/coinbase-wallet-sdk/issues/60\n\n      provider.sendAsync({\n        method: \"eth_signTypedData\",\n        params: [signerAddress, message],\n        from: signerAddress,\n        id: new Date().getTime()\n      }, callback);\n    }\n  });\n}\n\nasync function _authorizeOrder(_ref10) {\n  let {\n    order,\n    provider,\n    nonce\n  } = _ref10;\n  // 2.2 Sign order flow\n  const signerAddress = order.maker; // console.log(order, nonce);\n\n  if (order.exchange === wyvern2_2ConfigByNetwork.main.wyvernExchangeContractAddress && order.hash) {\n    const message = order.hash; // v1\n\n    return await personalSignAsync(provider, message, signerAddress);\n  } // 2.3 Sign order flow using EIP-712\n  // We need to manually specify each field because OS orders can contain unrelated data\n\n\n  const orderForSigning = {\n    maker: order.maker,\n    exchange: order.exchange,\n    taker: order.taker,\n    makerRelayerFee: order.makerRelayerFee.toString(),\n    takerRelayerFee: order.takerRelayerFee.toString(),\n    makerProtocolFee: order.makerProtocolFee.toString(),\n    takerProtocolFee: order.takerProtocolFee.toString(),\n    feeRecipient: order.feeRecipient,\n    feeMethod: order.feeMethod,\n    side: order.side,\n    saleKind: order.saleKind,\n    target: order.target,\n    howToCall: order.howToCall,\n    calldata: order.calldata,\n    replacementPattern: order.replacementPattern,\n    staticTarget: order.staticTarget,\n    staticExtradata: order.staticExtradata,\n    paymentToken: order.paymentToken,\n    basePrice: order.basePrice.toString(),\n    extra: order.extra.toString(),\n    listingTime: order.listingTime.toString(),\n    expirationTime: order.expirationTime.toString(),\n    salt: order.salt.toString()\n  }; // We don't JSON.stringify as certain wallet providers sanitize this data\n  // https://github.com/coinbase/coinbase-wallet-sdk/issues/60\n\n  const message = {\n    types: OrderTypesEIP712,\n    domain: {\n      name: WyvernDomainNameEIP712,\n      version: WyvernDomainVersionEIP712,\n      chainId: 1,\n      verifyingContract: order.exchange\n    },\n    primaryType: \"Order\",\n    message: { ...orderForSigning,\n      nonce\n    }\n  };\n  const ecSignature = await signTypedDataAsync(provider, message, signerAddress);\n  return { ...ecSignature,\n    nonce\n  };\n}\n/**\n * Convert an order to JSON, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\n\n\nconst orderToJSON = order => {\n  const asJSON = {\n    exchange: order.exchange.toLowerCase(),\n    maker: order.maker.toLowerCase(),\n    taker: order.taker.toLowerCase(),\n    makerRelayerFee: order.makerRelayerFee.toString(),\n    takerRelayerFee: order.takerRelayerFee.toString(),\n    makerProtocolFee: order.makerProtocolFee.toString(),\n    takerProtocolFee: order.takerProtocolFee.toString(),\n    makerReferrerFee: order.makerReferrerFee.toString(),\n    feeMethod: order.feeMethod,\n    feeRecipient: order.feeRecipient.toLowerCase(),\n    side: order.side,\n    saleKind: order.saleKind,\n    target: order.target.toLowerCase(),\n    howToCall: order.howToCall,\n    calldata: order.calldata,\n    replacementPattern: order.replacementPattern,\n    staticTarget: order.staticTarget.toLowerCase(),\n    staticExtradata: order.staticExtradata,\n    paymentToken: order.paymentToken.toLowerCase(),\n    quantity: order.quantity.toString(),\n    basePrice: order.basePrice.toString(),\n    englishAuctionReservePrice: order.englishAuctionReservePrice ? order.englishAuctionReservePrice.toString() : undefined,\n    extra: order.extra.toString(),\n    createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n    listingTime: order.listingTime.toString(),\n    expirationTime: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n    metadata: order.metadata,\n    v: order.v,\n    r: order.r,\n    s: order.s,\n    nonce: order.nonce\n  };\n  return asJSON;\n};\n\nasync function postOrder(order) {\n  let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  try {\n    const {\n      data\n    } = await axios.post(`https://api.opensea.io/wyvern/v1/orders/post/`, order, {\n      headers: {\n        \"x-api-key\": X_API_KEY\n      }\n    });\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\n\n\nconst orderToGolomJSON = order => {\n  const asJSON = {\n    exchange: order.exchange.toLowerCase(),\n    maker: {\n      address: order.maker.toLowerCase()\n    },\n    taker: {\n      address: order.taker.toLowerCase()\n    },\n    maker_relayer_fee: order.makerRelayerFee.toString(),\n    taker_relayer_fee: order.takerRelayerFee.toString(),\n    maker_protocol_fee: order.makerProtocolFee.toString(),\n    taker_protocol_fee: order.takerProtocolFee.toString(),\n    makerReferrerFee: order.makerReferrerFee.toString(),\n    fee_method: order.feeMethod,\n    fee_recipient: {\n      address: order.feeRecipient.toLowerCase()\n    },\n    side: order.side,\n    sale_kind: order.saleKind,\n    target: order.target.toLowerCase(),\n    how_to_call: order.howToCall,\n    calldata: order.calldata,\n    replacement_pattern: order.replacementPattern,\n    static_target: order.staticTarget.toLowerCase(),\n    static_extradata: order.staticExtradata,\n    payment_token: order.paymentToken.toLowerCase(),\n    quantity: order.quantity.toString(),\n    base_price: order.basePrice.toString(),\n    englishAuctionReservePrice: order.englishAuctionReservePrice ? order.englishAuctionReservePrice.toString() : undefined,\n    extra: order.extra.toString(),\n    createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n    listing_time: order.listingTime.toString(),\n    expiration_time: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n    metadata: order.metadata,\n    v: order.v,\n    r: order.r,\n    s: order.s,\n    prefixed_hash: order.hash\n  };\n  return asJSON;\n};\n/**\n * Validate and post an order to the OpenSea orderbook.\n * @param order The order to post. Can either be signed by the maker or pre-approved on the Wyvern contract using approveOrder. See https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/Exchange.sol#L178\n * @returns The order as stored by the orderbook\n */\n\n\nasync function validateAndPostOrder(_ref11) {\n  let {\n    order,\n    platform\n  } = _ref11;\n  // Validation is called server-side\n  return platform == PlatformType.Opensea ? orderToJSON(order) : orderToGolomJSON(order);\n}\n\nfunction cancelOSOrder(_ref12) {\n  let {\n    provider,\n    order\n  } = _ref12;\n  const wyvernExchange = WyvernContract(provider); // const cancelHash = wyvernExchange.methods\n  //   .hashToSign_(\n  //     [\n  //       order.exchange,\n  //       order.maker,\n  //       order.taker,\n  //       order.feeRecipient,\n  //       order.target,\n  //       order.staticTarget,\n  //       order.paymentToken\n  //     ],\n  //     [\n  //       order.makerRelayerFee,\n  //       order.takerRelayerFee,\n  //       order.makerProtocolFee,\n  //       order.takerProtocolFee,\n  //       order.basePrice,\n  //       order.extra,\n  //       order.listingTime,\n  //       order.expirationTime,\n  //       order.salt\n  //     ],\n  //     order.feeMethod,\n  //     order.side,\n  //     order.saleKind,\n  //     order.howToCall,\n  //     order.calldata,\n  //     order.replacementPattern,\n  //     order.staticExtradata\n  //   )\n  //   .call();\n  // console.log(cancelHash);\n\n  return wyvernExchange.methods.cancelOrder_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, order.v || 0, order.r || NULL_BLOCK_HASH, order.s || NULL_BLOCK_HASH);\n}\n\nasync function createSellOrder(_ref13) {\n  let {\n    provider,\n    asset,\n    accountAddress,\n    startAmount,\n    endAmount,\n    quantity = 1,\n    listingTime,\n    expirationTime = 0,\n    waitForHighestBid = false,\n    englishAuctionReservePrice,\n    paymentTokenAddress,\n    extraBountyBasisPoints = 0,\n    buyerAddress,\n    fees,\n    platform = PlatformType.Opensea,\n    buyerEmail\n  } = _ref13;\n  const order = await _makeSellOrder({\n    asset,\n    quantity,\n    accountAddress,\n    startAmount,\n    endAmount,\n    listingTime,\n    expirationTime,\n    waitForHighestBid,\n    englishAuctionReservePrice,\n    paymentTokenAddress: paymentTokenAddress || WyvernProtocol.NULL_ADDRESS,\n    extraBountyBasisPoints,\n    platform,\n    openSeaAsset: fees,\n    buyerAddress: buyerAddress || WyvernProtocol.NULL_ADDRESS\n  });\n  const wyvernExchange = WyvernContract(provider);\n  await validateOrderParams({\n    order,\n    accountAddress,\n    wyvernExchange\n  });\n  const hashedOrder = { ...order,\n    hash: getOrderHash(order)\n  };\n  const nonce = Number(await wyvernExchange.functions.nonces(accountAddress));\n  let signature;\n\n  try {\n    signature = await _authorizeOrder({\n      provider,\n      order: hashedOrder,\n      nonce\n    });\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"You declined to authorize your auction\");\n  }\n\n  const orderWithSignature = { ...hashedOrder,\n    ...signature\n  };\n  return validateAndPostOrder({\n    order: orderWithSignature,\n    platform\n  });\n}\n\nexport { fulfillOrder, createSellOrder, cancelOSOrder }; // maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28","map":{"version":3,"names":["WyvernProtocol","HowToCall","Network","ERC721Schema","ethABI","ethUtil","isValidAddress","parseEther","BigNumber","axios","_","OPENSEA_URL","X_API_KEY","ACTIVITY_POLLING_INTERVAL","LISTING_POLLING_INTERVAL","OFFERS_POLLING_INTERVAL","MIN_EXPIRATION_SECONDS","ORDER_MATCHING_LATENCY_SECONDS","OPENSEA_FEE_RECIPIENT","INVERSE_BASIS_POINT","DEFAULT_BUYER_FEE_BASIS_POINTS","DEFAULT_SELLER_FEE_BASIS_POINTS","OPENSEA_SELLER_BOUNTY_BASIS_POINTS","DEFAULT_MAX_BOUNTY","STATIC_CALL_TX_ORIGIN_ADDRESS","MERKLE_VALIDATOR_MAINNET","mainnetWyvernConfigByNetwork","OrderTypesEIP712","WyvernDomainNameEIP712","WyvernDomainVersionEIP712","WyvernContract","WYVERN_CONTRACT","tokenFromJSON","token","fromJSON","name","symbol","decimals","address","imageUrl","image_url","ethPrice","eth_price","usdPrice","usd_price","merkleValidatorByNetwork","main","orderFromJSON","order","createdDate","Date","created_date","hash","order_hash","cancelledOrFinalized","cancelled","finalized","markedInvalid","marked_invalid","metadata","quantity","exchange","makerAccount","maker","takerAccount","taker","makerRelayerFee","maker_relayer_fee","takerRelayerFee","taker_relayer_fee","makerProtocolFee","maker_protocol_fee","takerProtocolFee","taker_protocol_fee","makerReferrerFee","maker_referrer_fee","waitingForBestCounterOrder","fee_recipient","NULL_ADDRESS","feeMethod","fee_method","feeRecipientAccount","feeRecipient","side","saleKind","sale_kind","target","howToCall","how_to_call","calldata","replacementPattern","replacement_pattern","staticTarget","static_target","staticExtradata","static_extradata","paymentToken","payment_token","basePrice","base_price","extra","currentBounty","current_bounty","currentPrice","current_price","createdTime","Math","round","getTime","listingTime","listing_time","expirationTime","expiration_time","salt","v","parseInt","r","s","paymentTokenContract","payment_token_contract","undefined","asset","assetBundle","asset_bundle","estimateCurrentPrice","orderFromGolomJSON","created","orderData","data","contract_address","id","token_id","schema","hex","valid","_getTimeParameters","expirationTimestamp","listingTimestamp","minExpirationTimestamp","now","minListingTimestamp","Error","toString","encodeCall","abi","parameters","inputTypes","inputs","map","i","type","methodID","encode","rawEncode","slice","Buffer","concat","encodeDefaultCall","input","kind","generateDefaultValue","value","encodeSell","validatorAddress","transfer","functions","checkAndTransfer","defaultCall","pattern","encodeReplacementPattern","encodeBuy","replaceables","filter","ownerInputs","length","e","console","error","getOrderHash","orderWithStringTypes","toLowerCase","toFixed","getOrderHashHex","makeMatchingOrder","accountAddress","recipientAddress","platform","computeOrderParams","shouldValidate","times","PlatformType","Opensea","GOLOM_FEE_RECIPIENT","matchingOrder","generatePseudoRandomSalt","assignOrdersToSides","isSellOrder","buy","sell","_getMetadata","referrerAddress","referrer","substr","_correctGasAmount","estimation","ceil","_getWyvernProtocolForOrder","useReadOnly","wyvern2_2ConfigByNetwork","wyvernExchangeContractAddress","_wyvern2_2ProtocolReadOnly","_wyvern2_2Protocol","_wyvernProtocolReadOnly","_wyvernProtocol","getCurrentPrice","wyvernExchange","methods","calculateCurrentPrice_","call","secondsToBacktrack","shouldRoundUp","minus","exactPrice","diff","dividedBy","plus","_getRequiredAmountForTakingSellOrder","estimatedPrice","maxPrice","max","feePercentage","div","fee","_atomicMatch","NULL_BLOCK_HASH","txnData","from","args","log","atomicMatchMethod","atomicMatch_","then","res","jsonToOrder","golomOrder","tokenId","contractAddress","String","fulfillOrder","provider","info","isValid","validateOrder","getWyvernAsset","assetFromFields","ID","Quantity","Address","tokenAddress","Name","computeFees","extraBountyBasisPoints","openseaBuyerFeeBasisPoints","openseaSellerFeeBasisPoints","devBuyerFeeBasisPoints","devSellerFeeBasisPoints","transferFee","transferFeeTokenAddress","maxTotalBountyBPS","sellerBountyBasisPoints","bountyTooLarge","errorMessage","totalBuyerFeeBasisPoints","totalSellerFeeBasisPoints","_getPriceParameters","orderSide","startAmount","endAmount","englishAuctionReservePrice","priceDiff","reservePrice","_validateFees","maxFeePercent","_getSellFeeParameters","waitForHighestBid","StaticCheckTxOrigin","constant","outputs","payable","stateMutability","anonymous","indexed","getMethod","methodAbi","find","x","_getStaticCallTargetAndExtraData","useTxnOriginStaticCall","assetContractFromJSON","assetContract","description","assetContract_type","schemaName","schema_name","tokenSymbol","buyerFeeBasisPoints","buyer_fee_basis_points","sellerFeeBasisPoints","seller_fee_basis_points","opensea_buyer_fee_basis_points","opensea_seller_fee_basis_points","dev_buyer_fee_basis_points","dev_seller_fee_basis_points","externalLink","external_link","wikiLink","wiki_link","collectionFromJSON","collection","slug","editors","hidden","featured","featuredImageUrl","featured_image_url","displayData","display_data","paymentTokens","payment_tokens","payoutAddress","payout_address","largeImageUrl","large_image_url","stats","traitStats","traits","external_url","wiki_url","userFromJSON","user","username","accountFromJSON","account","config","profileImgUrl","profile_img_url","transactionFromJSON","transaction","fromAccount","from_account","toAccount","to_account","modifiedDate","modified_date","transactionHash","transaction_hash","transactionIndex","transaction_index","blockNumber","block_number","blockHash","block_hash","timestamp","assetEventFromJSON","assetEvent","eventType","event_type","eventTimestamp","event_timestamp","auctionType","auction_type","totalPrice","total_price","assetFromJSON","isAnimated","endsWith","isSvg","asset_contract","owner","orders","sellOrders","sell_orders","buyOrders","buy_orders","isPresale","is_presale","image_preview_url","imagePreviewUrl","imageUrlOriginal","image_original_url","imageUrlThumbnail","image_thumbnail_url","openseaLink","permalink","numSales","num_sales","lastSale","last_sale","backgroundColor","background_color","transfer_fee","transferFeePaymentToken","transfer_fee_payment_token","o","getAsset","_makeSellOrder","paymentTokenAddress","buyerAddress","openSeaAsset","quantityBN","wyAsset","GOLOM_DEFAULT_FEES","fees","orderSaleKind","DelegateCall","Call","validateOrderParams","sellValid","validateOrderParameters_","validateOrder_","message","code","parseSignatureHex","signature","validVParamValues","ecSignatureRSV","_parseSignatureHexAsRSV","includes","ecSignatureVRS","_parseSignatureHexAsVRS","signatureHex","signatureBuffer","toBuffer","ecSignature","bufferToHex","fromRpcSig","personalSignAsync","signerAddress","Promise","resolve","reject","callback","err","result","sendAsync","method","params","signTypedDataAsync","stringified","JSON","stringify","_authorizeOrder","nonce","orderForSigning","types","domain","version","chainId","verifyingContract","primaryType","orderToJSON","asJSON","postOrder","retries","post","headers","orderToGolomJSON","prefixed_hash","validateAndPostOrder","cancelOSOrder","cancelOrder_","createSellOrder","buyerEmail","hashedOrder","Number","nonces","orderWithSignature"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/opensea.js"],"sourcesContent":["// Wyvern\nimport WyvernProtocol from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\";\n\n// Ethereum\nimport * as ethABI from \"ethereumjs-abi\";\nimport * as ethUtil from \"ethereumjs-util\";\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\";\n\n// Other\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\n\n// Constants\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { MIN_EXPIRATION_SECONDS, ORDER_MATCHING_LATENCY_SECONDS, OPENSEA_FEE_RECIPIENT, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport mainnetWyvernConfigByNetwork from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\";\n\n// Contracts\nimport { WyvernContract, WYVERN_CONTRACT } from \"./contracts\";\n\n// FUNCTIONS\nconst tokenFromJSON = (token) => {\n    const fromJSON = {\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        address: token.address,\n        imageUrl: token.image_url,\n        ethPrice: token.eth_price,\n        usdPrice: token.usd_price,\n    };\n\n  return fromJSON;\n};\n\nexport const merkleValidatorByNetwork = {\n  main: MERKLE_VALIDATOR_MAINNET\n};\nexport const orderFromJSON = (order) => {\n  const createdDate = new Date(`${order.created_date}Z`);\n  const fromJSON = {\n    hash: order.order_hash || order.hash,\n    cancelledOrFinalized: order.cancelled || order.finalized,\n    markedInvalid: order.marked_invalid,\n    metadata: order.metadata,\n    quantity: new BigNumber(order.quantity || 1),\n    exchange: order.exchange,\n    makerAccount: order.maker,\n    takerAccount: order.taker,\n    // Use string address to conform to Wyvern Order schema\n    maker: order.maker.address,\n    taker: order.taker.address,\n    makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n    takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n    makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n    takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n    makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n    waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n    feeMethod: order.fee_method,\n    feeRecipientAccount: order.fee_recipient,\n    feeRecipient: order.fee_recipient.address,\n    side: order.side,\n    saleKind: order.sale_kind,\n    target: order.target,\n    howToCall: order.how_to_call,\n    calldata: order.calldata,\n    replacementPattern: order.replacement_pattern,\n    staticTarget: order.static_target,\n    staticExtradata: order.static_extradata,\n    paymentToken: order.payment_token,\n    basePrice: new BigNumber(order.base_price),\n    extra: new BigNumber(order.extra),\n    currentBounty: new BigNumber(order.current_bounty || 0),\n    currentPrice: new BigNumber(order.current_price || 0),\n\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(order.listing_time),\n    expirationTime: new BigNumber(order.expiration_time),\n\n    salt: new BigNumber(order.salt),\n    v: parseInt(order.v),\n    r: order.r,\n    s: order.s,\n\n    paymentTokenContract: order.payment_token_contract\n      ? tokenFromJSON(order.payment_token_contract)\n      : undefined,\n    asset: order.asset,\n    assetBundle: order.asset_bundle,\n  };\n\n  // Use client-side price calc, to account for buyer fee (not added by server) and latency\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\n\nexport const orderFromGolomJSON = (order) => {\n  const createdDate = new Date(`${order.created}`);\n  const orderData = order.data;\n  const metadata = {\n    asset: {\n      address: order.contract_address,\n      id: order.token_id,\n    },\n    schema: \"ERC721\", // currently supporting erc721 only\n  };\n\n  const fromJSON = {\n    hash: order.hex,\n    cancelledOrFinalized: false,\n    markedInvalid: order.valid,\n    metadata,\n    quantity: new BigNumber(1),\n    exchange: orderData.exchange,\n    // Use string address to conform to Wyvern Order schema\n    maker: orderData.maker,\n    taker: orderData.taker,\n    makerRelayerFee: new BigNumber(orderData.makerRelayerFee),\n    takerRelayerFee: new BigNumber(orderData.takerRelayerFee),\n    makerProtocolFee: new BigNumber(orderData.makerProtocolFee),\n    takerProtocolFee: new BigNumber(orderData.takerProtocolFee),\n    makerReferrerFee: new BigNumber(0), // need to explore this field more\n    waitingForBestCounterOrder: orderData.feeRecipient == WyvernProtocol.NULL_ADDRESS,\n    feeMethod: orderData.feeMethod,\n    feeRecipient: orderData.feeRecipient,\n    side: orderData.side,\n    saleKind: orderData.saleKind,\n    target: orderData.target,\n    howToCall: orderData.howToCall,\n    calldata: orderData.calldata,\n    replacementPattern: orderData.replacementPattern,\n    staticTarget: orderData.staticTarget,\n    staticExtradata: orderData.staticExtradata,\n    paymentToken: orderData.paymentToken,\n    basePrice: new BigNumber(orderData.basePrice),\n    extra: new BigNumber(orderData.extra),\n    currentBounty: new BigNumber(0),\n    currentPrice: new BigNumber(0),\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(orderData.listingTime),\n    expirationTime: new BigNumber(orderData.expirationTime),\n    salt: new BigNumber(orderData.salt),\n    v: parseInt(orderData.v),\n    r: orderData.r,\n    s: orderData.s,\n    asset: order.asset,\n  };\n\n  // Use client-side price calc, to account for buyer fee (not added by server) and latency\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\nconst _getTimeParameters = (\n  expirationTimestamp,\n  listingTimestamp,\n  waitingForBestCounterOrder = false\n) => {\n  // Validation\n  const minExpirationTimestamp = Math.round(\n    Date.now() / 1000 + MIN_EXPIRATION_SECONDS\n  );\n  const minListingTimestamp = Math.round(Date.now() / 1000);\n  if (\n    expirationTimestamp != 0 &&\n    expirationTimestamp < minExpirationTimestamp\n  ) {\n    throw new Error(\n      `Expiration time must be at least ${MIN_EXPIRATION_SECONDS} seconds from now, or zero (non-expiring).`\n    );\n  }\n  if (listingTimestamp && listingTimestamp < minListingTimestamp) {\n    throw new Error(\"Listing time cannot be in the past.\");\n  }\n  if (\n    listingTimestamp &&\n    expirationTimestamp != 0 &&\n    listingTimestamp >= expirationTimestamp\n  ) {\n    throw new Error(\"Listing time must be before the expiration time.\");\n  }\n  if (waitingForBestCounterOrder && expirationTimestamp == 0) {\n    throw new Error(\"English auctions must have an expiration time.\");\n  }\n  if (waitingForBestCounterOrder && listingTimestamp) {\n    throw new Error(`Cannot schedule an English auction for the future.`);\n  }\n  if (parseInt(expirationTimestamp.toString()) != expirationTimestamp) {\n    throw new Error(`Expiration timestamp must be a whole number of seconds`);\n  }\n\n  if (waitingForBestCounterOrder) {\n    listingTimestamp = expirationTimestamp;\n    // Expire one week from now, to ensure server can match it\n    // Later, this will expire closer to the listingTime\n    expirationTimestamp = expirationTimestamp + ORDER_MATCHING_LATENCY_SECONDS;\n  } else {\n    // Small offset to account for latency\n    listingTimestamp = listingTimestamp || Math.round(Date.now() / 1000 - 100);\n  }\n\n  return {\n    listingTime: BigNumber(listingTimestamp),\n    expirationTime: BigNumber(expirationTimestamp),\n  };\n};\nexport const encodeCall = (abi, parameters) => {\n  const inputTypes = abi.inputs.map((i) => i.type);\n  let id = ethABI.methodID(abi.name, inputTypes);\n  let encode = ethABI.rawEncode(inputTypes.slice(0, 3), parameters.slice(0, 3));\n\n  return (\"0x\" + Buffer.concat([id, encode]).toString(\"hex\"));\n};\nconst encodeDefaultCall = (abi, address) => {\n  const parameters = abi.inputs.map((input) => {\n    switch (input.kind) {\n      case \"replaceable\":\n        return WyvernProtocol.generateDefaultValue(input.type);\n      case \"owner\":\n        return address;\n      case \"asset\":\n      default:\n        return input.value;\n    }\n  });\n\n  return encodeCall(abi, parameters);\n};\nconst encodeSell = (schema, asset, address, validatorAddress) => {\n  const transfer =\n    validatorAddress && schema.functions.checkAndTransfer\n      ? schema.functions.checkAndTransfer(asset, validatorAddress)\n      : schema.functions.transfer(asset);\n  //   const transfer = schema.functions.transfer(asset);\n\n  let defaultCall = encodeDefaultCall(transfer, address)\n  let pattern = WyvernProtocol.encodeReplacementPattern(transfer)\n\n  return {\n    target: transfer.target,\n    calldata: defaultCall,\n    replacementPattern: pattern\n  };\n};\n\nconst encodeBuy = (schema, asset, address, validatorAddress) => {\n  //   const transfer = schema.functions.transfer(asset);\n  const transfer =\n    validatorAddress && schema.functions.checkAndTransfer\n      ? schema.functions.checkAndTransfer(asset, validatorAddress)\n      : schema.functions.transfer(asset);\n  const replaceables = transfer.inputs.filter((i) => i.kind === \"replaceable\");\n  const ownerInputs = transfer.inputs.filter((i) => i.kind === \"owner\");\n\n  // Validate\n  if (replaceables.length !== 1) {\n    throw new Error(\n      \"Only 1 input can match transfer destination, but instead \" +\n        replaceables.length +\n        \" did\"\n    );\n  }\n\n  // Compute calldata\n  const parameters = transfer.inputs.map((input) => {\n    switch (input.kind) {\n      case \"replaceable\":\n        return address;\n      case \"owner\":\n        return WyvernProtocol.generateDefaultValue(input.type);\n      default:\n        try {\n          return input.value.toString();\n        } catch (e) {\n          console.error(schema);\n          console.error(asset);\n          throw e;\n        }\n    }\n  });\n  const calldata = encodeCall(transfer, parameters);\n\n  // Compute replacement pattern\n  let replacementPattern = \"0x\";\n  if (ownerInputs.length > 0) {\n    replacementPattern = WyvernProtocol.encodeReplacementPattern(\n      transfer,\n      \"owner\"\n    );\n  }\n\n  return {\n    target: transfer.target,\n    calldata,\n    replacementPattern,\n  };\n};\n\n// \"metadata\": {\n//     \"asset\": {\n//         \"id\": \"5934\",\n//         \"address\": \"0x66fca7555cd481545a5e66ba9a2bec1e256f98e7\"\n//     },\n//     \"schema\": \"ERC721\"\n// },\nfunction getOrderHash(order) {\n  const orderWithStringTypes = {\n    ...order,\n    maker: order.maker.toLowerCase(),\n    taker: order.taker.toLowerCase(),\n    feeRecipient: order.feeRecipient.toLowerCase(),\n    side: order.side.toString(),\n    saleKind: order.saleKind.toString(),\n    howToCall: order.howToCall.toString(),\n    feeMethod: order.feeMethod.toString(),\n    makerRelayerFee: 250.0.toFixed(),\n    takerRelayerFee: 0.0.toFixed(),\n    basePrice: 0.0.toFixed(),\n    extra: 0.0.toFixed()\n  };\n  return WyvernProtocol.getOrderHashHex(orderWithStringTypes);\n}\nfunction makeMatchingOrder({\n  order,\n  accountAddress,\n  recipientAddress,\n  platform,\n}) {\n  accountAddress = accountAddress.toLowerCase();\n  recipientAddress = recipientAddress.toLowerCase();\n  const computeOrderParams = () => {\n    const shouldValidate = order.target === merkleValidatorByNetwork.main;\n    if (\"asset\" in order.metadata) {\n      const schema = ERC721Schema; // currently supporting ERC721 only\n      return order.side == 0\n        ? encodeSell(\n            schema,\n            order.metadata.asset,\n            recipientAddress,\n            shouldValidate ? order.target : undefined\n          )\n        : encodeBuy(\n            schema,\n            order.metadata.asset,\n            recipientAddress,\n            shouldValidate ? order.target : undefined\n          );\n    } else {\n      throw new Error(\"Invalid order metadata\");\n    }\n  };\n\n  const { target, calldata, replacementPattern } = computeOrderParams();\n  const times = _getTimeParameters(0);\n  // Compat for matching buy orders that have fee recipient still on them\n  const feeRecipient =\n    order.feeRecipient == WyvernProtocol.NULL_ADDRESS\n      ? platform == PlatformType.Opensea\n        ? OPENSEA_FEE_RECIPIENT\n        : GOLOM_FEE_RECIPIENT\n      : WyvernProtocol.NULL_ADDRESS;\n  const matchingOrder = {\n    exchange: order.exchange,\n    maker: accountAddress,\n    taker: order.maker,\n    quantity: order.quantity,\n    makerRelayerFee: order.makerRelayerFee,\n    takerRelayerFee: order.takerRelayerFee,\n    makerProtocolFee: order.makerProtocolFee,\n    takerProtocolFee: order.takerProtocolFee,\n    makerReferrerFee: order.makerReferrerFee,\n    waitingForBestCounterOrder: false,\n    feeMethod: order.feeMethod,\n    feeRecipient,\n    side: (order.side + 1) % 2,\n    saleKind: 0, // 0 fixed price 1 ducch aucion\n    target,\n    howToCall: order.howToCall,\n    calldata,\n    replacementPattern,\n    staticTarget: WyvernProtocol.NULL_ADDRESS,\n    staticExtradata: \"0x\",\n    paymentToken: order.paymentToken,\n    basePrice: order.basePrice,\n    extra: BigNumber(0),\n    listingTime: times.listingTime,\n    expirationTime: times.expirationTime,\n    salt: WyvernProtocol.generatePseudoRandomSalt(),\n    metadata: order.metadata,\n  };\n\n  return matchingOrder;\n}\nfunction assignOrdersToSides(order, matchingOrder) {\n  const isSellOrder = order.side == 1;\n\n  let buy;\n  let sell;\n  if (!isSellOrder) {\n    buy = order;\n    sell = {\n      ...matchingOrder,\n      v: buy.v,\n      r: buy.r,\n      s: buy.s,\n    };\n  } else {\n    sell = order;\n    buy = {\n      ...matchingOrder,\n      v: sell.v,\n      r: sell.r,\n      s: sell.s,\n    };\n  }\n\n  return { buy, sell };\n}\nconst _getMetadata = (order, referrerAddress) => {\n  const referrer = referrerAddress || order.metadata.referrerAddress;\n  if (referrer && isValidAddress(referrer)) {\n    return `0x000000000000000000000000${referrer.substr(2)}`;\n  }\n  return undefined;\n};\nconst _correctGasAmount = (estimation) => {\n  return Math.ceil(estimation * 1.01);\n};\nfunction _getWyvernProtocolForOrder(order, useReadOnly) {\n  if (\n    order.exchange ===\n    wyvern2_2ConfigByNetwork.main.wyvernExchangeContractAddress\n  ) {\n    return useReadOnly\n      ? this._wyvern2_2ProtocolReadOnly\n      : this._wyvern2_2Protocol;\n  }\n  return useReadOnly ? this._wyvernProtocolReadOnly : this._wyvernProtocol;\n}\n/**\n * Gets the price for the order using the contract\n * @param order The order to calculate the price for\n */\nasync function getCurrentPrice(order, wyvernExchange) {\n  const currentPrice = await wyvernExchange.methods\n    .calculateCurrentPrice_(\n      [\n        order.exchange,\n        order.maker,\n        order.taker,\n        order.feeRecipient,\n        order.target,\n        order.staticTarget,\n        order.paymentToken,\n      ],\n      [\n        order.makerRelayerFee.toFixed(),\n        order.takerRelayerFee.toFixed(),\n        order.makerProtocolFee.toFixed(),\n        order.takerProtocolFee.toFixed(),\n        order.basePrice.toFixed(),\n        order.extra.toFixed(),\n        order.listingTime.toFixed(),\n        order.expirationTime.toFixed(),\n        order.salt.toFixed(),\n      ],\n      order.feeMethod,\n      order.side,\n      order.saleKind,\n      order.howToCall,\n      order.calldata,\n      order.replacementPattern,\n      order.staticExtradata\n    )\n    .call();\n  return currentPrice;\n}\n/**\n * Estimates the price of an order\n * @param order The order to estimate price on\n * @param secondsToBacktrack The number of seconds to subtract on current time,\n *  to fix race conditions\n * @param shouldRoundUp Whether to round up fractional wei\n */\nexport function estimateCurrentPrice(\n  order,\n  secondsToBacktrack = 30,\n  shouldRoundUp = false\n) {\n  // round up should be enabled\n  let { basePrice, listingTime, expirationTime, extra } = order;\n  const { side, takerRelayerFee, saleKind } = order;\n\n  const now = new BigNumber(Math.round(Date.now() / 1000)).minus(\n    secondsToBacktrack\n  );\n  basePrice = new BigNumber(basePrice);\n  listingTime = new BigNumber(listingTime);\n  expirationTime = new BigNumber(expirationTime);\n  extra = new BigNumber(extra);\n\n  let exactPrice = basePrice;\n  // saleKind 0 : Fixed price 1: Duction acution\n  if (saleKind === 0) {\n    // Do nothing, price is correct\n  } else if (saleKind === 1) {\n    const diff = extra\n      .times(now.minus(listingTime))\n      .dividedBy(expirationTime.minus(listingTime));\n    // side 0 : buy 1: sell\n    exactPrice =\n      side == 1\n        ? /* Sell-side - start price: basePrice. End price: basePrice - extra. */\n          basePrice.minus(diff)\n        : /* Buy-side - start price: basePrice. End price: basePrice + extra. */\n          basePrice.plus(diff);\n  }\n\n  // Add taker fee only for buyers\n  if (side === 1 && !order.waitingForBestCounterOrder) {\n    // Buyer fee increases sale price\n    exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1);\n  }\n  return shouldRoundUp ? exactPrice.ceil() : exactPrice;\n}\nasync function _getRequiredAmountForTakingSellOrder(sell, wyvernExchange) {\n  const currentPrice = await getCurrentPrice(sell, wyvernExchange);\n  const estimatedPrice = estimateCurrentPrice(sell);\n\n  const maxPrice = BigNumber.max(currentPrice, estimatedPrice);\n\n  // TODO Why is this not always a big number?\n  sell.takerRelayerFee = BigNumber(sell.takerRelayerFee);\n  const feePercentage = sell.takerRelayerFee.div(INVERSE_BASIS_POINT);\n  const fee = feePercentage.times(maxPrice);\n  return fee.plus(maxPrice); // use .ceil()\n}\n\nasync function _atomicMatch({\n  buy,\n  sell,\n  accountAddress,\n  wyvernExchange,\n  metadata = NULL_BLOCK_HASH,\n}) {\n  let value;\n\n  if (buy.paymentToken == WyvernProtocol.NULL_ADDRESS) {\n    value = await _getRequiredAmountForTakingSellOrder(sell, wyvernExchange);\n  }\n\n  const txnData = { from: accountAddress, value };\n\n  const args = [\n    [\n      buy.exchange,\n      buy.maker,\n      buy.taker,\n      buy.feeRecipient,\n      buy.target,\n      buy.staticTarget,\n      buy.paymentToken,\n      sell.exchange,\n      sell.maker,\n      sell.taker,\n      sell.feeRecipient,\n      sell.target,\n      sell.staticTarget,\n      sell.paymentToken,\n    ],\n    [\n      250.0.toString(),\n      0.0.toString(),\n      buy.makerProtocolFee.toString(),\n      buy.takerProtocolFee.toString(),\n      0.0.toString(),\n      buy.extra.toString(),\n      buy.listingTime.toString(),\n      buy.expirationTime.toString(),\n      buy.salt.toString(),\n      250.0.toString(),\n      0.0.toString(),\n      sell.makerProtocolFee.toString(),\n      sell.takerProtocolFee.toString(),\n      0.0.toString(),\n      0.0.toString(),\n      sell.listingTime.toString(),\n      sell.expirationTime.toString(),\n      sell.salt.toString(),\n    ],\n    [\n      buy.feeMethod,\n      buy.side,\n      buy.saleKind,\n      buy.howToCall,\n      sell.feeMethod,\n      sell.side,\n      sell.saleKind,\n      sell.howToCall,\n    ],\n    buy.calldata,\n    sell.calldata,\n    buy.replacementPattern,\n    sell.replacementPattern,\n    buy.staticExtradata,\n    sell.staticExtradata,\n    [buy.v || 0, sell.v || 0],\n    [\n      buy.r || NULL_BLOCK_HASH,\n      buy.s || NULL_BLOCK_HASH,\n      sell.r || NULL_BLOCK_HASH,\n      sell.s || NULL_BLOCK_HASH,\n      metadata,\n    ]\n  ];\n\n  // const gasEstimate = await wyvernExchange.functions.estimateGasAsync(txnData);\n\n  // txnData.gas = _correctGasAmount(gasEstimate);\n\n  console.log(wyvernExchange)\n  const atomicMatchMethod = wyvernExchange.functions.atomicMatch_(\n    args[0],\n    args[1],\n    args[2],\n    args[3],\n    args[4],\n    args[5],\n    args[6],\n    args[7],\n    args[8],\n    args[9],\n    args[10],\n    txnData\n  ).then(res => {\n    console.log(res)\n  });\n  \n  return { atomicMatchMethod, txnData };\n}\nconst jsonToOrder = (golomOrder) => {\n  // console.log(order, golomOrder);\n\n  const { data, tokenId, contractAddress, created } = golomOrder;\n  const createdDate = new Date(`${created}`);\n\n  const metadata = {\n    asset: {\n      id: String(tokenId),\n      address: contractAddress,\n    },\n    schema: \"ERC721\",\n  };\n  const fromJSON = {\n    ...data,\n    metadata,\n    quantity: new BigNumber(1),\n    makerRelayerFee: new BigNumber(data.makerRelayerFee),\n    takerRelayerFee: new BigNumber(data.takerRelayerFee),\n    makerProtocolFee: new BigNumber(data.makerProtocolFee),\n    takerProtocolFee: new BigNumber(data.takerProtocolFee),\n    makerReferrerFee: new BigNumber(data.makerReferrerFee),\n    waitingForBestCounterOrder: data.feeRecipient == WyvernProtocol.NULL_ADDRESS,\n    basePrice: new BigNumber(data.basePrice),\n    extra: new BigNumber(data.extra),\n    currentBounty: new BigNumber(0),\n    currentPrice: new BigNumber(0),\n\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(data.listingTime),\n    expirationTime: new BigNumber(data.expirationTime),\n    salt: new BigNumber(data.salt),\n    v: parseInt(data.v),\n    paymentTokenContract: data.payment_token_contract\n      ? tokenFromJSON(data.payment_token_contract)\n      : undefined,\n  };\n\n  // Use client-side price calc, to account for buyer fee (not added by server) and latency\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\n\nasync function fulfillOrder({\n  order,\n  provider,\n  accountAddress,\n  recipientAddress,\n  referrerAddress,\n  platform = PlatformType.Opensea,\n}) {\n  console.info(\n    `Account: ${accountAddress} | Recipient: ${recipientAddress} | Referrer: ${referrerAddress}`\n  );\n  // check if valid order\n  // order = jsonToOrder(order);\n  const wyvernExchange = WyvernContract(provider);\n  const isValid = await validateOrder({\n    order,\n    accountAddress,\n    wyvernExchange,\n  });\n  const matchingOrder = makeMatchingOrder({\n    order,\n    accountAddress,\n    recipientAddress: recipientAddress,\n    platform,\n  });\n  const { buy, sell } = assignOrdersToSides(order, matchingOrder);\n  const metadata = _getMetadata(order, referrerAddress);\n  return await _atomicMatch({\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata,\n  });\n}\n\nfunction getWyvernAsset(schema, asset, quantity = new BigNumber(1)) {\n  const tokenId = asset.tokenId != null ? asset.tokenId.toString() : undefined;\n  return schema.assetFromFields({\n    ID: tokenId,\n    Quantity: quantity.toString(),\n    Address: asset.tokenAddress.toLowerCase(),\n    Name: asset.name,\n  });\n}\nasync function computeFees({\n  asset,\n  side,\n  accountAddress,\n  platform,\n  extraBountyBasisPoints = 0,\n}) {\n  let openseaBuyerFeeBasisPoints = DEFAULT_BUYER_FEE_BASIS_POINTS;\n  let openseaSellerFeeBasisPoints = DEFAULT_SELLER_FEE_BASIS_POINTS;\n  let devBuyerFeeBasisPoints = 0;\n  let devSellerFeeBasisPoints = 0;\n  let transferFee = new BigNumber(0);\n  let transferFeeTokenAddress = null;\n  let maxTotalBountyBPS = DEFAULT_MAX_BOUNTY;\n\n  if (asset && platform == PlatformType.Opensea) {\n    openseaBuyerFeeBasisPoints = +asset.openseaBuyerFeeBasisPoints;\n    openseaSellerFeeBasisPoints = +asset.openseaSellerFeeBasisPoints;\n    devBuyerFeeBasisPoints = +asset.devBuyerFeeBasisPoints;\n    devSellerFeeBasisPoints = +asset.devSellerFeeBasisPoints;\n    maxTotalBountyBPS = openseaSellerFeeBasisPoints;\n  }\n\n  // Compute transferFrom fees\n  if (side == 1 && asset && platform == PlatformType.Opensea) {\n    // Server-side knowledge\n    // transferFee = asset.transferFee ? new BigNumber(asset.transferFee) : transferFee;\n    // transferFeeTokenAddress = asset.transferFeePaymentToken\n    //   ? asset.transferFeePaymentToken.address\n    //   : transferFeeTokenAddress;\n  }\n\n  // Compute bounty\n  const sellerBountyBasisPoints = side == 1 ? extraBountyBasisPoints : 0;\n\n  // Check that bounty is in range of the opensea fee\n  const bountyTooLarge =\n    sellerBountyBasisPoints + OPENSEA_SELLER_BOUNTY_BASIS_POINTS >\n    maxTotalBountyBPS;\n  if (sellerBountyBasisPoints > 0 && bountyTooLarge) {\n    let errorMessage = `Total bounty exceeds the maximum for this asset type (${\n      maxTotalBountyBPS / 100\n    }%).`;\n    if (maxTotalBountyBPS >= OPENSEA_SELLER_BOUNTY_BASIS_POINTS) {\n      errorMessage += ` Remember that OpenSea will add ${\n        OPENSEA_SELLER_BOUNTY_BASIS_POINTS / 100\n      }% for referrers with OpenSea accounts!`;\n    }\n    throw new Error(errorMessage);\n  }\n\n  return {\n    totalBuyerFeeBasisPoints:\n      openseaBuyerFeeBasisPoints + devBuyerFeeBasisPoints,\n    totalSellerFeeBasisPoints:\n      openseaSellerFeeBasisPoints + devSellerFeeBasisPoints,\n    openseaBuyerFeeBasisPoints,\n    openseaSellerFeeBasisPoints,\n    devBuyerFeeBasisPoints,\n    devSellerFeeBasisPoints,\n    sellerBountyBasisPoints,\n    transferFee,\n    transferFeeTokenAddress,\n  };\n}\n\n/**\n * Compute the `basePrice` and `extra` parameters to be used to price an order.\n * Also validates the expiration time and auction type.\n * @param tokenAddress Address of the ERC-20 token to use for trading.\n * Use the null address for ETH\n * @param expirationTime When the auction expires, or 0 if never.\n * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)\n * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei). If unspecified, the order's `extra` attribute will be 0\n */\nasync function _getPriceParameters(\n  orderSide,\n  tokenAddress,\n  expirationTime,\n  startAmount,\n  endAmount,\n  waitingForBestCounterOrder = false,\n  englishAuctionReservePrice\n) {\n  const priceDiff = endAmount != null ? startAmount - endAmount : 0;\n  const paymentToken = tokenAddress.toLowerCase();\n  // const isEther = tokenAddress == WyvernProtocol.NULL_ADDRESS;\n  // const { tokens } = await this.api.getPaymentTokens({ address: paymentToken });\n  // const token = tokens[0];\n\n  // Note: WyvernProtocol.toBaseUnitAmount(makeBigNumber(startAmount), token.decimals)\n  // will fail if too many decimal places, so special-case ether\n  // const basePrice = isEther\n  //   ? new BigNumber(parseEther(startAmount)).round()\n  //   : WyvernProtocol.toBaseUnitAmount(new BigNumber(startAmount), token.decimals);\n  const basePrice = new BigNumber(parseEther(String(startAmount)));\n  // const extra = isEther\n  //   ? new BigNumber(parseEther(priceDiff)).decimalPlaces()\n  //   : WyvernProtocol.toBaseUnitAmount(new BigNumber(priceDiff), token.decimals);\n  // console.log(basePrice, priceDiff);\n  const extra = new BigNumber(parseEther(String(priceDiff)));\n  // const reservePrice = englishAuctionReservePrice\n  //   ? isEther\n  //     ? new BigNumber(parseEther(englishAuctionReservePrice))\n  //     : WyvernProtocol.toBaseUnitAmount(new BigNumber(englishAuctionReservePrice), token.decimals)\n  //   : undefined;\n  const reservePrice = englishAuctionReservePrice\n    ? new BigNumber(parseEther(englishAuctionReservePrice))\n    : undefined;\n\n  return { basePrice, extra, paymentToken, reservePrice };\n}\nfunction _validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints) {\n  const maxFeePercent = INVERSE_BASIS_POINT / 100;\n\n  if (\n    totalBuyerFeeBasisPoints > INVERSE_BASIS_POINT ||\n    totalSellerFeeBasisPoints > INVERSE_BASIS_POINT\n  ) {\n    throw new Error(\n      `Invalid buyer/seller fees: must be less than ${maxFeePercent}%`\n    );\n  }\n\n  if (totalBuyerFeeBasisPoints < 0 || totalSellerFeeBasisPoints < 0) {\n    throw new Error(`Invalid buyer/seller fees: must be at least 0%`);\n  }\n}\nfunction _getSellFeeParameters(\n  totalBuyerFeeBasisPoints,\n  totalSellerFeeBasisPoints,\n  waitForHighestBid,\n  sellerBountyBasisPoints = 0,\n  platform\n) {\n  // just making basic check if fee is less than 100% and not negative\n  _validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints);\n  // Use buyer as the maker when it's an English auction, so Wyvern sets prices correctly\n  const feeRecipient = waitForHighestBid ? WyvernProtocol.NULL_ADDRESS : OPENSEA_FEE_RECIPIENT;\n\n  // Swap maker/taker fees when it's an English auction,\n  // since these sell orders are takers not makers\n  const makerRelayerFee = waitForHighestBid\n    ? new BigNumber(totalBuyerFeeBasisPoints)\n    : new BigNumber(totalSellerFeeBasisPoints);\n  const takerRelayerFee = waitForHighestBid\n    ? new BigNumber(totalSellerFeeBasisPoints)\n    : new BigNumber(totalBuyerFeeBasisPoints);\n\n  return {\n    makerRelayerFee,\n    takerRelayerFee,\n    makerProtocolFee: new BigNumber(0),\n    takerProtocolFee: new BigNumber(0),\n    makerReferrerFee: new BigNumber(sellerBountyBasisPoints),\n    feeRecipient,\n    feeMethod: 1, // 0 protocol fee ,1 split fee\n  };\n}\nconst StaticCheckTxOrigin = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"succeedIfTxOriginMatchesHardcodedAddress\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"_specifiedAddress\", type: \"address\" }],\n    name: \"succeedIfTxOriginMatchesSpecifiedAddress\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"isOwner\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_newHardcodedAddress\", type: \"address\" }],\n    name: \"changeHardcodedAddress\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"newOwner\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ name: \"_hardcodedAddress\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: \"previousOwner\", type: \"address\" },\n      { indexed: false, name: \"newOwner\", type: \"address\" },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n];\n\nexport const getMethod = (abi, name) => {\n  const methodAbi = abi.find((x) => x.type == \"function\" && x.name == name);\n  if (!methodAbi) {\n    throw new Error(`ABI ${name} not found`);\n  }\n  // Have to cast since there's a bug in\n  // web3 types on the 'type' field\n  return methodAbi;\n};\nasync function _getStaticCallTargetAndExtraData({ useTxnOriginStaticCall }) {\n  if (!useTxnOriginStaticCall) {\n    // While testing, we will use dummy values for mainnet. We will remove this if-statement once we have pushed the PR once and tested on Rinkeby\n    return {\n      staticTarget: WyvernProtocol.NULL_ADDRESS,\n      staticExtradata: \"0x\",\n    };\n  }\n\n  if (useTxnOriginStaticCall) {\n    return {\n      staticTarget: STATIC_CALL_TX_ORIGIN_ADDRESS,\n      staticExtradata: encodeCall(\n        getMethod(\n          StaticCheckTxOrigin,\n          \"succeedIfTxOriginMatchesHardcodedAddress\"\n        ),\n        []\n      ),\n    };\n  } else {\n    // Noop - no checks\n    return {\n      staticTarget: WyvernProtocol.NULL_ADDRESS,\n      staticExtradata: \"0x\",\n    };\n  }\n}\nexport const assetContractFromJSON = (assetContract) => {\n  return {\n    name: assetContract.name,\n    description: assetContract.description,\n    type: assetContract.assetContract_type,\n    schemaName: assetContract.schema_name,\n    address: assetContract.address,\n    tokenSymbol: assetContract.symbol,\n    buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n    sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n    openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n    imageUrl: assetContract.image_url,\n    externalLink: assetContract.external_link,\n    wikiLink: assetContract.wiki_link,\n  };\n};\nexport const collectionFromJSON = (collection) => {\n  const createdDate = new Date(`${collection.created_date}Z`);\n\n  return {\n    createdDate,\n    name: collection.name,\n    description: collection.description,\n    slug: collection.slug,\n    editors: collection.editors,\n    hidden: collection.hidden,\n    featured: collection.featured,\n    featuredImageUrl: collection.featured_image_url,\n    displayData: collection.display_data,\n    paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n    openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n    payoutAddress: collection.payout_address,\n    imageUrl: collection.image_url,\n    largeImageUrl: collection.large_image_url,\n    stats: collection.stats,\n    traitStats: collection.traits,\n    externalLink: collection.external_url,\n    wikiLink: collection.wiki_url,\n  };\n};\nexport const userFromJSON = (user) => {\n  return {\n    username: user.username,\n  };\n};\n\nexport const accountFromJSON = (account) => {\n  return {\n    address: account.address,\n    config: account.config,\n    profileImgUrl: account.profile_img_url,\n    user: account.user ? userFromJSON(account.user) : null,\n  };\n};\nexport const transactionFromJSON = (transaction) => {\n  return {\n    fromAccount: accountFromJSON(transaction.from_account),\n    toAccount: accountFromJSON(transaction.to_account),\n    createdDate: new Date(`${transaction.created_date}Z`),\n    modifiedDate: new Date(`${transaction.modified_date}Z`),\n    transactionHash: transaction.transaction_hash,\n    transactionIndex: transaction.transaction_index,\n    blockNumber: transaction.block_number,\n    blockHash: transaction.block_hash,\n    timestamp: new Date(`${transaction.timestamp}Z`),\n  };\n};\n\nexport const assetEventFromJSON = (assetEvent) => {\n  return {\n    eventType: assetEvent.event_type,\n    eventTimestamp: assetEvent.event_timestamp,\n    auctionType: assetEvent.auction_type,\n    totalPrice: assetEvent.total_price,\n    transaction: assetEvent.transaction\n      ? transactionFromJSON(assetEvent.transaction)\n      : null,\n    paymentToken: assetEvent.payment_token\n      ? tokenFromJSON(assetEvent.payment_token)\n      : null,\n  };\n};\n\nexport const assetFromJSON = (asset) => {\n  const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n  const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n  const fromJSON = {\n    tokenId: asset.token_id.toString(),\n    tokenAddress: asset.asset_contract.address,\n    name: asset.name,\n    description: asset.description,\n    owner: asset.owner,\n    assetContract: assetContractFromJSON(asset.asset_contract),\n    collection: collectionFromJSON(asset.collection),\n    orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n    sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n    buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n\n    isPresale: asset.is_presale,\n    // Don't use previews if it's a special image\n    imageUrl:\n      isAnimated || isSvg\n        ? asset.image_url\n        : asset.image_preview_url || asset.image_url,\n    imagePreviewUrl: asset.image_preview_url,\n    imageUrlOriginal: asset.image_original_url,\n    imageUrlThumbnail: asset.image_thumbnail_url,\n\n    externalLink: asset.external_link,\n    openseaLink: asset.permalink,\n    traits: asset.traits,\n    numSales: asset.num_sales,\n    lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n    backgroundColor: asset.background_color\n      ? `#${asset.background_color}`\n      : null,\n\n    transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n    transferFeePaymentToken: asset.transfer_fee_payment_token\n      ? tokenFromJSON(asset.transfer_fee_payment_token)\n      : null,\n  };\n  // If orders were included, put them in sell/buy order groups\n  if (fromJSON.orders && !fromJSON.sellOrders) {\n    fromJSON.sellOrders = fromJSON.orders.filter((o) => o.side == 1);\n  }\n  if (fromJSON.orders && !fromJSON.buyOrders) {\n    fromJSON.buyOrders = fromJSON.orders.filter((o) => o.side == 0);\n  }\n  return fromJSON;\n};\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\nasync function getAsset({ tokenAddress, tokenId }) {\n  const { data } = await axios(\n    `${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`\n  );\n  return assetFromJSON(data);\n}\nasync function _makeSellOrder({\n  asset,\n  quantity,\n  accountAddress,\n  startAmount,\n  endAmount,\n  listingTime,\n  expirationTime,\n  waitForHighestBid,\n  englishAuctionReservePrice = 0,\n  paymentTokenAddress,\n  extraBountyBasisPoints, // this is for extra fee\n  buyerAddress,\n  platform,\n  openSeaAsset, // holds fee\n}) {\n  accountAddress = accountAddress.toLowerCase();\n  const schema = ERC721Schema; // currently supporting ERC721 only\n  const quantityBN = new BigNumber(1);\n  const wyAsset = getWyvernAsset(schema, asset, quantityBN);\n\n  let totalSellerFeeBasisPoints = GOLOM_DEFAULT_FEES; // in bps\n  if (asset.tokenAddress == \"0xf07468ead8cf26c752c676e43c814fee9c8cf402\") {\n    totalSellerFeeBasisPoints = 0;\n  }\n  let totalBuyerFeeBasisPoints = 0;\n  let sellerBountyBasisPoints = 0;\n  // TODO: No need to fetch asset again we can use values from _token.vue directly\n  if (platform == PlatformType.Opensea) {\n    // { totalSellerFeeBasisPoints, totalBuyerFeeBasisPoints, sellerBountyBasisPoints }\n    const fees = await computeFees({\n      asset: openSeaAsset,\n      side: 1,\n      extraBountyBasisPoints,\n      platform,\n    }); // 1 for sell 0 for buy\n    totalSellerFeeBasisPoints = fees.totalSellerFeeBasisPoints;\n    totalBuyerFeeBasisPoints = fees.totalBuyerFeeBasisPoints;\n    sellerBountyBasisPoints = fees.sellerBountyBasisPoints;\n  }\n\n  const { target, calldata, replacementPattern } = encodeSell(\n    schema,\n    wyAsset,\n    accountAddress,\n    // waitForHighestBid ? undefined : merkleValidatorByNetwork.main\n    merkleValidatorByNetwork.main\n  );\n  console.log(endAmount);\n  \n  const orderSaleKind = endAmount != null && endAmount !== startAmount ? 1 : 0; // 0 fixed price 1 ducch aucion\n\n  const { basePrice, extra, paymentToken, reservePrice } =\n    await _getPriceParameters(\n      1,\n      paymentTokenAddress,\n      expirationTime,\n      startAmount,\n      endAmount,\n      waitForHighestBid,\n      englishAuctionReservePrice\n    );\n\n  const times = _getTimeParameters(\n    expirationTime,\n    listingTime,\n    waitForHighestBid\n  );\n\n  let {\n    makerRelayerFee,\n    takerRelayerFee,\n    makerProtocolFee,\n    takerProtocolFee,\n    makerReferrerFee,\n    feeRecipient,\n    feeMethod,\n  } = _getSellFeeParameters(\n    totalBuyerFeeBasisPoints,\n    totalSellerFeeBasisPoints,\n    waitForHighestBid,\n    sellerBountyBasisPoints\n  );\n  if (platform != PlatformType.Opensea) {\n    feeRecipient = GOLOM_FEE_RECIPIENT;\n  }\n\n  const { staticTarget, staticExtradata } =\n    await _getStaticCallTargetAndExtraData({\n      useTxnOriginStaticCall: waitForHighestBid,\n    });\n\n  return {\n    exchange: WYVERN_CONTRACT,\n    maker: accountAddress,\n    taker: buyerAddress, // for private listing\n    quantity: quantityBN,\n    makerRelayerFee,\n    takerRelayerFee,\n    makerProtocolFee,\n    takerProtocolFee,\n    makerReferrerFee,\n    waitingForBestCounterOrder: waitForHighestBid,\n    englishAuctionReservePrice: reservePrice\n      ? new BigNumber(reservePrice)\n      : undefined,\n    feeMethod,\n    feeRecipient,\n    side: 1,\n    saleKind: orderSaleKind,\n    target,\n    howToCall:\n      target === merkleValidatorByNetwork.main\n        ? HowToCall.DelegateCall\n        : HowToCall.Call,\n    calldata,\n    replacementPattern,\n    staticTarget,\n    staticExtradata,\n    paymentToken,\n    basePrice,\n    extra,\n    listingTime: times.listingTime,\n    expirationTime: times.expirationTime,\n    salt: WyvernProtocol.generatePseudoRandomSalt(),\n    metadata: {\n      asset: wyAsset,\n      schema: schema.name,\n    }\n  };\n}\nasync function validateOrderParams({ order, accountAddress, wyvernExchange }) {\n  // Check sell parameters\n\n  const sellValid = await wyvernExchange.functions\n  .validateOrderParameters_(\n      [\n        order.exchange,\n        order.maker,\n        order.taker,\n        order.feeRecipient,\n        order.target,\n        order.staticTarget,\n        order.paymentToken,\n      ],\n      [\n        0.001.toFixed(),\n        0.001.toFixed(),\n        order.makerProtocolFee.toFixed(),\n        order.takerProtocolFee.toFixed(),\n        0.0.toFixed(),\n        0.0.toFixed(),\n        order.listingTime.toFixed(),\n        order.expirationTime.toFixed(),\n        order.salt.toFixed(),\n      ],\n      order.feeMethod,\n      order.side,\n      order.saleKind,\n      order.howToCall,\n      order.calldata,\n      order.replacementPattern,\n      order.staticExtradata\n    );\n    // .call({ from: accountAddress });\n\n  if (!sellValid) {\n    console.error(order);\n    throw new Error(\n      `Failed to validate sell order parameters. Make sure you're on the right network!`\n    );\n  }\n  return sellValid;\n}\nasync function validateOrder({ order, accountAddress, wyvernExchange }) {\n  // Check sell parameters\n\n  const sellValid = await wyvernExchange.functions\n    .validateOrder_(\n      [\n        order.exchange,\n        order.maker,\n        order.taker,\n        order.feeRecipient,\n        order.target,\n        order.staticTarget,\n        order.paymentToken,\n      ],\n      [\n        250.0.toFixed(),\n        0.0.toFixed(),\n        order.makerProtocolFee,\n        order.takerProtocolFee,\n        0.0.toFixed(),\n        0.0.toFixed(),\n        order.listingTime,\n        order.expirationTime,\n        order.salt,\n      ],\n      order.feeMethod,\n      order.side,\n      order.saleKind,\n      order.howToCall,\n      order.calldata,\n      order.replacementPattern,\n      order.staticExtradata,\n      order.v,\n      order.r,\n      order.s\n    );\n    // .call({ from: accountAddress });\n  if (!sellValid) {\n    // eslint-disable-next-line no-throw-literal\n    throw {\n      message: new Error(\n        `Failed to validate sell order parameters. It looks like this listing is invalid.`\n      ),\n      code: \"InvalidOrder\",\n    };\n    // TODO: call order invalidate API\n  }\n  return sellValid;\n}\n// sourced from 0x.js:\n// https://github.com/ProjectWyvern/wyvern-js/blob/39999cb93ce5d80ea90b4382182d1bd4339a9c6c/src/utils/signature_utils.ts\nasync function parseSignatureHex(signature) {\n  // HACK: There is no consensus on whether the signatureHex string should be formatted as\n  // v + r + s OR r + s + v, and different clients (even different versions of the same client)\n  // return the signature params in different orders. In order to support all client implementations,\n  // we parse the signature in both ways, and evaluate if either one is a valid signature.\n  const validVParamValues = [27, 28];\n\n  const ecSignatureRSV = _parseSignatureHexAsRSV(signature);\n  if (_.includes(validVParamValues, ecSignatureRSV.v)) {\n    return ecSignatureRSV;\n  }\n\n  // For older clients\n  const ecSignatureVRS = _parseSignatureHexAsVRS(signature);\n  if (_.includes(validVParamValues, ecSignatureVRS.v)) {\n    return ecSignatureVRS;\n  }\n\n  throw new Error(\"Invalid signature\");\n\n  function _parseSignatureHexAsVRS(signatureHex) {\n    const signatureBuffer = ethUtil.toBuffer(signatureHex);\n    let v = signatureBuffer[0];\n    if (v < 27) {\n      v += 27;\n    }\n    const r = signatureBuffer.slice(1, 33);\n    const s = signatureBuffer.slice(33, 65);\n    const ecSignature = {\n      v,\n      r: ethUtil.bufferToHex(r),\n      s: ethUtil.bufferToHex(s),\n    };\n    return ecSignature;\n  }\n\n  function _parseSignatureHexAsRSV(signatureHex) {\n    const { v, r, s } = ethUtil.fromRpcSig(signatureHex);\n    const ecSignature = {\n      v,\n      r: ethUtil.bufferToHex(r),\n      s: ethUtil.bufferToHex(s),\n    };\n    return ecSignature;\n  }\n}\nasync function personalSignAsync(provider, message, signerAddress) {\n  return new Promise((resolve, reject) => {\n    const callback = async (err, signature) => {\n      if (err) reject(err);\n\n      if (signature.error) {\n        reject(signature.error.message);\n      }\n      resolve(parseSignatureHex(signature.result));\n      // // console.log(result);\n      // const d = signature.result;\n      // let v = d.slice(-2);\n      // let r = d.slice(2, -66);\n      // let s = d.slice(-66, -2);\n\n      // let actualsignature = v + r + s + '03';\n\n      // // const dhs = await this.contractInstace.methods\n      // //   .setApprovalForAll(OPERATOR_ADDRESS, true)\n      // //   .send({ from: this.metamask.metaMaskAddress });\n      // resolve(`0x${actualsignature}`);\n    };\n    // console.log(orderHex, metaMaskAddress);\n    provider.sendAsync(\n      {\n        method: \"personal_sign\",\n        params: [message, signerAddress],\n        from: signerAddress,\n      },\n      callback\n    );\n  });\n}\nexport async function signTypedDataAsync(provider, message, signerAddress) {\n  let signature;\n  console.log(signerAddress);\n  return new Promise((resolve, reject) => {\n    const callback = async (err, result) => {\n      console.log(err);\n      if (err) reject(err);\n      if (result.error) {\n        reject(result.error.message);\n      }\n      // eslint-disable-next-line prefer-promise-reject-errors\n      if (result.error) return reject(\"ERROR\", result);\n      // console.log(result);\n      // const d = result.result;\n\n      // let v = d.slice(-2);\n      // let r = d.slice(2, -66);\n      // let s = d.slice(-66, -2);\n\n      // let actualsignature = v + r + s + '03';\n      resolve(parseSignatureHex(result.result));\n    };\n    const stringified = JSON.stringify({ ...message });\n\n    try {\n      // Using sign typed data V4 works with a stringified message, used by browser providers i.e. Metamask\n      provider.sendAsync(\n        {\n          method: \"eth_signTypedData_v4\",\n          params: [signerAddress, stringified],\n          from: signerAddress,\n          id: new Date().getTime(),\n        },\n        callback\n      );\n    } catch (error) {\n      console.log(error);\n      // Fallback to normal sign typed data for node providers, without using stringified message\n      // https://github.com/coinbase/coinbase-wallet-sdk/issues/60\n      provider.sendAsync(\n        {\n          method: \"eth_signTypedData\",\n          params: [signerAddress, message],\n          from: signerAddress,\n          id: new Date().getTime(),\n        },\n        callback\n      );\n    }\n  });\n}\nasync function _authorizeOrder({ order, provider, nonce }) {\n  // 2.2 Sign order flow\n  const signerAddress = order.maker;\n  // console.log(order, nonce);\n  if (\n    order.exchange ===\n      wyvern2_2ConfigByNetwork.main.wyvernExchangeContractAddress &&\n    order.hash\n  ) {\n    const message = order.hash;\n    // v1\n    return await personalSignAsync(provider, message, signerAddress);\n  }\n  // 2.3 Sign order flow using EIP-712\n\n  // We need to manually specify each field because OS orders can contain unrelated data\n  const orderForSigning = {\n    maker: order.maker,\n    exchange: order.exchange,\n    taker: order.taker,\n    makerRelayerFee: order.makerRelayerFee.toString(),\n    takerRelayerFee: order.takerRelayerFee.toString(),\n    makerProtocolFee: order.makerProtocolFee.toString(),\n    takerProtocolFee: order.takerProtocolFee.toString(),\n    feeRecipient: order.feeRecipient,\n    feeMethod: order.feeMethod,\n    side: order.side,\n    saleKind: order.saleKind,\n    target: order.target,\n    howToCall: order.howToCall,\n    calldata: order.calldata,\n    replacementPattern: order.replacementPattern,\n    staticTarget: order.staticTarget,\n    staticExtradata: order.staticExtradata,\n    paymentToken: order.paymentToken,\n    basePrice: order.basePrice.toString(),\n    extra: order.extra.toString(),\n    listingTime: order.listingTime.toString(),\n    expirationTime: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n  };\n\n  // We don't JSON.stringify as certain wallet providers sanitize this data\n  // https://github.com/coinbase/coinbase-wallet-sdk/issues/60\n  const message = {\n    types: OrderTypesEIP712,\n    domain: {\n      name: WyvernDomainNameEIP712,\n      version: WyvernDomainVersionEIP712,\n      chainId: 1,\n      verifyingContract: order.exchange,\n    },\n    primaryType: \"Order\",\n    message: { ...orderForSigning, nonce },\n  };\n  const ecSignature = await signTypedDataAsync(\n    provider,\n    message,\n    signerAddress\n  );\n  return { ...ecSignature, nonce };\n}\n/**\n * Convert an order to JSON, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\nconst orderToJSON = (order) => {\n  const asJSON = {\n    exchange: order.exchange.toLowerCase(),\n    maker: order.maker.toLowerCase(),\n    taker: order.taker.toLowerCase(),\n    makerRelayerFee: order.makerRelayerFee.toString(),\n    takerRelayerFee: order.takerRelayerFee.toString(),\n    makerProtocolFee: order.makerProtocolFee.toString(),\n    takerProtocolFee: order.takerProtocolFee.toString(),\n    makerReferrerFee: order.makerReferrerFee.toString(),\n    feeMethod: order.feeMethod,\n    feeRecipient: order.feeRecipient.toLowerCase(),\n    side: order.side,\n    saleKind: order.saleKind,\n    target: order.target.toLowerCase(),\n    howToCall: order.howToCall,\n    calldata: order.calldata,\n    replacementPattern: order.replacementPattern,\n    staticTarget: order.staticTarget.toLowerCase(),\n    staticExtradata: order.staticExtradata,\n    paymentToken: order.paymentToken.toLowerCase(),\n    quantity: order.quantity.toString(),\n    basePrice: order.basePrice.toString(),\n    englishAuctionReservePrice: order.englishAuctionReservePrice\n      ? order.englishAuctionReservePrice.toString()\n      : undefined,\n    extra: order.extra.toString(),\n    createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n    listingTime: order.listingTime.toString(),\n    expirationTime: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n\n    metadata: order.metadata,\n\n    v: order.v,\n    r: order.r,\n    s: order.s,\n    nonce: order.nonce,\n  };\n  return asJSON;\n};\nasync function postOrder(order, retries = 2) {\n  try {\n    const { data } = await axios.post(\n      `https://api.opensea.io/wyvern/v1/orders/post/`,\n      order,\n      {\n        headers: {\n          \"x-api-key\": X_API_KEY,\n        },\n      }\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\nconst orderToGolomJSON = (order) => {\n  const asJSON = {\n    exchange: order.exchange.toLowerCase(),\n    maker: { address: order.maker.toLowerCase() },\n    taker: { address: order.taker.toLowerCase() },\n    maker_relayer_fee: order.makerRelayerFee.toString(),\n    taker_relayer_fee: order.takerRelayerFee.toString(),\n    maker_protocol_fee: order.makerProtocolFee.toString(),\n    taker_protocol_fee: order.takerProtocolFee.toString(),\n    makerReferrerFee: order.makerReferrerFee.toString(),\n    fee_method: order.feeMethod,\n    fee_recipient: { address: order.feeRecipient.toLowerCase() },\n    side: order.side,\n    sale_kind: order.saleKind,\n    target: order.target.toLowerCase(),\n    how_to_call: order.howToCall,\n    calldata: order.calldata,\n    replacement_pattern: order.replacementPattern,\n    static_target: order.staticTarget.toLowerCase(),\n    static_extradata: order.staticExtradata,\n    payment_token: order.paymentToken.toLowerCase(),\n    quantity: order.quantity.toString(),\n    base_price: order.basePrice.toString(),\n    englishAuctionReservePrice: order.englishAuctionReservePrice\n      ? order.englishAuctionReservePrice.toString()\n      : undefined,\n    extra: order.extra.toString(),\n    createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n    listing_time: order.listingTime.toString(),\n    expiration_time: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n    metadata: order.metadata,\n    v: order.v,\n    r: order.r,\n    s: order.s,\n    prefixed_hash: order.hash,\n  };\n  return asJSON;\n};\n/**\n * Validate and post an order to the OpenSea orderbook.\n * @param order The order to post. Can either be signed by the maker or pre-approved on the Wyvern contract using approveOrder. See https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/Exchange.sol#L178\n * @returns The order as stored by the orderbook\n */\nasync function validateAndPostOrder({ order, platform }) {\n  // Validation is called server-side\n\n  return platform == PlatformType.Opensea\n    ? orderToJSON(order)\n    : orderToGolomJSON(order);\n}\n\nfunction cancelOSOrder({ provider, order }) {\n  const wyvernExchange = WyvernContract(provider);\n  // const cancelHash = wyvernExchange.methods\n  //   .hashToSign_(\n  //     [\n  //       order.exchange,\n  //       order.maker,\n  //       order.taker,\n  //       order.feeRecipient,\n  //       order.target,\n  //       order.staticTarget,\n  //       order.paymentToken\n  //     ],\n  //     [\n  //       order.makerRelayerFee,\n  //       order.takerRelayerFee,\n  //       order.makerProtocolFee,\n  //       order.takerProtocolFee,\n  //       order.basePrice,\n  //       order.extra,\n  //       order.listingTime,\n  //       order.expirationTime,\n  //       order.salt\n  //     ],\n  //     order.feeMethod,\n  //     order.side,\n  //     order.saleKind,\n  //     order.howToCall,\n  //     order.calldata,\n  //     order.replacementPattern,\n  //     order.staticExtradata\n  //   )\n  //   .call();\n  // console.log(cancelHash);\n  return wyvernExchange.methods.cancelOrder_(\n    [\n      order.exchange,\n      order.maker,\n      order.taker,\n      order.feeRecipient,\n      order.target,\n      order.staticTarget,\n      order.paymentToken,\n    ],\n    [\n      order.makerRelayerFee,\n      order.takerRelayerFee,\n      order.makerProtocolFee,\n      order.takerProtocolFee,\n      order.basePrice,\n      order.extra,\n      order.listingTime,\n      order.expirationTime,\n      order.salt,\n    ],\n    order.feeMethod,\n    order.side,\n    order.saleKind,\n    order.howToCall,\n    order.calldata,\n    order.replacementPattern,\n    order.staticExtradata,\n    order.v || 0,\n    order.r || NULL_BLOCK_HASH,\n    order.s || NULL_BLOCK_HASH\n  );\n}\n\nasync function createSellOrder({\n  provider,\n  asset,\n  accountAddress,\n  startAmount,\n  endAmount,\n  quantity = 1,\n  listingTime,\n  expirationTime = 0,\n  waitForHighestBid = false,\n  englishAuctionReservePrice,\n  paymentTokenAddress,\n  extraBountyBasisPoints = 0,\n  buyerAddress,\n  fees,\n  platform = PlatformType.Opensea,\n  buyerEmail,\n}) {\n  const order = await _makeSellOrder({\n    asset,\n    quantity,\n    accountAddress,\n    startAmount,\n    endAmount,\n    listingTime,\n    expirationTime,\n    waitForHighestBid,\n    englishAuctionReservePrice,\n    paymentTokenAddress: paymentTokenAddress || WyvernProtocol.NULL_ADDRESS,\n    extraBountyBasisPoints,\n    platform,\n    openSeaAsset: fees,\n    buyerAddress: buyerAddress || WyvernProtocol.NULL_ADDRESS,\n  });\n  const wyvernExchange = WyvernContract(provider);\n  await validateOrderParams({ order, accountAddress, wyvernExchange });\n  const hashedOrder = {\n    ...order,\n    hash: getOrderHash(order),\n  };\n  const nonce = Number(\n    await wyvernExchange.functions.nonces(accountAddress)\n  );\n  let signature;\n  try {\n    signature = await _authorizeOrder({ provider, order: hashedOrder, nonce });\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"You declined to authorize your auction\");\n  }\n  const orderWithSignature = {\n    ...hashedOrder,\n    ...signature,\n  };\n  return validateAndPostOrder({ order: orderWithSignature, platform });\n}\n\nexport { fulfillOrder, createSellOrder, cancelOSOrder };\n\n// maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28\n"],"mappings":"AAAA;AACA,OAAOA,cAAP,MAA2B,WAA3B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,qBAAnC;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAEA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,SAAP,MAAsB,cAAtB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,aAAvC;AACA,SAASC,yBAAT,EAAoCC,wBAApC,EAA8DC,uBAA9D,QAA6F,aAA7F;AACA,SAASC,sBAAT,EAAiCC,8BAAjC,EAAiEC,qBAAjE,EAAwFC,mBAAxF,EAA6GC,8BAA7G,EAA6IC,+BAA7I,EAA8KC,kCAA9K,EAAkNC,kBAAlN,EAAsOC,6BAAtO,EAAqQC,wBAArQ,QAAqS,aAArS;AACA,OAAOC,4BAAP,MAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,EAAmDC,yBAAnD,QAAoF,aAApF,C,CAEA;;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,aAAhD,C,CAEA;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;EAC7B,MAAMC,QAAQ,GAAG;IACbC,IAAI,EAAEF,KAAK,CAACE,IADC;IAEbC,MAAM,EAAEH,KAAK,CAACG,MAFD;IAGbC,QAAQ,EAAEJ,KAAK,CAACI,QAHH;IAIbC,OAAO,EAAEL,KAAK,CAACK,OAJF;IAKbC,QAAQ,EAAEN,KAAK,CAACO,SALH;IAMbC,QAAQ,EAAER,KAAK,CAACS,SANH;IAObC,QAAQ,EAAEV,KAAK,CAACW;EAPH,CAAjB;EAUF,OAAOV,QAAP;AACD,CAZD;;AAcA,OAAO,MAAMW,wBAAwB,GAAG;EACtCC,IAAI,EAAErB;AADgC,CAAjC;AAGP,OAAO,MAAMsB,aAAa,GAAIC,KAAD,IAAW;EACtC,MAAMC,WAAW,GAAG,IAAIC,IAAJ,CAAU,GAAEF,KAAK,CAACG,YAAa,GAA/B,CAApB;EACA,MAAMjB,QAAQ,GAAG;IACfkB,IAAI,EAAEJ,KAAK,CAACK,UAAN,IAAoBL,KAAK,CAACI,IADjB;IAEfE,oBAAoB,EAAEN,KAAK,CAACO,SAAN,IAAmBP,KAAK,CAACQ,SAFhC;IAGfC,aAAa,EAAET,KAAK,CAACU,cAHN;IAIfC,QAAQ,EAAEX,KAAK,CAACW,QAJD;IAKfC,QAAQ,EAAE,IAAIpD,SAAJ,CAAcwC,KAAK,CAACY,QAAN,IAAkB,CAAhC,CALK;IAMfC,QAAQ,EAAEb,KAAK,CAACa,QAND;IAOfC,YAAY,EAAEd,KAAK,CAACe,KAPL;IAQfC,YAAY,EAAEhB,KAAK,CAACiB,KARL;IASf;IACAF,KAAK,EAAEf,KAAK,CAACe,KAAN,CAAYzB,OAVJ;IAWf2B,KAAK,EAAEjB,KAAK,CAACiB,KAAN,CAAY3B,OAXJ;IAYf4B,eAAe,EAAE,IAAI1D,SAAJ,CAAcwC,KAAK,CAACmB,iBAApB,CAZF;IAafC,eAAe,EAAE,IAAI5D,SAAJ,CAAcwC,KAAK,CAACqB,iBAApB,CAbF;IAcfC,gBAAgB,EAAE,IAAI9D,SAAJ,CAAcwC,KAAK,CAACuB,kBAApB,CAdH;IAefC,gBAAgB,EAAE,IAAIhE,SAAJ,CAAcwC,KAAK,CAACyB,kBAApB,CAfH;IAgBfC,gBAAgB,EAAE,IAAIlE,SAAJ,CAAcwC,KAAK,CAAC2B,kBAAN,IAA4B,CAA1C,CAhBH;IAiBfC,0BAA0B,EAAE5B,KAAK,CAAC6B,aAAN,CAAoBvC,OAApB,IAA+BtC,cAAc,CAAC8E,YAjB3D;IAkBfC,SAAS,EAAE/B,KAAK,CAACgC,UAlBF;IAmBfC,mBAAmB,EAAEjC,KAAK,CAAC6B,aAnBZ;IAoBfK,YAAY,EAAElC,KAAK,CAAC6B,aAAN,CAAoBvC,OApBnB;IAqBf6C,IAAI,EAAEnC,KAAK,CAACmC,IArBG;IAsBfC,QAAQ,EAAEpC,KAAK,CAACqC,SAtBD;IAuBfC,MAAM,EAAEtC,KAAK,CAACsC,MAvBC;IAwBfC,SAAS,EAAEvC,KAAK,CAACwC,WAxBF;IAyBfC,QAAQ,EAAEzC,KAAK,CAACyC,QAzBD;IA0BfC,kBAAkB,EAAE1C,KAAK,CAAC2C,mBA1BX;IA2BfC,YAAY,EAAE5C,KAAK,CAAC6C,aA3BL;IA4BfC,eAAe,EAAE9C,KAAK,CAAC+C,gBA5BR;IA6BfC,YAAY,EAAEhD,KAAK,CAACiD,aA7BL;IA8BfC,SAAS,EAAE,IAAI1F,SAAJ,CAAcwC,KAAK,CAACmD,UAApB,CA9BI;IA+BfC,KAAK,EAAE,IAAI5F,SAAJ,CAAcwC,KAAK,CAACoD,KAApB,CA/BQ;IAgCfC,aAAa,EAAE,IAAI7F,SAAJ,CAAcwC,KAAK,CAACsD,cAAN,IAAwB,CAAtC,CAhCA;IAiCfC,YAAY,EAAE,IAAI/F,SAAJ,CAAcwC,KAAK,CAACwD,aAAN,IAAuB,CAArC,CAjCC;IAmCfC,WAAW,EAAE,IAAIjG,SAAJ,CAAckG,IAAI,CAACC,KAAL,CAAW1D,WAAW,CAAC2D,OAAZ,KAAwB,IAAnC,CAAd,CAnCE;IAoCfC,WAAW,EAAE,IAAIrG,SAAJ,CAAcwC,KAAK,CAAC8D,YAApB,CApCE;IAqCfC,cAAc,EAAE,IAAIvG,SAAJ,CAAcwC,KAAK,CAACgE,eAApB,CArCD;IAuCfC,IAAI,EAAE,IAAIzG,SAAJ,CAAcwC,KAAK,CAACiE,IAApB,CAvCS;IAwCfC,CAAC,EAAEC,QAAQ,CAACnE,KAAK,CAACkE,CAAP,CAxCI;IAyCfE,CAAC,EAAEpE,KAAK,CAACoE,CAzCM;IA0CfC,CAAC,EAAErE,KAAK,CAACqE,CA1CM;IA4CfC,oBAAoB,EAAEtE,KAAK,CAACuE,sBAAN,GAClBvF,aAAa,CAACgB,KAAK,CAACuE,sBAAP,CADK,GAElBC,SA9CW;IA+CfC,KAAK,EAAEzE,KAAK,CAACyE,KA/CE;IAgDfC,WAAW,EAAE1E,KAAK,CAAC2E;EAhDJ,CAAjB,CAFsC,CAqDtC;;EACAzF,QAAQ,CAACqE,YAAT,GAAwBqB,oBAAoB,CAAC1F,QAAD,CAA5C;EACA,OAAOA,QAAP;AACD,CAxDM;AA0DP,OAAO,MAAM2F,kBAAkB,GAAI7E,KAAD,IAAW;EAC3C,MAAMC,WAAW,GAAG,IAAIC,IAAJ,CAAU,GAAEF,KAAK,CAAC8E,OAAQ,EAA1B,CAApB;EACA,MAAMC,SAAS,GAAG/E,KAAK,CAACgF,IAAxB;EACA,MAAMrE,QAAQ,GAAG;IACf8D,KAAK,EAAE;MACLnF,OAAO,EAAEU,KAAK,CAACiF,gBADV;MAELC,EAAE,EAAElF,KAAK,CAACmF;IAFL,CADQ;IAKfC,MAAM,EAAE,QALO,CAKG;;EALH,CAAjB;EAQA,MAAMlG,QAAQ,GAAG;IACfkB,IAAI,EAAEJ,KAAK,CAACqF,GADG;IAEf/E,oBAAoB,EAAE,KAFP;IAGfG,aAAa,EAAET,KAAK,CAACsF,KAHN;IAIf3E,QAJe;IAKfC,QAAQ,EAAE,IAAIpD,SAAJ,CAAc,CAAd,CALK;IAMfqD,QAAQ,EAAEkE,SAAS,CAAClE,QANL;IAOf;IACAE,KAAK,EAAEgE,SAAS,CAAChE,KARF;IASfE,KAAK,EAAE8D,SAAS,CAAC9D,KATF;IAUfC,eAAe,EAAE,IAAI1D,SAAJ,CAAcuH,SAAS,CAAC7D,eAAxB,CAVF;IAWfE,eAAe,EAAE,IAAI5D,SAAJ,CAAcuH,SAAS,CAAC3D,eAAxB,CAXF;IAYfE,gBAAgB,EAAE,IAAI9D,SAAJ,CAAcuH,SAAS,CAACzD,gBAAxB,CAZH;IAafE,gBAAgB,EAAE,IAAIhE,SAAJ,CAAcuH,SAAS,CAACvD,gBAAxB,CAbH;IAcfE,gBAAgB,EAAE,IAAIlE,SAAJ,CAAc,CAAd,CAdH;IAcqB;IACpCoE,0BAA0B,EAAEmD,SAAS,CAAC7C,YAAV,IAA0BlF,cAAc,CAAC8E,YAftD;IAgBfC,SAAS,EAAEgD,SAAS,CAAChD,SAhBN;IAiBfG,YAAY,EAAE6C,SAAS,CAAC7C,YAjBT;IAkBfC,IAAI,EAAE4C,SAAS,CAAC5C,IAlBD;IAmBfC,QAAQ,EAAE2C,SAAS,CAAC3C,QAnBL;IAoBfE,MAAM,EAAEyC,SAAS,CAACzC,MApBH;IAqBfC,SAAS,EAAEwC,SAAS,CAACxC,SArBN;IAsBfE,QAAQ,EAAEsC,SAAS,CAACtC,QAtBL;IAuBfC,kBAAkB,EAAEqC,SAAS,CAACrC,kBAvBf;IAwBfE,YAAY,EAAEmC,SAAS,CAACnC,YAxBT;IAyBfE,eAAe,EAAEiC,SAAS,CAACjC,eAzBZ;IA0BfE,YAAY,EAAE+B,SAAS,CAAC/B,YA1BT;IA2BfE,SAAS,EAAE,IAAI1F,SAAJ,CAAcuH,SAAS,CAAC7B,SAAxB,CA3BI;IA4BfE,KAAK,EAAE,IAAI5F,SAAJ,CAAcuH,SAAS,CAAC3B,KAAxB,CA5BQ;IA6BfC,aAAa,EAAE,IAAI7F,SAAJ,CAAc,CAAd,CA7BA;IA8Bf+F,YAAY,EAAE,IAAI/F,SAAJ,CAAc,CAAd,CA9BC;IA+BfiG,WAAW,EAAE,IAAIjG,SAAJ,CAAckG,IAAI,CAACC,KAAL,CAAW1D,WAAW,CAAC2D,OAAZ,KAAwB,IAAnC,CAAd,CA/BE;IAgCfC,WAAW,EAAE,IAAIrG,SAAJ,CAAcuH,SAAS,CAAClB,WAAxB,CAhCE;IAiCfE,cAAc,EAAE,IAAIvG,SAAJ,CAAcuH,SAAS,CAAChB,cAAxB,CAjCD;IAkCfE,IAAI,EAAE,IAAIzG,SAAJ,CAAcuH,SAAS,CAACd,IAAxB,CAlCS;IAmCfC,CAAC,EAAEC,QAAQ,CAACY,SAAS,CAACb,CAAX,CAnCI;IAoCfE,CAAC,EAAEW,SAAS,CAACX,CApCE;IAqCfC,CAAC,EAAEU,SAAS,CAACV,CArCE;IAsCfI,KAAK,EAAEzE,KAAK,CAACyE;EAtCE,CAAjB,CAX2C,CAoD3C;;EACAvF,QAAQ,CAACqE,YAAT,GAAwBqB,oBAAoB,CAAC1F,QAAD,CAA5C;EACA,OAAOA,QAAP;AACD,CAvDM;;AAwDP,MAAMqG,kBAAkB,GAAG,UACzBC,mBADyB,EAEzBC,gBAFyB,EAItB;EAAA,IADH7D,0BACG,uEAD0B,KAC1B;EACH;EACA,MAAM8D,sBAAsB,GAAGhC,IAAI,CAACC,KAAL,CAC7BzD,IAAI,CAACyF,GAAL,KAAa,IAAb,GAAoB3H,sBADS,CAA/B;EAGA,MAAM4H,mBAAmB,GAAGlC,IAAI,CAACC,KAAL,CAAWzD,IAAI,CAACyF,GAAL,KAAa,IAAxB,CAA5B;;EACA,IACEH,mBAAmB,IAAI,CAAvB,IACAA,mBAAmB,GAAGE,sBAFxB,EAGE;IACA,MAAM,IAAIG,KAAJ,CACH,oCAAmC7H,sBAAuB,4CADvD,CAAN;EAGD;;EACD,IAAIyH,gBAAgB,IAAIA,gBAAgB,GAAGG,mBAA3C,EAAgE;IAC9D,MAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;EACD;;EACD,IACEJ,gBAAgB,IAChBD,mBAAmB,IAAI,CADvB,IAEAC,gBAAgB,IAAID,mBAHtB,EAIE;IACA,MAAM,IAAIK,KAAJ,CAAU,kDAAV,CAAN;EACD;;EACD,IAAIjE,0BAA0B,IAAI4D,mBAAmB,IAAI,CAAzD,EAA4D;IAC1D,MAAM,IAAIK,KAAJ,CAAU,gDAAV,CAAN;EACD;;EACD,IAAIjE,0BAA0B,IAAI6D,gBAAlC,EAAoD;IAClD,MAAM,IAAII,KAAJ,CAAW,oDAAX,CAAN;EACD;;EACD,IAAI1B,QAAQ,CAACqB,mBAAmB,CAACM,QAApB,EAAD,CAAR,IAA4CN,mBAAhD,EAAqE;IACnE,MAAM,IAAIK,KAAJ,CAAW,wDAAX,CAAN;EACD;;EAED,IAAIjE,0BAAJ,EAAgC;IAC9B6D,gBAAgB,GAAGD,mBAAnB,CAD8B,CAE9B;IACA;;IACAA,mBAAmB,GAAGA,mBAAmB,GAAGvH,8BAA5C;EACD,CALD,MAKO;IACL;IACAwH,gBAAgB,GAAGA,gBAAgB,IAAI/B,IAAI,CAACC,KAAL,CAAWzD,IAAI,CAACyF,GAAL,KAAa,IAAb,GAAoB,GAA/B,CAAvC;EACD;;EAED,OAAO;IACL9B,WAAW,EAAErG,SAAS,CAACiI,gBAAD,CADjB;IAEL1B,cAAc,EAAEvG,SAAS,CAACgI,mBAAD;EAFpB,CAAP;AAID,CApDD;;AAqDA,OAAO,MAAMO,UAAU,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;EAC7C,MAAMC,UAAU,GAAGF,GAAG,CAACG,MAAJ,CAAWC,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAACC,IAAxB,CAAnB;EACA,IAAIpB,EAAE,GAAG9H,MAAM,CAACmJ,QAAP,CAAgBP,GAAG,CAAC7G,IAApB,EAA0B+G,UAA1B,CAAT;EACA,IAAIM,MAAM,GAAGpJ,MAAM,CAACqJ,SAAP,CAAiBP,UAAU,CAACQ,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAjB,EAAyCT,UAAU,CAACS,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAzC,CAAb;EAEA,OAAQ,OAAOC,MAAM,CAACC,MAAP,CAAc,CAAC1B,EAAD,EAAKsB,MAAL,CAAd,EAA4BV,QAA5B,CAAqC,KAArC,CAAf;AACD,CANM;;AAOP,MAAMe,iBAAiB,GAAG,CAACb,GAAD,EAAM1G,OAAN,KAAkB;EAC1C,MAAM2G,UAAU,GAAGD,GAAG,CAACG,MAAJ,CAAWC,GAAX,CAAgBU,KAAD,IAAW;IAC3C,QAAQA,KAAK,CAACC,IAAd;MACE,KAAK,aAAL;QACE,OAAO/J,cAAc,CAACgK,oBAAf,CAAoCF,KAAK,CAACR,IAA1C,CAAP;;MACF,KAAK,OAAL;QACE,OAAOhH,OAAP;;MACF,KAAK,OAAL;MACA;QACE,OAAOwH,KAAK,CAACG,KAAb;IAPJ;EASD,CAVkB,CAAnB;EAYA,OAAOlB,UAAU,CAACC,GAAD,EAAMC,UAAN,CAAjB;AACD,CAdD;;AAeA,MAAMiB,UAAU,GAAG,CAAC9B,MAAD,EAASX,KAAT,EAAgBnF,OAAhB,EAAyB6H,gBAAzB,KAA8C;EAC/D,MAAMC,QAAQ,GACZD,gBAAgB,IAAI/B,MAAM,CAACiC,SAAP,CAAiBC,gBAArC,GACIlC,MAAM,CAACiC,SAAP,CAAiBC,gBAAjB,CAAkC7C,KAAlC,EAAyC0C,gBAAzC,CADJ,GAEI/B,MAAM,CAACiC,SAAP,CAAiBD,QAAjB,CAA0B3C,KAA1B,CAHN,CAD+D,CAK/D;;EAEA,IAAI8C,WAAW,GAAGV,iBAAiB,CAACO,QAAD,EAAW9H,OAAX,CAAnC;EACA,IAAIkI,OAAO,GAAGxK,cAAc,CAACyK,wBAAf,CAAwCL,QAAxC,CAAd;EAEA,OAAO;IACL9E,MAAM,EAAE8E,QAAQ,CAAC9E,MADZ;IAELG,QAAQ,EAAE8E,WAFL;IAGL7E,kBAAkB,EAAE8E;EAHf,CAAP;AAKD,CAfD;;AAiBA,MAAME,SAAS,GAAG,CAACtC,MAAD,EAASX,KAAT,EAAgBnF,OAAhB,EAAyB6H,gBAAzB,KAA8C;EAC9D;EACA,MAAMC,QAAQ,GACZD,gBAAgB,IAAI/B,MAAM,CAACiC,SAAP,CAAiBC,gBAArC,GACIlC,MAAM,CAACiC,SAAP,CAAiBC,gBAAjB,CAAkC7C,KAAlC,EAAyC0C,gBAAzC,CADJ,GAEI/B,MAAM,CAACiC,SAAP,CAAiBD,QAAjB,CAA0B3C,KAA1B,CAHN;EAIA,MAAMkD,YAAY,GAAGP,QAAQ,CAACjB,MAAT,CAAgByB,MAAhB,CAAwBvB,CAAD,IAAOA,CAAC,CAACU,IAAF,KAAW,aAAzC,CAArB;EACA,MAAMc,WAAW,GAAGT,QAAQ,CAACjB,MAAT,CAAgByB,MAAhB,CAAwBvB,CAAD,IAAOA,CAAC,CAACU,IAAF,KAAW,OAAzC,CAApB,CAP8D,CAS9D;;EACA,IAAIY,YAAY,CAACG,MAAb,KAAwB,CAA5B,EAA+B;IAC7B,MAAM,IAAIjC,KAAJ,CACJ,8DACE8B,YAAY,CAACG,MADf,GAEE,MAHE,CAAN;EAKD,CAhB6D,CAkB9D;;;EACA,MAAM7B,UAAU,GAAGmB,QAAQ,CAACjB,MAAT,CAAgBC,GAAhB,CAAqBU,KAAD,IAAW;IAChD,QAAQA,KAAK,CAACC,IAAd;MACE,KAAK,aAAL;QACE,OAAOzH,OAAP;;MACF,KAAK,OAAL;QACE,OAAOtC,cAAc,CAACgK,oBAAf,CAAoCF,KAAK,CAACR,IAA1C,CAAP;;MACF;QACE,IAAI;UACF,OAAOQ,KAAK,CAACG,KAAN,CAAYnB,QAAZ,EAAP;QACD,CAFD,CAEE,OAAOiC,CAAP,EAAU;UACVC,OAAO,CAACC,KAAR,CAAc7C,MAAd;UACA4C,OAAO,CAACC,KAAR,CAAcxD,KAAd;UACA,MAAMsD,CAAN;QACD;;IAZL;EAcD,CAfkB,CAAnB;EAgBA,MAAMtF,QAAQ,GAAGsD,UAAU,CAACqB,QAAD,EAAWnB,UAAX,CAA3B,CAnC8D,CAqC9D;;EACA,IAAIvD,kBAAkB,GAAG,IAAzB;;EACA,IAAImF,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;IAC1BpF,kBAAkB,GAAG1F,cAAc,CAACyK,wBAAf,CACnBL,QADmB,EAEnB,OAFmB,CAArB;EAID;;EAED,OAAO;IACL9E,MAAM,EAAE8E,QAAQ,CAAC9E,MADZ;IAELG,QAFK;IAGLC;EAHK,CAAP;AAKD,CAnDD,C,CAqDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwF,YAAT,CAAsBlI,KAAtB,EAA6B;EAC3B,MAAMmI,oBAAoB,GAAG,EAC3B,GAAGnI,KADwB;IAE3Be,KAAK,EAAEf,KAAK,CAACe,KAAN,CAAYqH,WAAZ,EAFoB;IAG3BnH,KAAK,EAAEjB,KAAK,CAACiB,KAAN,CAAYmH,WAAZ,EAHoB;IAI3BlG,YAAY,EAAElC,KAAK,CAACkC,YAAN,CAAmBkG,WAAnB,EAJa;IAK3BjG,IAAI,EAAEnC,KAAK,CAACmC,IAAN,CAAW2D,QAAX,EALqB;IAM3B1D,QAAQ,EAAEpC,KAAK,CAACoC,QAAN,CAAe0D,QAAf,EANiB;IAO3BvD,SAAS,EAAEvC,KAAK,CAACuC,SAAN,CAAgBuD,QAAhB,EAPgB;IAQ3B/D,SAAS,EAAE/B,KAAK,CAAC+B,SAAN,CAAgB+D,QAAhB,EARgB;IAS3B5E,eAAe,EAAE,MAAMmH,OAAN,EATU;IAU3BjH,eAAe,EAAE,IAAIiH,OAAJ,EAVU;IAW3BnF,SAAS,EAAE,IAAImF,OAAJ,EAXgB;IAY3BjF,KAAK,EAAE,IAAIiF,OAAJ;EAZoB,CAA7B;EAcA,OAAOrL,cAAc,CAACsL,eAAf,CAA+BH,oBAA/B,CAAP;AACD;;AACD,SAASI,iBAAT,OAKG;EAAA,IALwB;IACzBvI,KADyB;IAEzBwI,cAFyB;IAGzBC,gBAHyB;IAIzBC;EAJyB,CAKxB;EACDF,cAAc,GAAGA,cAAc,CAACJ,WAAf,EAAjB;EACAK,gBAAgB,GAAGA,gBAAgB,CAACL,WAAjB,EAAnB;;EACA,MAAMO,kBAAkB,GAAG,MAAM;IAC/B,MAAMC,cAAc,GAAG5I,KAAK,CAACsC,MAAN,KAAiBzC,wBAAwB,CAACC,IAAjE;;IACA,IAAI,WAAWE,KAAK,CAACW,QAArB,EAA+B;MAC7B,MAAMyE,MAAM,GAAGjI,YAAf,CAD6B,CACA;;MAC7B,OAAO6C,KAAK,CAACmC,IAAN,IAAc,CAAd,GACH+E,UAAU,CACR9B,MADQ,EAERpF,KAAK,CAACW,QAAN,CAAe8D,KAFP,EAGRgE,gBAHQ,EAIRG,cAAc,GAAG5I,KAAK,CAACsC,MAAT,GAAkBkC,SAJxB,CADP,GAOHkD,SAAS,CACPtC,MADO,EAEPpF,KAAK,CAACW,QAAN,CAAe8D,KAFR,EAGPgE,gBAHO,EAIPG,cAAc,GAAG5I,KAAK,CAACsC,MAAT,GAAkBkC,SAJzB,CAPb;IAaD,CAfD,MAeO;MACL,MAAM,IAAIqB,KAAJ,CAAU,wBAAV,CAAN;IACD;EACF,CApBD;;EAsBA,MAAM;IAAEvD,MAAF;IAAUG,QAAV;IAAoBC;EAApB,IAA2CiG,kBAAkB,EAAnE;;EACA,MAAME,KAAK,GAAGtD,kBAAkB,CAAC,CAAD,CAAhC,CA1BC,CA2BD;;;EACA,MAAMrD,YAAY,GAChBlC,KAAK,CAACkC,YAAN,IAAsBlF,cAAc,CAAC8E,YAArC,GACI4G,QAAQ,IAAII,YAAY,CAACC,OAAzB,GACE7K,qBADF,GAEE8K,mBAHN,GAIIhM,cAAc,CAAC8E,YALrB;EAMA,MAAMmH,aAAa,GAAG;IACpBpI,QAAQ,EAAEb,KAAK,CAACa,QADI;IAEpBE,KAAK,EAAEyH,cAFa;IAGpBvH,KAAK,EAAEjB,KAAK,CAACe,KAHO;IAIpBH,QAAQ,EAAEZ,KAAK,CAACY,QAJI;IAKpBM,eAAe,EAAElB,KAAK,CAACkB,eALH;IAMpBE,eAAe,EAAEpB,KAAK,CAACoB,eANH;IAOpBE,gBAAgB,EAAEtB,KAAK,CAACsB,gBAPJ;IAQpBE,gBAAgB,EAAExB,KAAK,CAACwB,gBARJ;IASpBE,gBAAgB,EAAE1B,KAAK,CAAC0B,gBATJ;IAUpBE,0BAA0B,EAAE,KAVR;IAWpBG,SAAS,EAAE/B,KAAK,CAAC+B,SAXG;IAYpBG,YAZoB;IAapBC,IAAI,EAAE,CAACnC,KAAK,CAACmC,IAAN,GAAa,CAAd,IAAmB,CAbL;IAcpBC,QAAQ,EAAE,CAdU;IAcP;IACbE,MAfoB;IAgBpBC,SAAS,EAAEvC,KAAK,CAACuC,SAhBG;IAiBpBE,QAjBoB;IAkBpBC,kBAlBoB;IAmBpBE,YAAY,EAAE5F,cAAc,CAAC8E,YAnBT;IAoBpBgB,eAAe,EAAE,IApBG;IAqBpBE,YAAY,EAAEhD,KAAK,CAACgD,YArBA;IAsBpBE,SAAS,EAAElD,KAAK,CAACkD,SAtBG;IAuBpBE,KAAK,EAAE5F,SAAS,CAAC,CAAD,CAvBI;IAwBpBqG,WAAW,EAAEgF,KAAK,CAAChF,WAxBC;IAyBpBE,cAAc,EAAE8E,KAAK,CAAC9E,cAzBF;IA0BpBE,IAAI,EAAEjH,cAAc,CAACkM,wBAAf,EA1Bc;IA2BpBvI,QAAQ,EAAEX,KAAK,CAACW;EA3BI,CAAtB;EA8BA,OAAOsI,aAAP;AACD;;AACD,SAASE,mBAAT,CAA6BnJ,KAA7B,EAAoCiJ,aAApC,EAAmD;EACjD,MAAMG,WAAW,GAAGpJ,KAAK,CAACmC,IAAN,IAAc,CAAlC;EAEA,IAAIkH,GAAJ;EACA,IAAIC,IAAJ;;EACA,IAAI,CAACF,WAAL,EAAkB;IAChBC,GAAG,GAAGrJ,KAAN;IACAsJ,IAAI,GAAG,EACL,GAAGL,aADE;MAEL/E,CAAC,EAAEmF,GAAG,CAACnF,CAFF;MAGLE,CAAC,EAAEiF,GAAG,CAACjF,CAHF;MAILC,CAAC,EAAEgF,GAAG,CAAChF;IAJF,CAAP;EAMD,CARD,MAQO;IACLiF,IAAI,GAAGtJ,KAAP;IACAqJ,GAAG,GAAG,EACJ,GAAGJ,aADC;MAEJ/E,CAAC,EAAEoF,IAAI,CAACpF,CAFJ;MAGJE,CAAC,EAAEkF,IAAI,CAAClF,CAHJ;MAIJC,CAAC,EAAEiF,IAAI,CAACjF;IAJJ,CAAN;EAMD;;EAED,OAAO;IAAEgF,GAAF;IAAOC;EAAP,CAAP;AACD;;AACD,MAAMC,YAAY,GAAG,CAACvJ,KAAD,EAAQwJ,eAAR,KAA4B;EAC/C,MAAMC,QAAQ,GAAGD,eAAe,IAAIxJ,KAAK,CAACW,QAAN,CAAe6I,eAAnD;;EACA,IAAIC,QAAQ,IAAInM,cAAc,CAACmM,QAAD,CAA9B,EAA0C;IACxC,OAAQ,6BAA4BA,QAAQ,CAACC,MAAT,CAAgB,CAAhB,CAAmB,EAAvD;EACD;;EACD,OAAOlF,SAAP;AACD,CAND;;AAOA,MAAMmF,iBAAiB,GAAIC,UAAD,IAAgB;EACxC,OAAOlG,IAAI,CAACmG,IAAL,CAAUD,UAAU,GAAG,IAAvB,CAAP;AACD,CAFD;;AAGA,SAASE,0BAAT,CAAoC9J,KAApC,EAA2C+J,WAA3C,EAAwD;EACtD,IACE/J,KAAK,CAACa,QAAN,KACAmJ,wBAAwB,CAAClK,IAAzB,CAA8BmK,6BAFhC,EAGE;IACA,OAAOF,WAAW,GACd,KAAKG,0BADS,GAEd,KAAKC,kBAFT;EAGD;;EACD,OAAOJ,WAAW,GAAG,KAAKK,uBAAR,GAAkC,KAAKC,eAAzD;AACD;AACD;AACA;AACA;AACA;;;AACA,eAAeC,eAAf,CAA+BtK,KAA/B,EAAsCuK,cAAtC,EAAsD;EACpD,MAAMhH,YAAY,GAAG,MAAMgH,cAAc,CAACC,OAAf,CACxBC,sBADwB,CAEvB,CACEzK,KAAK,CAACa,QADR,EAEEb,KAAK,CAACe,KAFR,EAGEf,KAAK,CAACiB,KAHR,EAIEjB,KAAK,CAACkC,YAJR,EAKElC,KAAK,CAACsC,MALR,EAMEtC,KAAK,CAAC4C,YANR,EAOE5C,KAAK,CAACgD,YAPR,CAFuB,EAWvB,CACEhD,KAAK,CAACkB,eAAN,CAAsBmH,OAAtB,EADF,EAEErI,KAAK,CAACoB,eAAN,CAAsBiH,OAAtB,EAFF,EAGErI,KAAK,CAACsB,gBAAN,CAAuB+G,OAAvB,EAHF,EAIErI,KAAK,CAACwB,gBAAN,CAAuB6G,OAAvB,EAJF,EAKErI,KAAK,CAACkD,SAAN,CAAgBmF,OAAhB,EALF,EAMErI,KAAK,CAACoD,KAAN,CAAYiF,OAAZ,EANF,EAOErI,KAAK,CAAC6D,WAAN,CAAkBwE,OAAlB,EAPF,EAQErI,KAAK,CAAC+D,cAAN,CAAqBsE,OAArB,EARF,EASErI,KAAK,CAACiE,IAAN,CAAWoE,OAAX,EATF,CAXuB,EAsBvBrI,KAAK,CAAC+B,SAtBiB,EAuBvB/B,KAAK,CAACmC,IAvBiB,EAwBvBnC,KAAK,CAACoC,QAxBiB,EAyBvBpC,KAAK,CAACuC,SAzBiB,EA0BvBvC,KAAK,CAACyC,QA1BiB,EA2BvBzC,KAAK,CAAC0C,kBA3BiB,EA4BvB1C,KAAK,CAAC8C,eA5BiB,EA8BxB4H,IA9BwB,EAA3B;EA+BA,OAAOnH,YAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASqB,oBAAT,CACL5E,KADK,EAIL;EAAA,IAFA2K,kBAEA,uEAFqB,EAErB;EAAA,IADAC,aACA,uEADgB,KAChB;EACA;EACA,IAAI;IAAE1H,SAAF;IAAaW,WAAb;IAA0BE,cAA1B;IAA0CX;EAA1C,IAAoDpD,KAAxD;EACA,MAAM;IAAEmC,IAAF;IAAQf,eAAR;IAAyBgB;EAAzB,IAAsCpC,KAA5C;EAEA,MAAM2F,GAAG,GAAG,IAAInI,SAAJ,CAAckG,IAAI,CAACC,KAAL,CAAWzD,IAAI,CAACyF,GAAL,KAAa,IAAxB,CAAd,EAA6CkF,KAA7C,CACVF,kBADU,CAAZ;EAGAzH,SAAS,GAAG,IAAI1F,SAAJ,CAAc0F,SAAd,CAAZ;EACAW,WAAW,GAAG,IAAIrG,SAAJ,CAAcqG,WAAd,CAAd;EACAE,cAAc,GAAG,IAAIvG,SAAJ,CAAcuG,cAAd,CAAjB;EACAX,KAAK,GAAG,IAAI5F,SAAJ,CAAc4F,KAAd,CAAR;EAEA,IAAI0H,UAAU,GAAG5H,SAAjB,CAbA,CAcA;;EACA,IAAId,QAAQ,KAAK,CAAjB,EAAoB,CAClB;EACD,CAFD,MAEO,IAAIA,QAAQ,KAAK,CAAjB,EAAoB;IACzB,MAAM2I,IAAI,GAAG3H,KAAK,CACfyF,KADU,CACJlD,GAAG,CAACkF,KAAJ,CAAUhH,WAAV,CADI,EAEVmH,SAFU,CAEAjH,cAAc,CAAC8G,KAAf,CAAqBhH,WAArB,CAFA,CAAb,CADyB,CAIzB;;IACAiH,UAAU,GACR3I,IAAI,IAAI,CAAR;IACI;IACAe,SAAS,CAAC2H,KAAV,CAAgBE,IAAhB,CAFJ;IAGI;IACA7H,SAAS,CAAC+H,IAAV,CAAeF,IAAf,CALN;EAMD,CA5BD,CA8BA;;;EACA,IAAI5I,IAAI,KAAK,CAAT,IAAc,CAACnC,KAAK,CAAC4B,0BAAzB,EAAqD;IACnD;IACAkJ,UAAU,GAAGA,UAAU,CAACjC,KAAX,CAAiB,CAACzH,eAAD,GAAmBjD,mBAAnB,GAAyC,CAA1D,CAAb;EACD;;EACD,OAAOyM,aAAa,GAAGE,UAAU,CAACjB,IAAX,EAAH,GAAuBiB,UAA3C;AACD;;AACD,eAAeI,oCAAf,CAAoD5B,IAApD,EAA0DiB,cAA1D,EAA0E;EACxE,MAAMhH,YAAY,GAAG,MAAM+G,eAAe,CAAChB,IAAD,EAAOiB,cAAP,CAA1C;EACA,MAAMY,cAAc,GAAGvG,oBAAoB,CAAC0E,IAAD,CAA3C;EAEA,MAAM8B,QAAQ,GAAG5N,SAAS,CAAC6N,GAAV,CAAc9H,YAAd,EAA4B4H,cAA5B,CAAjB,CAJwE,CAMxE;;EACA7B,IAAI,CAAClI,eAAL,GAAuB5D,SAAS,CAAC8L,IAAI,CAAClI,eAAN,CAAhC;EACA,MAAMkK,aAAa,GAAGhC,IAAI,CAAClI,eAAL,CAAqBmK,GAArB,CAAyBpN,mBAAzB,CAAtB;EACA,MAAMqN,GAAG,GAAGF,aAAa,CAACzC,KAAd,CAAoBuC,QAApB,CAAZ;EACA,OAAOI,GAAG,CAACP,IAAJ,CAASG,QAAT,CAAP,CAVwE,CAU7C;AAC5B;;AAED,eAAeK,YAAf,QAMG;EAAA,IANyB;IAC1BpC,GAD0B;IAE1BC,IAF0B;IAG1Bd,cAH0B;IAI1B+B,cAJ0B;IAK1B5J,QAAQ,GAAG+K;EALe,CAMzB;EACD,IAAIzE,KAAJ;;EAEA,IAAIoC,GAAG,CAACrG,YAAJ,IAAoBhG,cAAc,CAAC8E,YAAvC,EAAqD;IACnDmF,KAAK,GAAG,MAAMiE,oCAAoC,CAAC5B,IAAD,EAAOiB,cAAP,CAAlD;EACD;;EAED,MAAMoB,OAAO,GAAG;IAAEC,IAAI,EAAEpD,cAAR;IAAwBvB;EAAxB,CAAhB;EAEA,MAAM4E,IAAI,GAAG,CACX,CACExC,GAAG,CAACxI,QADN,EAEEwI,GAAG,CAACtI,KAFN,EAGEsI,GAAG,CAACpI,KAHN,EAIEoI,GAAG,CAACnH,YAJN,EAKEmH,GAAG,CAAC/G,MALN,EAME+G,GAAG,CAACzG,YANN,EAOEyG,GAAG,CAACrG,YAPN,EAQEsG,IAAI,CAACzI,QARP,EASEyI,IAAI,CAACvI,KATP,EAUEuI,IAAI,CAACrI,KAVP,EAWEqI,IAAI,CAACpH,YAXP,EAYEoH,IAAI,CAAChH,MAZP,EAaEgH,IAAI,CAAC1G,YAbP,EAcE0G,IAAI,CAACtG,YAdP,CADW,EAiBX,CACE,MAAM8C,QAAN,EADF,EAEE,IAAIA,QAAJ,EAFF,EAGEuD,GAAG,CAAC/H,gBAAJ,CAAqBwE,QAArB,EAHF,EAIEuD,GAAG,CAAC7H,gBAAJ,CAAqBsE,QAArB,EAJF,EAKE,IAAIA,QAAJ,EALF,EAMEuD,GAAG,CAACjG,KAAJ,CAAU0C,QAAV,EANF,EAOEuD,GAAG,CAACxF,WAAJ,CAAgBiC,QAAhB,EAPF,EAQEuD,GAAG,CAACtF,cAAJ,CAAmB+B,QAAnB,EARF,EASEuD,GAAG,CAACpF,IAAJ,CAAS6B,QAAT,EATF,EAUE,MAAMA,QAAN,EAVF,EAWE,IAAIA,QAAJ,EAXF,EAYEwD,IAAI,CAAChI,gBAAL,CAAsBwE,QAAtB,EAZF,EAaEwD,IAAI,CAAC9H,gBAAL,CAAsBsE,QAAtB,EAbF,EAcE,IAAIA,QAAJ,EAdF,EAeE,IAAIA,QAAJ,EAfF,EAgBEwD,IAAI,CAACzF,WAAL,CAAiBiC,QAAjB,EAhBF,EAiBEwD,IAAI,CAACvF,cAAL,CAAoB+B,QAApB,EAjBF,EAkBEwD,IAAI,CAACrF,IAAL,CAAU6B,QAAV,EAlBF,CAjBW,EAqCX,CACEuD,GAAG,CAACtH,SADN,EAEEsH,GAAG,CAAClH,IAFN,EAGEkH,GAAG,CAACjH,QAHN,EAIEiH,GAAG,CAAC9G,SAJN,EAKE+G,IAAI,CAACvH,SALP,EAMEuH,IAAI,CAACnH,IANP,EAOEmH,IAAI,CAAClH,QAPP,EAQEkH,IAAI,CAAC/G,SARP,CArCW,EA+CX8G,GAAG,CAAC5G,QA/CO,EAgDX6G,IAAI,CAAC7G,QAhDM,EAiDX4G,GAAG,CAAC3G,kBAjDO,EAkDX4G,IAAI,CAAC5G,kBAlDM,EAmDX2G,GAAG,CAACvG,eAnDO,EAoDXwG,IAAI,CAACxG,eApDM,EAqDX,CAACuG,GAAG,CAACnF,CAAJ,IAAS,CAAV,EAAaoF,IAAI,CAACpF,CAAL,IAAU,CAAvB,CArDW,EAsDX,CACEmF,GAAG,CAACjF,CAAJ,IAASsH,eADX,EAEErC,GAAG,CAAChF,CAAJ,IAASqH,eAFX,EAGEpC,IAAI,CAAClF,CAAL,IAAUsH,eAHZ,EAIEpC,IAAI,CAACjF,CAAL,IAAUqH,eAJZ,EAKE/K,QALF,CAtDW,CAAb,CATC,CAwED;EAEA;;EAEAqH,OAAO,CAAC8D,GAAR,CAAYvB,cAAZ;EACA,MAAMwB,iBAAiB,GAAGxB,cAAc,CAAClD,SAAf,CAAyB2E,YAAzB,CACxBH,IAAI,CAAC,CAAD,CADoB,EAExBA,IAAI,CAAC,CAAD,CAFoB,EAGxBA,IAAI,CAAC,CAAD,CAHoB,EAIxBA,IAAI,CAAC,CAAD,CAJoB,EAKxBA,IAAI,CAAC,CAAD,CALoB,EAMxBA,IAAI,CAAC,CAAD,CANoB,EAOxBA,IAAI,CAAC,CAAD,CAPoB,EAQxBA,IAAI,CAAC,CAAD,CARoB,EASxBA,IAAI,CAAC,CAAD,CAToB,EAUxBA,IAAI,CAAC,CAAD,CAVoB,EAWxBA,IAAI,CAAC,EAAD,CAXoB,EAYxBF,OAZwB,EAaxBM,IAbwB,CAanBC,GAAG,IAAI;IACZlE,OAAO,CAAC8D,GAAR,CAAYI,GAAZ;EACD,CAfyB,CAA1B;EAiBA,OAAO;IAAEH,iBAAF;IAAqBJ;EAArB,CAAP;AACD;;AACD,MAAMQ,WAAW,GAAIC,UAAD,IAAgB;EAClC;EAEA,MAAM;IAAEpH,IAAF;IAAQqH,OAAR;IAAiBC,eAAjB;IAAkCxH;EAAlC,IAA8CsH,UAApD;EACA,MAAMnM,WAAW,GAAG,IAAIC,IAAJ,CAAU,GAAE4E,OAAQ,EAApB,CAApB;EAEA,MAAMnE,QAAQ,GAAG;IACf8D,KAAK,EAAE;MACLS,EAAE,EAAEqH,MAAM,CAACF,OAAD,CADL;MAEL/M,OAAO,EAAEgN;IAFJ,CADQ;IAKflH,MAAM,EAAE;EALO,CAAjB;EAOA,MAAMlG,QAAQ,GAAG,EACf,GAAG8F,IADY;IAEfrE,QAFe;IAGfC,QAAQ,EAAE,IAAIpD,SAAJ,CAAc,CAAd,CAHK;IAIf0D,eAAe,EAAE,IAAI1D,SAAJ,CAAcwH,IAAI,CAAC9D,eAAnB,CAJF;IAKfE,eAAe,EAAE,IAAI5D,SAAJ,CAAcwH,IAAI,CAAC5D,eAAnB,CALF;IAMfE,gBAAgB,EAAE,IAAI9D,SAAJ,CAAcwH,IAAI,CAAC1D,gBAAnB,CANH;IAOfE,gBAAgB,EAAE,IAAIhE,SAAJ,CAAcwH,IAAI,CAACxD,gBAAnB,CAPH;IAQfE,gBAAgB,EAAE,IAAIlE,SAAJ,CAAcwH,IAAI,CAACtD,gBAAnB,CARH;IASfE,0BAA0B,EAAEoD,IAAI,CAAC9C,YAAL,IAAqBlF,cAAc,CAAC8E,YATjD;IAUfoB,SAAS,EAAE,IAAI1F,SAAJ,CAAcwH,IAAI,CAAC9B,SAAnB,CAVI;IAWfE,KAAK,EAAE,IAAI5F,SAAJ,CAAcwH,IAAI,CAAC5B,KAAnB,CAXQ;IAYfC,aAAa,EAAE,IAAI7F,SAAJ,CAAc,CAAd,CAZA;IAaf+F,YAAY,EAAE,IAAI/F,SAAJ,CAAc,CAAd,CAbC;IAefiG,WAAW,EAAE,IAAIjG,SAAJ,CAAckG,IAAI,CAACC,KAAL,CAAW1D,WAAW,CAAC2D,OAAZ,KAAwB,IAAnC,CAAd,CAfE;IAgBfC,WAAW,EAAE,IAAIrG,SAAJ,CAAcwH,IAAI,CAACnB,WAAnB,CAhBE;IAiBfE,cAAc,EAAE,IAAIvG,SAAJ,CAAcwH,IAAI,CAACjB,cAAnB,CAjBD;IAkBfE,IAAI,EAAE,IAAIzG,SAAJ,CAAcwH,IAAI,CAACf,IAAnB,CAlBS;IAmBfC,CAAC,EAAEC,QAAQ,CAACa,IAAI,CAACd,CAAN,CAnBI;IAoBfI,oBAAoB,EAAEU,IAAI,CAACT,sBAAL,GAClBvF,aAAa,CAACgG,IAAI,CAACT,sBAAN,CADK,GAElBC;EAtBW,CAAjB,CAbkC,CAsClC;;EACAtF,QAAQ,CAACqE,YAAT,GAAwBqB,oBAAoB,CAAC1F,QAAD,CAA5C;EACA,OAAOA,QAAP;AACD,CAzCD;;AA2CA,eAAesN,YAAf,QAOG;EAAA,IAPyB;IAC1BxM,KAD0B;IAE1ByM,QAF0B;IAG1BjE,cAH0B;IAI1BC,gBAJ0B;IAK1Be,eAL0B;IAM1Bd,QAAQ,GAAGI,YAAY,CAACC;EANE,CAOzB;EACDf,OAAO,CAAC0E,IAAR,CACG,YAAWlE,cAAe,iBAAgBC,gBAAiB,gBAAee,eAAgB,EAD7F,EADC,CAID;EACA;;EACA,MAAMe,cAAc,GAAGzL,cAAc,CAAC2N,QAAD,CAArC;EACA,MAAME,OAAO,GAAG,MAAMC,aAAa,CAAC;IAClC5M,KADkC;IAElCwI,cAFkC;IAGlC+B;EAHkC,CAAD,CAAnC;EAKA,MAAMtB,aAAa,GAAGV,iBAAiB,CAAC;IACtCvI,KADsC;IAEtCwI,cAFsC;IAGtCC,gBAAgB,EAAEA,gBAHoB;IAItCC;EAJsC,CAAD,CAAvC;EAMA,MAAM;IAAEW,GAAF;IAAOC;EAAP,IAAgBH,mBAAmB,CAACnJ,KAAD,EAAQiJ,aAAR,CAAzC;;EACA,MAAMtI,QAAQ,GAAG4I,YAAY,CAACvJ,KAAD,EAAQwJ,eAAR,CAA7B;;EACA,OAAO,MAAMiC,YAAY,CAAC;IACxBpC,GADwB;IAExBC,IAFwB;IAGxBd,cAHwB;IAIxB+B,cAJwB;IAKxB5J;EALwB,CAAD,CAAzB;AAOD;;AAED,SAASkM,cAAT,CAAwBzH,MAAxB,EAAgCX,KAAhC,EAAoE;EAAA,IAA7B7D,QAA6B,uEAAlB,IAAIpD,SAAJ,CAAc,CAAd,CAAkB;EAClE,MAAM6O,OAAO,GAAG5H,KAAK,CAAC4H,OAAN,IAAiB,IAAjB,GAAwB5H,KAAK,CAAC4H,OAAN,CAAcvG,QAAd,EAAxB,GAAmDtB,SAAnE;EACA,OAAOY,MAAM,CAAC0H,eAAP,CAAuB;IAC5BC,EAAE,EAAEV,OADwB;IAE5BW,QAAQ,EAAEpM,QAAQ,CAACkF,QAAT,EAFkB;IAG5BmH,OAAO,EAAExI,KAAK,CAACyI,YAAN,CAAmB9E,WAAnB,EAHmB;IAI5B+E,IAAI,EAAE1I,KAAK,CAACtF;EAJgB,CAAvB,CAAP;AAMD;;AACD,eAAeiO,WAAf,QAMG;EAAA,IANwB;IACzB3I,KADyB;IAEzBtC,IAFyB;IAGzBqG,cAHyB;IAIzBE,QAJyB;IAKzB2E,sBAAsB,GAAG;EALA,CAMxB;EACD,IAAIC,0BAA0B,GAAGlP,8BAAjC;EACA,IAAImP,2BAA2B,GAAGlP,+BAAlC;EACA,IAAImP,sBAAsB,GAAG,CAA7B;EACA,IAAIC,uBAAuB,GAAG,CAA9B;EACA,IAAIC,WAAW,GAAG,IAAIlQ,SAAJ,CAAc,CAAd,CAAlB;EACA,IAAImQ,uBAAuB,GAAG,IAA9B;EACA,IAAIC,iBAAiB,GAAGrP,kBAAxB;;EAEA,IAAIkG,KAAK,IAAIiE,QAAQ,IAAII,YAAY,CAACC,OAAtC,EAA+C;IAC7CuE,0BAA0B,GAAG,CAAC7I,KAAK,CAAC6I,0BAApC;IACAC,2BAA2B,GAAG,CAAC9I,KAAK,CAAC8I,2BAArC;IACAC,sBAAsB,GAAG,CAAC/I,KAAK,CAAC+I,sBAAhC;IACAC,uBAAuB,GAAG,CAAChJ,KAAK,CAACgJ,uBAAjC;IACAG,iBAAiB,GAAGL,2BAApB;EACD,CAfA,CAiBD;;;EACA,IAAIpL,IAAI,IAAI,CAAR,IAAasC,KAAb,IAAsBiE,QAAQ,IAAII,YAAY,CAACC,OAAnD,EAA4D,CAC1D;IACA;IACA;IACA;IACA;EACD,CAxBA,CA0BD;;;EACA,MAAM8E,uBAAuB,GAAG1L,IAAI,IAAI,CAAR,GAAYkL,sBAAZ,GAAqC,CAArE,CA3BC,CA6BD;;EACA,MAAMS,cAAc,GAClBD,uBAAuB,GAAGvP,kCAA1B,GACAsP,iBAFF;;EAGA,IAAIC,uBAAuB,GAAG,CAA1B,IAA+BC,cAAnC,EAAmD;IACjD,IAAIC,YAAY,GAAI,yDAClBH,iBAAiB,GAAG,GACrB,KAFD;;IAGA,IAAIA,iBAAiB,IAAItP,kCAAzB,EAA6D;MAC3DyP,YAAY,IAAK,mCACfzP,kCAAkC,GAAG,GACtC,wCAFD;IAGD;;IACD,MAAM,IAAIuH,KAAJ,CAAUkI,YAAV,CAAN;EACD;;EAED,OAAO;IACLC,wBAAwB,EACtBV,0BAA0B,GAAGE,sBAF1B;IAGLS,yBAAyB,EACvBV,2BAA2B,GAAGE,uBAJ3B;IAKLH,0BALK;IAMLC,2BANK;IAOLC,sBAPK;IAQLC,uBARK;IASLI,uBATK;IAULH,WAVK;IAWLC;EAXK,CAAP;AAaD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeO,mBAAf,CACEC,SADF,EAEEjB,YAFF,EAGEnJ,cAHF,EAIEqK,WAJF,EAKEC,SALF,EAQE;EAAA,IAFAzM,0BAEA,uEAF6B,KAE7B;EAAA,IADA0M,0BACA;EACA,MAAMC,SAAS,GAAGF,SAAS,IAAI,IAAb,GAAoBD,WAAW,GAAGC,SAAlC,GAA8C,CAAhE;EACA,MAAMrL,YAAY,GAAGkK,YAAY,CAAC9E,WAAb,EAArB,CAFA,CAGA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;EACA,MAAMlF,SAAS,GAAG,IAAI1F,SAAJ,CAAcD,UAAU,CAACgP,MAAM,CAAC6B,WAAD,CAAP,CAAxB,CAAlB,CAZA,CAaA;EACA;EACA;EACA;;EACA,MAAMhL,KAAK,GAAG,IAAI5F,SAAJ,CAAcD,UAAU,CAACgP,MAAM,CAACgC,SAAD,CAAP,CAAxB,CAAd,CAjBA,CAkBA;EACA;EACA;EACA;EACA;;EACA,MAAMC,YAAY,GAAGF,0BAA0B,GAC3C,IAAI9Q,SAAJ,CAAcD,UAAU,CAAC+Q,0BAAD,CAAxB,CAD2C,GAE3C9J,SAFJ;EAIA,OAAO;IAAEtB,SAAF;IAAaE,KAAb;IAAoBJ,YAApB;IAAkCwL;EAAlC,CAAP;AACD;;AACD,SAASC,aAAT,CAAuBT,wBAAvB,EAAiDC,yBAAjD,EAA4E;EAC1E,MAAMS,aAAa,GAAGvQ,mBAAmB,GAAG,GAA5C;;EAEA,IACE6P,wBAAwB,GAAG7P,mBAA3B,IACA8P,yBAAyB,GAAG9P,mBAF9B,EAGE;IACA,MAAM,IAAI0H,KAAJ,CACH,gDAA+C6I,aAAc,GAD1D,CAAN;EAGD;;EAED,IAAIV,wBAAwB,GAAG,CAA3B,IAAgCC,yBAAyB,GAAG,CAAhE,EAAmE;IACjE,MAAM,IAAIpI,KAAJ,CAAW,gDAAX,CAAN;EACD;AACF;;AACD,SAAS8I,qBAAT,CACEX,wBADF,EAEEC,yBAFF,EAGEW,iBAHF,EAME;EAAA,IAFAf,uBAEA,uEAF0B,CAE1B;EAAA,IADAnF,QACA;;EACA;EACA+F,aAAa,CAACT,wBAAD,EAA2BC,yBAA3B,CAAb,CAFA,CAGA;;;EACA,MAAM/L,YAAY,GAAG0M,iBAAiB,GAAG5R,cAAc,CAAC8E,YAAlB,GAAiC5D,qBAAvE,CAJA,CAMA;EACA;;EACA,MAAMgD,eAAe,GAAG0N,iBAAiB,GACrC,IAAIpR,SAAJ,CAAcwQ,wBAAd,CADqC,GAErC,IAAIxQ,SAAJ,CAAcyQ,yBAAd,CAFJ;EAGA,MAAM7M,eAAe,GAAGwN,iBAAiB,GACrC,IAAIpR,SAAJ,CAAcyQ,yBAAd,CADqC,GAErC,IAAIzQ,SAAJ,CAAcwQ,wBAAd,CAFJ;EAIA,OAAO;IACL9M,eADK;IAELE,eAFK;IAGLE,gBAAgB,EAAE,IAAI9D,SAAJ,CAAc,CAAd,CAHb;IAILgE,gBAAgB,EAAE,IAAIhE,SAAJ,CAAc,CAAd,CAJb;IAKLkE,gBAAgB,EAAE,IAAIlE,SAAJ,CAAcqQ,uBAAd,CALb;IAML3L,YANK;IAOLH,SAAS,EAAE,CAPN,CAOS;;EAPT,CAAP;AASD;;AACD,MAAM8M,mBAAmB,GAAG,CAC1B;EACEC,QAAQ,EAAE,IADZ;EAEE3I,MAAM,EAAE,EAFV;EAGEhH,IAAI,EAAE,0CAHR;EAIE4P,OAAO,EAAE,EAJX;EAKEC,OAAO,EAAE,KALX;EAMEC,eAAe,EAAE,MANnB;EAOE3I,IAAI,EAAE;AAPR,CAD0B,EAU1B;EACEwI,QAAQ,EAAE,KADZ;EAEE3I,MAAM,EAAE,EAFV;EAGEhH,IAAI,EAAE,mBAHR;EAIE4P,OAAO,EAAE,EAJX;EAKEC,OAAO,EAAE,KALX;EAMEC,eAAe,EAAE,YANnB;EAOE3I,IAAI,EAAE;AAPR,CAV0B,EAmB1B;EACEwI,QAAQ,EAAE,IADZ;EAEE3I,MAAM,EAAE,CAAC;IAAEhH,IAAI,EAAE,mBAAR;IAA6BmH,IAAI,EAAE;EAAnC,CAAD,CAFV;EAGEnH,IAAI,EAAE,0CAHR;EAIE4P,OAAO,EAAE,EAJX;EAKEC,OAAO,EAAE,KALX;EAMEC,eAAe,EAAE,MANnB;EAOE3I,IAAI,EAAE;AAPR,CAnB0B,EA4B1B;EACEwI,QAAQ,EAAE,IADZ;EAEE3I,MAAM,EAAE,EAFV;EAGEhH,IAAI,EAAE,OAHR;EAIE4P,OAAO,EAAE,CAAC;IAAE5P,IAAI,EAAE,EAAR;IAAYmH,IAAI,EAAE;EAAlB,CAAD,CAJX;EAKE0I,OAAO,EAAE,KALX;EAMEC,eAAe,EAAE,MANnB;EAOE3I,IAAI,EAAE;AAPR,CA5B0B,EAqC1B;EACEwI,QAAQ,EAAE,IADZ;EAEE3I,MAAM,EAAE,EAFV;EAGEhH,IAAI,EAAE,SAHR;EAIE4P,OAAO,EAAE,CAAC;IAAE5P,IAAI,EAAE,EAAR;IAAYmH,IAAI,EAAE;EAAlB,CAAD,CAJX;EAKE0I,OAAO,EAAE,KALX;EAMEC,eAAe,EAAE,MANnB;EAOE3I,IAAI,EAAE;AAPR,CArC0B,EA8C1B;EACEwI,QAAQ,EAAE,KADZ;EAEE3I,MAAM,EAAE,CAAC;IAAEhH,IAAI,EAAE,sBAAR;IAAgCmH,IAAI,EAAE;EAAtC,CAAD,CAFV;EAGEnH,IAAI,EAAE,wBAHR;EAIE4P,OAAO,EAAE,EAJX;EAKEC,OAAO,EAAE,KALX;EAMEC,eAAe,EAAE,YANnB;EAOE3I,IAAI,EAAE;AAPR,CA9C0B,EAuD1B;EACEwI,QAAQ,EAAE,KADZ;EAEE3I,MAAM,EAAE,CAAC;IAAEhH,IAAI,EAAE,UAAR;IAAoBmH,IAAI,EAAE;EAA1B,CAAD,CAFV;EAGEnH,IAAI,EAAE,mBAHR;EAIE4P,OAAO,EAAE,EAJX;EAKEC,OAAO,EAAE,KALX;EAMEC,eAAe,EAAE,YANnB;EAOE3I,IAAI,EAAE;AAPR,CAvD0B,EAgE1B;EACEH,MAAM,EAAE,CAAC;IAAEhH,IAAI,EAAE,mBAAR;IAA6BmH,IAAI,EAAE;EAAnC,CAAD,CADV;EAEE0I,OAAO,EAAE,KAFX;EAGEC,eAAe,EAAE,YAHnB;EAIE3I,IAAI,EAAE;AAJR,CAhE0B,EAsE1B;EACE4I,SAAS,EAAE,KADb;EAEE/I,MAAM,EAAE,CACN;IAAEgJ,OAAO,EAAE,KAAX;IAAkBhQ,IAAI,EAAE,eAAxB;IAAyCmH,IAAI,EAAE;EAA/C,CADM,EAEN;IAAE6I,OAAO,EAAE,KAAX;IAAkBhQ,IAAI,EAAE,UAAxB;IAAoCmH,IAAI,EAAE;EAA1C,CAFM,CAFV;EAMEnH,IAAI,EAAE,sBANR;EAOEmH,IAAI,EAAE;AAPR,CAtE0B,CAA5B;AAiFA,OAAO,MAAM8I,SAAS,GAAG,CAACpJ,GAAD,EAAM7G,IAAN,KAAe;EACtC,MAAMkQ,SAAS,GAAGrJ,GAAG,CAACsJ,IAAJ,CAAUC,CAAD,IAAOA,CAAC,CAACjJ,IAAF,IAAU,UAAV,IAAwBiJ,CAAC,CAACpQ,IAAF,IAAUA,IAAlD,CAAlB;;EACA,IAAI,CAACkQ,SAAL,EAAgB;IACd,MAAM,IAAIxJ,KAAJ,CAAW,OAAM1G,IAAK,YAAtB,CAAN;EACD,CAJqC,CAKtC;EACA;;;EACA,OAAOkQ,SAAP;AACD,CARM;;AASP,eAAeG,gCAAf,QAA4E;EAAA,IAA5B;IAAEC;EAAF,CAA4B;;EAC1E,IAAI,CAACA,sBAAL,EAA6B;IAC3B;IACA,OAAO;MACL7M,YAAY,EAAE5F,cAAc,CAAC8E,YADxB;MAELgB,eAAe,EAAE;IAFZ,CAAP;EAID;;EAED,IAAI2M,sBAAJ,EAA4B;IAC1B,OAAO;MACL7M,YAAY,EAAEpE,6BADT;MAELsE,eAAe,EAAEiD,UAAU,CACzBqJ,SAAS,CACPP,mBADO,EAEP,0CAFO,CADgB,EAKzB,EALyB;IAFtB,CAAP;EAUD,CAXD,MAWO;IACL;IACA,OAAO;MACLjM,YAAY,EAAE5F,cAAc,CAAC8E,YADxB;MAELgB,eAAe,EAAE;IAFZ,CAAP;EAID;AACF;;AACD,OAAO,MAAM4M,qBAAqB,GAAIC,aAAD,IAAmB;EACtD,OAAO;IACLxQ,IAAI,EAAEwQ,aAAa,CAACxQ,IADf;IAELyQ,WAAW,EAAED,aAAa,CAACC,WAFtB;IAGLtJ,IAAI,EAAEqJ,aAAa,CAACE,kBAHf;IAILC,UAAU,EAAEH,aAAa,CAACI,WAJrB;IAKLzQ,OAAO,EAAEqQ,aAAa,CAACrQ,OALlB;IAML0Q,WAAW,EAAEL,aAAa,CAACvQ,MANtB;IAOL6Q,mBAAmB,EAAE,CAACN,aAAa,CAACO,sBAP/B;IAQLC,oBAAoB,EAAE,CAACR,aAAa,CAACS,uBARhC;IASL9C,0BAA0B,EAAE,CAACqC,aAAa,CAACU,8BATtC;IAUL9C,2BAA2B,EAAE,CAACoC,aAAa,CAACW,+BAVvC;IAWL9C,sBAAsB,EAAE,CAACmC,aAAa,CAACY,0BAXlC;IAYL9C,uBAAuB,EAAE,CAACkC,aAAa,CAACa,2BAZnC;IAaLjR,QAAQ,EAAEoQ,aAAa,CAACnQ,SAbnB;IAcLiR,YAAY,EAAEd,aAAa,CAACe,aAdvB;IAeLC,QAAQ,EAAEhB,aAAa,CAACiB;EAfnB,CAAP;AAiBD,CAlBM;AAmBP,OAAO,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;EAChD,MAAM7Q,WAAW,GAAG,IAAIC,IAAJ,CAAU,GAAE4Q,UAAU,CAAC3Q,YAAa,GAApC,CAApB;EAEA,OAAO;IACLF,WADK;IAELd,IAAI,EAAE2R,UAAU,CAAC3R,IAFZ;IAGLyQ,WAAW,EAAEkB,UAAU,CAAClB,WAHnB;IAILmB,IAAI,EAAED,UAAU,CAACC,IAJZ;IAKLC,OAAO,EAAEF,UAAU,CAACE,OALf;IAMLC,MAAM,EAAEH,UAAU,CAACG,MANd;IAOLC,QAAQ,EAAEJ,UAAU,CAACI,QAPhB;IAQLC,gBAAgB,EAAEL,UAAU,CAACM,kBARxB;IASLC,WAAW,EAAEP,UAAU,CAACQ,YATnB;IAULC,aAAa,EAAE,CAACT,UAAU,CAACU,cAAX,IAA6B,EAA9B,EAAkCpL,GAAlC,CAAsCpH,aAAtC,CAVV;IAWLsO,0BAA0B,EAAE,CAACwD,UAAU,CAACT,8BAXnC;IAYL9C,2BAA2B,EAAE,CAACuD,UAAU,CAACR,+BAZpC;IAaL9C,sBAAsB,EAAE,CAACsD,UAAU,CAACP,0BAb/B;IAcL9C,uBAAuB,EAAE,CAACqD,UAAU,CAACN,2BAdhC;IAeLiB,aAAa,EAAEX,UAAU,CAACY,cAfrB;IAgBLnS,QAAQ,EAAEuR,UAAU,CAACtR,SAhBhB;IAiBLmS,aAAa,EAAEb,UAAU,CAACc,eAjBrB;IAkBLC,KAAK,EAAEf,UAAU,CAACe,KAlBb;IAmBLC,UAAU,EAAEhB,UAAU,CAACiB,MAnBlB;IAoBLtB,YAAY,EAAEK,UAAU,CAACkB,YApBpB;IAqBLrB,QAAQ,EAAEG,UAAU,CAACmB;EArBhB,CAAP;AAuBD,CA1BM;AA2BP,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;EACpC,OAAO;IACLC,QAAQ,EAAED,IAAI,CAACC;EADV,CAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,eAAe,GAAIC,OAAD,IAAa;EAC1C,OAAO;IACLhT,OAAO,EAAEgT,OAAO,CAAChT,OADZ;IAELiT,MAAM,EAAED,OAAO,CAACC,MAFX;IAGLC,aAAa,EAAEF,OAAO,CAACG,eAHlB;IAILN,IAAI,EAAEG,OAAO,CAACH,IAAR,GAAeD,YAAY,CAACI,OAAO,CAACH,IAAT,CAA3B,GAA4C;EAJ7C,CAAP;AAMD,CAPM;AAQP,OAAO,MAAMO,mBAAmB,GAAIC,WAAD,IAAiB;EAClD,OAAO;IACLC,WAAW,EAAEP,eAAe,CAACM,WAAW,CAACE,YAAb,CADvB;IAELC,SAAS,EAAET,eAAe,CAACM,WAAW,CAACI,UAAb,CAFrB;IAGL9S,WAAW,EAAE,IAAIC,IAAJ,CAAU,GAAEyS,WAAW,CAACxS,YAAa,GAArC,CAHR;IAIL6S,YAAY,EAAE,IAAI9S,IAAJ,CAAU,GAAEyS,WAAW,CAACM,aAAc,GAAtC,CAJT;IAKLC,eAAe,EAAEP,WAAW,CAACQ,gBALxB;IAMLC,gBAAgB,EAAET,WAAW,CAACU,iBANzB;IAOLC,WAAW,EAAEX,WAAW,CAACY,YAPpB;IAQLC,SAAS,EAAEb,WAAW,CAACc,UARlB;IASLC,SAAS,EAAE,IAAIxT,IAAJ,CAAU,GAAEyS,WAAW,CAACe,SAAU,GAAlC;EATN,CAAP;AAWD,CAZM;AAcP,OAAO,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;EAChD,OAAO;IACLC,SAAS,EAAED,UAAU,CAACE,UADjB;IAELC,cAAc,EAAEH,UAAU,CAACI,eAFtB;IAGLC,WAAW,EAAEL,UAAU,CAACM,YAHnB;IAILC,UAAU,EAAEP,UAAU,CAACQ,WAJlB;IAKLzB,WAAW,EAAEiB,UAAU,CAACjB,WAAX,GACTD,mBAAmB,CAACkB,UAAU,CAACjB,WAAZ,CADV,GAET,IAPC;IAQL3P,YAAY,EAAE4Q,UAAU,CAAC3Q,aAAX,GACVjE,aAAa,CAAC4U,UAAU,CAAC3Q,aAAZ,CADH,GAEV;EAVC,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMoR,aAAa,GAAI5P,KAAD,IAAW;EACtC,MAAM6P,UAAU,GAAG7P,KAAK,CAACjF,SAAN,IAAmBiF,KAAK,CAACjF,SAAN,CAAgB+U,QAAhB,CAAyB,MAAzB,CAAtC;EACA,MAAMC,KAAK,GAAG/P,KAAK,CAACjF,SAAN,IAAmBiF,KAAK,CAACjF,SAAN,CAAgB+U,QAAhB,CAAyB,MAAzB,CAAjC;EACA,MAAMrV,QAAQ,GAAG;IACfmN,OAAO,EAAE5H,KAAK,CAACU,QAAN,CAAeW,QAAf,EADM;IAEfoH,YAAY,EAAEzI,KAAK,CAACgQ,cAAN,CAAqBnV,OAFpB;IAGfH,IAAI,EAAEsF,KAAK,CAACtF,IAHG;IAIfyQ,WAAW,EAAEnL,KAAK,CAACmL,WAJJ;IAKf8E,KAAK,EAAEjQ,KAAK,CAACiQ,KALE;IAMf/E,aAAa,EAAED,qBAAqB,CAACjL,KAAK,CAACgQ,cAAP,CANrB;IAOf3D,UAAU,EAAED,kBAAkB,CAACpM,KAAK,CAACqM,UAAP,CAPf;IAQf6D,MAAM,EAAElQ,KAAK,CAACkQ,MAAN,GAAelQ,KAAK,CAACkQ,MAAN,CAAavO,GAAb,CAAiBrG,aAAjB,CAAf,GAAiD,IAR1C;IASf6U,UAAU,EAAEnQ,KAAK,CAACoQ,WAAN,GAAoBpQ,KAAK,CAACoQ,WAAN,CAAkBzO,GAAlB,CAAsBrG,aAAtB,CAApB,GAA2D,IATxD;IAUf+U,SAAS,EAAErQ,KAAK,CAACsQ,UAAN,GAAmBtQ,KAAK,CAACsQ,UAAN,CAAiB3O,GAAjB,CAAqBrG,aAArB,CAAnB,GAAyD,IAVrD;IAYfiV,SAAS,EAAEvQ,KAAK,CAACwQ,UAZF;IAaf;IACA1V,QAAQ,EACN+U,UAAU,IAAIE,KAAd,GACI/P,KAAK,CAACjF,SADV,GAEIiF,KAAK,CAACyQ,iBAAN,IAA2BzQ,KAAK,CAACjF,SAjBxB;IAkBf2V,eAAe,EAAE1Q,KAAK,CAACyQ,iBAlBR;IAmBfE,gBAAgB,EAAE3Q,KAAK,CAAC4Q,kBAnBT;IAoBfC,iBAAiB,EAAE7Q,KAAK,CAAC8Q,mBApBV;IAsBf9E,YAAY,EAAEhM,KAAK,CAACiM,aAtBL;IAuBf8E,WAAW,EAAE/Q,KAAK,CAACgR,SAvBJ;IAwBf1D,MAAM,EAAEtN,KAAK,CAACsN,MAxBC;IAyBf2D,QAAQ,EAAEjR,KAAK,CAACkR,SAzBD;IA0BfC,QAAQ,EAAEnR,KAAK,CAACoR,SAAN,GAAkBlC,kBAAkB,CAAClP,KAAK,CAACoR,SAAP,CAApC,GAAwD,IA1BnD;IA2BfC,eAAe,EAAErR,KAAK,CAACsR,gBAAN,GACZ,IAAGtR,KAAK,CAACsR,gBAAiB,EADd,GAEb,IA7BW;IA+BfrI,WAAW,EAAEjJ,KAAK,CAACuR,YAAN,GAAqB,IAAIxY,SAAJ,CAAciH,KAAK,CAACuR,YAApB,CAArB,GAAyD,IA/BvD;IAgCfC,uBAAuB,EAAExR,KAAK,CAACyR,0BAAN,GACrBlX,aAAa,CAACyF,KAAK,CAACyR,0BAAP,CADQ,GAErB;EAlCW,CAAjB,CAHsC,CAuCtC;;EACA,IAAIhX,QAAQ,CAACyV,MAAT,IAAmB,CAACzV,QAAQ,CAAC0V,UAAjC,EAA6C;IAC3C1V,QAAQ,CAAC0V,UAAT,GAAsB1V,QAAQ,CAACyV,MAAT,CAAgB/M,MAAhB,CAAwBuO,CAAD,IAAOA,CAAC,CAAChU,IAAF,IAAU,CAAxC,CAAtB;EACD;;EACD,IAAIjD,QAAQ,CAACyV,MAAT,IAAmB,CAACzV,QAAQ,CAAC4V,SAAjC,EAA4C;IAC1C5V,QAAQ,CAAC4V,SAAT,GAAqB5V,QAAQ,CAACyV,MAAT,CAAgB/M,MAAhB,CAAwBuO,CAAD,IAAOA,CAAC,CAAChU,IAAF,IAAU,CAAxC,CAArB;EACD;;EACD,OAAOjD,QAAP;AACD,CA/CM;AAgDP;AACA;AACA;AACA;AACA;AACA;;AACA,eAAekX,QAAf,QAAmD;EAAA,IAA3B;IAAElJ,YAAF;IAAgBb;EAAhB,CAA2B;EACjD,MAAM;IAAErH;EAAF,IAAW,MAAMvH,KAAK,CACzB,GAAEE,WAAY,SAAQuP,YAAa,IAAGb,OAAO,IAAI,CAAE,GAD1B,CAA5B;EAGA,OAAOgI,aAAa,CAACrP,IAAD,CAApB;AACD;;AACD,eAAeqR,cAAf,QAeG;EAAA,IAf2B;IAC5B5R,KAD4B;IAE5B7D,QAF4B;IAG5B4H,cAH4B;IAI5B4F,WAJ4B;IAK5BC,SAL4B;IAM5BxK,WAN4B;IAO5BE,cAP4B;IAQ5B6K,iBAR4B;IAS5BN,0BAA0B,GAAG,CATD;IAU5BgI,mBAV4B;IAW5BjJ,sBAX4B;IAWJ;IACxBkJ,YAZ4B;IAa5B7N,QAb4B;IAc5B8N,YAd4B,CAcd;;EAdc,CAe3B;EACDhO,cAAc,GAAGA,cAAc,CAACJ,WAAf,EAAjB;EACA,MAAMhD,MAAM,GAAGjI,YAAf,CAFC,CAE4B;;EAC7B,MAAMsZ,UAAU,GAAG,IAAIjZ,SAAJ,CAAc,CAAd,CAAnB;EACA,MAAMkZ,OAAO,GAAG7J,cAAc,CAACzH,MAAD,EAASX,KAAT,EAAgBgS,UAAhB,CAA9B;EAEA,IAAIxI,yBAAyB,GAAG0I,kBAAhC,CANC,CAMmD;;EACpD,IAAIlS,KAAK,CAACyI,YAAN,IAAsB,4CAA1B,EAAwE;IACtEe,yBAAyB,GAAG,CAA5B;EACD;;EACD,IAAID,wBAAwB,GAAG,CAA/B;EACA,IAAIH,uBAAuB,GAAG,CAA9B,CAXC,CAYD;;EACA,IAAInF,QAAQ,IAAII,YAAY,CAACC,OAA7B,EAAsC;IACpC;IACA,MAAM6N,IAAI,GAAG,MAAMxJ,WAAW,CAAC;MAC7B3I,KAAK,EAAE+R,YADsB;MAE7BrU,IAAI,EAAE,CAFuB;MAG7BkL,sBAH6B;MAI7B3E;IAJ6B,CAAD,CAA9B,CAFoC,CAOhC;;IACJuF,yBAAyB,GAAG2I,IAAI,CAAC3I,yBAAjC;IACAD,wBAAwB,GAAG4I,IAAI,CAAC5I,wBAAhC;IACAH,uBAAuB,GAAG+I,IAAI,CAAC/I,uBAA/B;EACD;;EAED,MAAM;IAAEvL,MAAF;IAAUG,QAAV;IAAoBC;EAApB,IAA2CwE,UAAU,CACzD9B,MADyD,EAEzDsR,OAFyD,EAGzDlO,cAHyD,EAIzD;EACA3I,wBAAwB,CAACC,IALgC,CAA3D;EAOAkI,OAAO,CAAC8D,GAAR,CAAYuC,SAAZ;EAEA,MAAMwI,aAAa,GAAGxI,SAAS,IAAI,IAAb,IAAqBA,SAAS,KAAKD,WAAnC,GAAiD,CAAjD,GAAqD,CAA3E,CAnCC,CAmC6E;;EAE9E,MAAM;IAAElL,SAAF;IAAaE,KAAb;IAAoBJ,YAApB;IAAkCwL;EAAlC,IACJ,MAAMN,mBAAmB,CACvB,CADuB,EAEvBoI,mBAFuB,EAGvBvS,cAHuB,EAIvBqK,WAJuB,EAKvBC,SALuB,EAMvBO,iBANuB,EAOvBN,0BAPuB,CAD3B;;EAWA,MAAMzF,KAAK,GAAGtD,kBAAkB,CAC9BxB,cAD8B,EAE9BF,WAF8B,EAG9B+K,iBAH8B,CAAhC;;EAMA,IAAI;IACF1N,eADE;IAEFE,eAFE;IAGFE,gBAHE;IAIFE,gBAJE;IAKFE,gBALE;IAMFQ,YANE;IAOFH;EAPE,IAQA4M,qBAAqB,CACvBX,wBADuB,EAEvBC,yBAFuB,EAGvBW,iBAHuB,EAIvBf,uBAJuB,CARzB;;EAcA,IAAInF,QAAQ,IAAII,YAAY,CAACC,OAA7B,EAAsC;IACpC7G,YAAY,GAAG8G,mBAAf;EACD;;EAED,MAAM;IAAEpG,YAAF;IAAgBE;EAAhB,IACJ,MAAM0M,gCAAgC,CAAC;IACrCC,sBAAsB,EAAEb;EADa,CAAD,CADxC;EAKA,OAAO;IACL/N,QAAQ,EAAE9B,eADL;IAELgC,KAAK,EAAEyH,cAFF;IAGLvH,KAAK,EAAEsV,YAHF;IAGgB;IACrB3V,QAAQ,EAAE6V,UAJL;IAKLvV,eALK;IAMLE,eANK;IAOLE,gBAPK;IAQLE,gBARK;IASLE,gBATK;IAULE,0BAA0B,EAAEgN,iBAVvB;IAWLN,0BAA0B,EAAEE,YAAY,GACpC,IAAIhR,SAAJ,CAAcgR,YAAd,CADoC,GAEpChK,SAbC;IAcLzC,SAdK;IAeLG,YAfK;IAgBLC,IAAI,EAAE,CAhBD;IAiBLC,QAAQ,EAAEyU,aAjBL;IAkBLvU,MAlBK;IAmBLC,SAAS,EACPD,MAAM,KAAKzC,wBAAwB,CAACC,IAApC,GACI7C,SAAS,CAAC6Z,YADd,GAEI7Z,SAAS,CAAC8Z,IAtBX;IAuBLtU,QAvBK;IAwBLC,kBAxBK;IAyBLE,YAzBK;IA0BLE,eA1BK;IA2BLE,YA3BK;IA4BLE,SA5BK;IA6BLE,KA7BK;IA8BLS,WAAW,EAAEgF,KAAK,CAAChF,WA9Bd;IA+BLE,cAAc,EAAE8E,KAAK,CAAC9E,cA/BjB;IAgCLE,IAAI,EAAEjH,cAAc,CAACkM,wBAAf,EAhCD;IAiCLvI,QAAQ,EAAE;MACR8D,KAAK,EAAEiS,OADC;MAERtR,MAAM,EAAEA,MAAM,CAACjG;IAFP;EAjCL,CAAP;AAsCD;;AACD,eAAe6X,mBAAf,QAA8E;EAAA,IAA3C;IAAEhX,KAAF;IAASwI,cAAT;IAAyB+B;EAAzB,CAA2C;EAC5E;EAEA,MAAM0M,SAAS,GAAG,MAAM1M,cAAc,CAAClD,SAAf,CACvB6P,wBADuB,CAEpB,CACElX,KAAK,CAACa,QADR,EAEEb,KAAK,CAACe,KAFR,EAGEf,KAAK,CAACiB,KAHR,EAIEjB,KAAK,CAACkC,YAJR,EAKElC,KAAK,CAACsC,MALR,EAMEtC,KAAK,CAAC4C,YANR,EAOE5C,KAAK,CAACgD,YAPR,CAFoB,EAWpB,CACE,MAAMqF,OAAN,EADF,EAEE,MAAMA,OAAN,EAFF,EAGErI,KAAK,CAACsB,gBAAN,CAAuB+G,OAAvB,EAHF,EAIErI,KAAK,CAACwB,gBAAN,CAAuB6G,OAAvB,EAJF,EAKE,IAAIA,OAAJ,EALF,EAME,IAAIA,OAAJ,EANF,EAOErI,KAAK,CAAC6D,WAAN,CAAkBwE,OAAlB,EAPF,EAQErI,KAAK,CAAC+D,cAAN,CAAqBsE,OAArB,EARF,EASErI,KAAK,CAACiE,IAAN,CAAWoE,OAAX,EATF,CAXoB,EAsBpBrI,KAAK,CAAC+B,SAtBc,EAuBpB/B,KAAK,CAACmC,IAvBc,EAwBpBnC,KAAK,CAACoC,QAxBc,EAyBpBpC,KAAK,CAACuC,SAzBc,EA0BpBvC,KAAK,CAACyC,QA1Bc,EA2BpBzC,KAAK,CAAC0C,kBA3Bc,EA4BpB1C,KAAK,CAAC8C,eA5Bc,CAAxB,CAH4E,CAiC1E;;EAEF,IAAI,CAACmU,SAAL,EAAgB;IACdjP,OAAO,CAACC,KAAR,CAAcjI,KAAd;IACA,MAAM,IAAI6F,KAAJ,CACH,kFADG,CAAN;EAGD;;EACD,OAAOoR,SAAP;AACD;;AACD,eAAerK,aAAf,QAAwE;EAAA,IAA3C;IAAE5M,KAAF;IAASwI,cAAT;IAAyB+B;EAAzB,CAA2C;EACtE;EAEA,MAAM0M,SAAS,GAAG,MAAM1M,cAAc,CAAClD,SAAf,CACrB8P,cADqB,CAEpB,CACEnX,KAAK,CAACa,QADR,EAEEb,KAAK,CAACe,KAFR,EAGEf,KAAK,CAACiB,KAHR,EAIEjB,KAAK,CAACkC,YAJR,EAKElC,KAAK,CAACsC,MALR,EAMEtC,KAAK,CAAC4C,YANR,EAOE5C,KAAK,CAACgD,YAPR,CAFoB,EAWpB,CACE,MAAMqF,OAAN,EADF,EAEE,IAAIA,OAAJ,EAFF,EAGErI,KAAK,CAACsB,gBAHR,EAIEtB,KAAK,CAACwB,gBAJR,EAKE,IAAI6G,OAAJ,EALF,EAME,IAAIA,OAAJ,EANF,EAOErI,KAAK,CAAC6D,WAPR,EAQE7D,KAAK,CAAC+D,cARR,EASE/D,KAAK,CAACiE,IATR,CAXoB,EAsBpBjE,KAAK,CAAC+B,SAtBc,EAuBpB/B,KAAK,CAACmC,IAvBc,EAwBpBnC,KAAK,CAACoC,QAxBc,EAyBpBpC,KAAK,CAACuC,SAzBc,EA0BpBvC,KAAK,CAACyC,QA1Bc,EA2BpBzC,KAAK,CAAC0C,kBA3Bc,EA4BpB1C,KAAK,CAAC8C,eA5Bc,EA6BpB9C,KAAK,CAACkE,CA7Bc,EA8BpBlE,KAAK,CAACoE,CA9Bc,EA+BpBpE,KAAK,CAACqE,CA/Bc,CAAxB,CAHsE,CAoCpE;;EACF,IAAI,CAAC4S,SAAL,EAAgB;IACd;IACA,MAAM;MACJG,OAAO,EAAE,IAAIvR,KAAJ,CACN,kFADM,CADL;MAIJwR,IAAI,EAAE;IAJF,CAAN,CAFc,CAQd;EACD;;EACD,OAAOJ,SAAP;AACD,C,CACD;AACA;;;AACA,eAAeK,iBAAf,CAAiCC,SAAjC,EAA4C;EAC1C;EACA;EACA;EACA;EACA,MAAMC,iBAAiB,GAAG,CAAC,EAAD,EAAK,EAAL,CAA1B;;EAEA,MAAMC,cAAc,GAAGC,uBAAuB,CAACH,SAAD,CAA9C;;EACA,IAAI7Z,CAAC,CAACia,QAAF,CAAWH,iBAAX,EAA8BC,cAAc,CAACvT,CAA7C,CAAJ,EAAqD;IACnD,OAAOuT,cAAP;EACD,CAVyC,CAY1C;;;EACA,MAAMG,cAAc,GAAGC,uBAAuB,CAACN,SAAD,CAA9C;;EACA,IAAI7Z,CAAC,CAACia,QAAF,CAAWH,iBAAX,EAA8BI,cAAc,CAAC1T,CAA7C,CAAJ,EAAqD;IACnD,OAAO0T,cAAP;EACD;;EAED,MAAM,IAAI/R,KAAJ,CAAU,mBAAV,CAAN;;EAEA,SAASgS,uBAAT,CAAiCC,YAAjC,EAA+C;IAC7C,MAAMC,eAAe,GAAG1a,OAAO,CAAC2a,QAAR,CAAiBF,YAAjB,CAAxB;IACA,IAAI5T,CAAC,GAAG6T,eAAe,CAAC,CAAD,CAAvB;;IACA,IAAI7T,CAAC,GAAG,EAAR,EAAY;MACVA,CAAC,IAAI,EAAL;IACD;;IACD,MAAME,CAAC,GAAG2T,eAAe,CAACrR,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAAV;IACA,MAAMrC,CAAC,GAAG0T,eAAe,CAACrR,KAAhB,CAAsB,EAAtB,EAA0B,EAA1B,CAAV;IACA,MAAMuR,WAAW,GAAG;MAClB/T,CADkB;MAElBE,CAAC,EAAE/G,OAAO,CAAC6a,WAAR,CAAoB9T,CAApB,CAFe;MAGlBC,CAAC,EAAEhH,OAAO,CAAC6a,WAAR,CAAoB7T,CAApB;IAHe,CAApB;IAKA,OAAO4T,WAAP;EACD;;EAED,SAASP,uBAAT,CAAiCI,YAAjC,EAA+C;IAC7C,MAAM;MAAE5T,CAAF;MAAKE,CAAL;MAAQC;IAAR,IAAchH,OAAO,CAAC8a,UAAR,CAAmBL,YAAnB,CAApB;IACA,MAAMG,WAAW,GAAG;MAClB/T,CADkB;MAElBE,CAAC,EAAE/G,OAAO,CAAC6a,WAAR,CAAoB9T,CAApB,CAFe;MAGlBC,CAAC,EAAEhH,OAAO,CAAC6a,WAAR,CAAoB7T,CAApB;IAHe,CAApB;IAKA,OAAO4T,WAAP;EACD;AACF;;AACD,eAAeG,iBAAf,CAAiC3L,QAAjC,EAA2C2K,OAA3C,EAAoDiB,aAApD,EAAmE;EACjE,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC,MAAMC,QAAQ,GAAG,OAAOC,GAAP,EAAYnB,SAAZ,KAA0B;MACzC,IAAImB,GAAJ,EAASF,MAAM,CAACE,GAAD,CAAN;;MAET,IAAInB,SAAS,CAACtP,KAAd,EAAqB;QACnBuQ,MAAM,CAACjB,SAAS,CAACtP,KAAV,CAAgBmP,OAAjB,CAAN;MACD;;MACDmB,OAAO,CAACjB,iBAAiB,CAACC,SAAS,CAACoB,MAAX,CAAlB,CAAP,CANyC,CAOzC;MACA;MACA;MACA;MACA;MAEA;MAEA;MACA;MACA;MACA;IACD,CAnBD,CADsC,CAqBtC;;;IACAlM,QAAQ,CAACmM,SAAT,CACE;MACEC,MAAM,EAAE,eADV;MAEEC,MAAM,EAAE,CAAC1B,OAAD,EAAUiB,aAAV,CAFV;MAGEzM,IAAI,EAAEyM;IAHR,CADF,EAMEI,QANF;EAQD,CA9BM,CAAP;AA+BD;;AACD,OAAO,eAAeM,kBAAf,CAAkCtM,QAAlC,EAA4C2K,OAA5C,EAAqDiB,aAArD,EAAoE;EACzE,IAAId,SAAJ;EACAvP,OAAO,CAAC8D,GAAR,CAAYuM,aAAZ;EACA,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC,MAAMC,QAAQ,GAAG,OAAOC,GAAP,EAAYC,MAAZ,KAAuB;MACtC3Q,OAAO,CAAC8D,GAAR,CAAY4M,GAAZ;MACA,IAAIA,GAAJ,EAASF,MAAM,CAACE,GAAD,CAAN;;MACT,IAAIC,MAAM,CAAC1Q,KAAX,EAAkB;QAChBuQ,MAAM,CAACG,MAAM,CAAC1Q,KAAP,CAAamP,OAAd,CAAN;MACD,CALqC,CAMtC;;;MACA,IAAIuB,MAAM,CAAC1Q,KAAX,EAAkB,OAAOuQ,MAAM,CAAC,OAAD,EAAUG,MAAV,CAAb,CAPoB,CAQtC;MACA;MAEA;MACA;MACA;MAEA;;MACAJ,OAAO,CAACjB,iBAAiB,CAACqB,MAAM,CAACA,MAAR,CAAlB,CAAP;IACD,CAjBD;;IAkBA,MAAMK,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAe,EAAE,GAAG9B;IAAL,CAAf,CAApB;;IAEA,IAAI;MACF;MACA3K,QAAQ,CAACmM,SAAT,CACE;QACEC,MAAM,EAAE,sBADV;QAEEC,MAAM,EAAE,CAACT,aAAD,EAAgBW,WAAhB,CAFV;QAGEpN,IAAI,EAAEyM,aAHR;QAIEnT,EAAE,EAAE,IAAIhF,IAAJ,GAAW0D,OAAX;MAJN,CADF,EAOE6U,QAPF;IASD,CAXD,CAWE,OAAOxQ,KAAP,EAAc;MACdD,OAAO,CAAC8D,GAAR,CAAY7D,KAAZ,EADc,CAEd;MACA;;MACAwE,QAAQ,CAACmM,SAAT,CACE;QACEC,MAAM,EAAE,mBADV;QAEEC,MAAM,EAAE,CAACT,aAAD,EAAgBjB,OAAhB,CAFV;QAGExL,IAAI,EAAEyM,aAHR;QAIEnT,EAAE,EAAE,IAAIhF,IAAJ,GAAW0D,OAAX;MAJN,CADF,EAOE6U,QAPF;IASD;EACF,CA9CM,CAAP;AA+CD;;AACD,eAAeU,eAAf,SAA2D;EAAA,IAA5B;IAAEnZ,KAAF;IAASyM,QAAT;IAAmB2M;EAAnB,CAA4B;EACzD;EACA,MAAMf,aAAa,GAAGrY,KAAK,CAACe,KAA5B,CAFyD,CAGzD;;EACA,IACEf,KAAK,CAACa,QAAN,KACEmJ,wBAAwB,CAAClK,IAAzB,CAA8BmK,6BADhC,IAEAjK,KAAK,CAACI,IAHR,EAIE;IACA,MAAMgX,OAAO,GAAGpX,KAAK,CAACI,IAAtB,CADA,CAEA;;IACA,OAAO,MAAMgY,iBAAiB,CAAC3L,QAAD,EAAW2K,OAAX,EAAoBiB,aAApB,CAA9B;EACD,CAZwD,CAazD;EAEA;;;EACA,MAAMgB,eAAe,GAAG;IACtBtY,KAAK,EAAEf,KAAK,CAACe,KADS;IAEtBF,QAAQ,EAAEb,KAAK,CAACa,QAFM;IAGtBI,KAAK,EAAEjB,KAAK,CAACiB,KAHS;IAItBC,eAAe,EAAElB,KAAK,CAACkB,eAAN,CAAsB4E,QAAtB,EAJK;IAKtB1E,eAAe,EAAEpB,KAAK,CAACoB,eAAN,CAAsB0E,QAAtB,EALK;IAMtBxE,gBAAgB,EAAEtB,KAAK,CAACsB,gBAAN,CAAuBwE,QAAvB,EANI;IAOtBtE,gBAAgB,EAAExB,KAAK,CAACwB,gBAAN,CAAuBsE,QAAvB,EAPI;IAQtB5D,YAAY,EAAElC,KAAK,CAACkC,YARE;IAStBH,SAAS,EAAE/B,KAAK,CAAC+B,SATK;IAUtBI,IAAI,EAAEnC,KAAK,CAACmC,IAVU;IAWtBC,QAAQ,EAAEpC,KAAK,CAACoC,QAXM;IAYtBE,MAAM,EAAEtC,KAAK,CAACsC,MAZQ;IAatBC,SAAS,EAAEvC,KAAK,CAACuC,SAbK;IActBE,QAAQ,EAAEzC,KAAK,CAACyC,QAdM;IAetBC,kBAAkB,EAAE1C,KAAK,CAAC0C,kBAfJ;IAgBtBE,YAAY,EAAE5C,KAAK,CAAC4C,YAhBE;IAiBtBE,eAAe,EAAE9C,KAAK,CAAC8C,eAjBD;IAkBtBE,YAAY,EAAEhD,KAAK,CAACgD,YAlBE;IAmBtBE,SAAS,EAAElD,KAAK,CAACkD,SAAN,CAAgB4C,QAAhB,EAnBW;IAoBtB1C,KAAK,EAAEpD,KAAK,CAACoD,KAAN,CAAY0C,QAAZ,EApBe;IAqBtBjC,WAAW,EAAE7D,KAAK,CAAC6D,WAAN,CAAkBiC,QAAlB,EArBS;IAsBtB/B,cAAc,EAAE/D,KAAK,CAAC+D,cAAN,CAAqB+B,QAArB,EAtBM;IAuBtB7B,IAAI,EAAEjE,KAAK,CAACiE,IAAN,CAAW6B,QAAX;EAvBgB,CAAxB,CAhByD,CA0CzD;EACA;;EACA,MAAMsR,OAAO,GAAG;IACdkC,KAAK,EAAE3a,gBADO;IAEd4a,MAAM,EAAE;MACNpa,IAAI,EAAEP,sBADA;MAEN4a,OAAO,EAAE3a,yBAFH;MAGN4a,OAAO,EAAE,CAHH;MAINC,iBAAiB,EAAE1Z,KAAK,CAACa;IAJnB,CAFM;IAQd8Y,WAAW,EAAE,OARC;IASdvC,OAAO,EAAE,EAAE,GAAGiC,eAAL;MAAsBD;IAAtB;EATK,CAAhB;EAWA,MAAMnB,WAAW,GAAG,MAAMc,kBAAkB,CAC1CtM,QAD0C,EAE1C2K,OAF0C,EAG1CiB,aAH0C,CAA5C;EAKA,OAAO,EAAE,GAAGJ,WAAL;IAAkBmB;EAAlB,CAAP;AACD;AACD;AACA;AACA;AACA;;;AACA,MAAMQ,WAAW,GAAI5Z,KAAD,IAAW;EAC7B,MAAM6Z,MAAM,GAAG;IACbhZ,QAAQ,EAAEb,KAAK,CAACa,QAAN,CAAeuH,WAAf,EADG;IAEbrH,KAAK,EAAEf,KAAK,CAACe,KAAN,CAAYqH,WAAZ,EAFM;IAGbnH,KAAK,EAAEjB,KAAK,CAACiB,KAAN,CAAYmH,WAAZ,EAHM;IAIblH,eAAe,EAAElB,KAAK,CAACkB,eAAN,CAAsB4E,QAAtB,EAJJ;IAKb1E,eAAe,EAAEpB,KAAK,CAACoB,eAAN,CAAsB0E,QAAtB,EALJ;IAMbxE,gBAAgB,EAAEtB,KAAK,CAACsB,gBAAN,CAAuBwE,QAAvB,EANL;IAObtE,gBAAgB,EAAExB,KAAK,CAACwB,gBAAN,CAAuBsE,QAAvB,EAPL;IAQbpE,gBAAgB,EAAE1B,KAAK,CAAC0B,gBAAN,CAAuBoE,QAAvB,EARL;IASb/D,SAAS,EAAE/B,KAAK,CAAC+B,SATJ;IAUbG,YAAY,EAAElC,KAAK,CAACkC,YAAN,CAAmBkG,WAAnB,EAVD;IAWbjG,IAAI,EAAEnC,KAAK,CAACmC,IAXC;IAYbC,QAAQ,EAAEpC,KAAK,CAACoC,QAZH;IAabE,MAAM,EAAEtC,KAAK,CAACsC,MAAN,CAAa8F,WAAb,EAbK;IAcb7F,SAAS,EAAEvC,KAAK,CAACuC,SAdJ;IAebE,QAAQ,EAAEzC,KAAK,CAACyC,QAfH;IAgBbC,kBAAkB,EAAE1C,KAAK,CAAC0C,kBAhBb;IAiBbE,YAAY,EAAE5C,KAAK,CAAC4C,YAAN,CAAmBwF,WAAnB,EAjBD;IAkBbtF,eAAe,EAAE9C,KAAK,CAAC8C,eAlBV;IAmBbE,YAAY,EAAEhD,KAAK,CAACgD,YAAN,CAAmBoF,WAAnB,EAnBD;IAoBbxH,QAAQ,EAAEZ,KAAK,CAACY,QAAN,CAAekF,QAAf,EApBG;IAqBb5C,SAAS,EAAElD,KAAK,CAACkD,SAAN,CAAgB4C,QAAhB,EArBE;IAsBbwI,0BAA0B,EAAEtO,KAAK,CAACsO,0BAAN,GACxBtO,KAAK,CAACsO,0BAAN,CAAiCxI,QAAjC,EADwB,GAExBtB,SAxBS;IAyBbpB,KAAK,EAAEpD,KAAK,CAACoD,KAAN,CAAY0C,QAAZ,EAzBM;IA0BbrC,WAAW,EAAEzD,KAAK,CAACyD,WAAN,GAAoBzD,KAAK,CAACyD,WAAN,CAAkBqC,QAAlB,EAApB,GAAmDtB,SA1BnD;IA2BbX,WAAW,EAAE7D,KAAK,CAAC6D,WAAN,CAAkBiC,QAAlB,EA3BA;IA4Bb/B,cAAc,EAAE/D,KAAK,CAAC+D,cAAN,CAAqB+B,QAArB,EA5BH;IA6Bb7B,IAAI,EAAEjE,KAAK,CAACiE,IAAN,CAAW6B,QAAX,EA7BO;IA+BbnF,QAAQ,EAAEX,KAAK,CAACW,QA/BH;IAiCbuD,CAAC,EAAElE,KAAK,CAACkE,CAjCI;IAkCbE,CAAC,EAAEpE,KAAK,CAACoE,CAlCI;IAmCbC,CAAC,EAAErE,KAAK,CAACqE,CAnCI;IAoCb+U,KAAK,EAAEpZ,KAAK,CAACoZ;EApCA,CAAf;EAsCA,OAAOS,MAAP;AACD,CAxCD;;AAyCA,eAAeC,SAAf,CAAyB9Z,KAAzB,EAA6C;EAAA,IAAb+Z,OAAa,uEAAH,CAAG;;EAC3C,IAAI;IACF,MAAM;MAAE/U;IAAF,IAAW,MAAMvH,KAAK,CAACuc,IAAN,CACpB,+CADoB,EAErBha,KAFqB,EAGrB;MACEia,OAAO,EAAE;QACP,aAAarc;MADN;IADX,CAHqB,CAAvB;IASA,OAAOoH,IAAP;EACD,CAXD,CAWE,OAAOiD,KAAP,EAAc;IACd,MAAM,IAAIpC,KAAJ,CAAUoC,KAAV,CAAN;EACD;AACF;AACD;AACA;AACA;AACA;;;AACA,MAAMiS,gBAAgB,GAAIla,KAAD,IAAW;EAClC,MAAM6Z,MAAM,GAAG;IACbhZ,QAAQ,EAAEb,KAAK,CAACa,QAAN,CAAeuH,WAAf,EADG;IAEbrH,KAAK,EAAE;MAAEzB,OAAO,EAAEU,KAAK,CAACe,KAAN,CAAYqH,WAAZ;IAAX,CAFM;IAGbnH,KAAK,EAAE;MAAE3B,OAAO,EAAEU,KAAK,CAACiB,KAAN,CAAYmH,WAAZ;IAAX,CAHM;IAIbjH,iBAAiB,EAAEnB,KAAK,CAACkB,eAAN,CAAsB4E,QAAtB,EAJN;IAKbzE,iBAAiB,EAAErB,KAAK,CAACoB,eAAN,CAAsB0E,QAAtB,EALN;IAMbvE,kBAAkB,EAAEvB,KAAK,CAACsB,gBAAN,CAAuBwE,QAAvB,EANP;IAObrE,kBAAkB,EAAEzB,KAAK,CAACwB,gBAAN,CAAuBsE,QAAvB,EAPP;IAQbpE,gBAAgB,EAAE1B,KAAK,CAAC0B,gBAAN,CAAuBoE,QAAvB,EARL;IASb9D,UAAU,EAAEhC,KAAK,CAAC+B,SATL;IAUbF,aAAa,EAAE;MAAEvC,OAAO,EAAEU,KAAK,CAACkC,YAAN,CAAmBkG,WAAnB;IAAX,CAVF;IAWbjG,IAAI,EAAEnC,KAAK,CAACmC,IAXC;IAYbE,SAAS,EAAErC,KAAK,CAACoC,QAZJ;IAabE,MAAM,EAAEtC,KAAK,CAACsC,MAAN,CAAa8F,WAAb,EAbK;IAcb5F,WAAW,EAAExC,KAAK,CAACuC,SAdN;IAebE,QAAQ,EAAEzC,KAAK,CAACyC,QAfH;IAgBbE,mBAAmB,EAAE3C,KAAK,CAAC0C,kBAhBd;IAiBbG,aAAa,EAAE7C,KAAK,CAAC4C,YAAN,CAAmBwF,WAAnB,EAjBF;IAkBbrF,gBAAgB,EAAE/C,KAAK,CAAC8C,eAlBX;IAmBbG,aAAa,EAAEjD,KAAK,CAACgD,YAAN,CAAmBoF,WAAnB,EAnBF;IAoBbxH,QAAQ,EAAEZ,KAAK,CAACY,QAAN,CAAekF,QAAf,EApBG;IAqBb3C,UAAU,EAAEnD,KAAK,CAACkD,SAAN,CAAgB4C,QAAhB,EArBC;IAsBbwI,0BAA0B,EAAEtO,KAAK,CAACsO,0BAAN,GACxBtO,KAAK,CAACsO,0BAAN,CAAiCxI,QAAjC,EADwB,GAExBtB,SAxBS;IAyBbpB,KAAK,EAAEpD,KAAK,CAACoD,KAAN,CAAY0C,QAAZ,EAzBM;IA0BbrC,WAAW,EAAEzD,KAAK,CAACyD,WAAN,GAAoBzD,KAAK,CAACyD,WAAN,CAAkBqC,QAAlB,EAApB,GAAmDtB,SA1BnD;IA2BbV,YAAY,EAAE9D,KAAK,CAAC6D,WAAN,CAAkBiC,QAAlB,EA3BD;IA4Bb9B,eAAe,EAAEhE,KAAK,CAAC+D,cAAN,CAAqB+B,QAArB,EA5BJ;IA6Bb7B,IAAI,EAAEjE,KAAK,CAACiE,IAAN,CAAW6B,QAAX,EA7BO;IA8BbnF,QAAQ,EAAEX,KAAK,CAACW,QA9BH;IA+BbuD,CAAC,EAAElE,KAAK,CAACkE,CA/BI;IAgCbE,CAAC,EAAEpE,KAAK,CAACoE,CAhCI;IAiCbC,CAAC,EAAErE,KAAK,CAACqE,CAjCI;IAkCb8V,aAAa,EAAEna,KAAK,CAACI;EAlCR,CAAf;EAoCA,OAAOyZ,MAAP;AACD,CAtCD;AAuCA;AACA;AACA;AACA;AACA;;;AACA,eAAeO,oBAAf,SAAyD;EAAA,IAArB;IAAEpa,KAAF;IAAS0I;EAAT,CAAqB;EACvD;EAEA,OAAOA,QAAQ,IAAII,YAAY,CAACC,OAAzB,GACH6Q,WAAW,CAAC5Z,KAAD,CADR,GAEHka,gBAAgB,CAACla,KAAD,CAFpB;AAGD;;AAED,SAASqa,aAAT,SAA4C;EAAA,IAArB;IAAE5N,QAAF;IAAYzM;EAAZ,CAAqB;EAC1C,MAAMuK,cAAc,GAAGzL,cAAc,CAAC2N,QAAD,CAArC,CAD0C,CAE1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,OAAOlC,cAAc,CAACC,OAAf,CAAuB8P,YAAvB,CACL,CACEta,KAAK,CAACa,QADR,EAEEb,KAAK,CAACe,KAFR,EAGEf,KAAK,CAACiB,KAHR,EAIEjB,KAAK,CAACkC,YAJR,EAKElC,KAAK,CAACsC,MALR,EAMEtC,KAAK,CAAC4C,YANR,EAOE5C,KAAK,CAACgD,YAPR,CADK,EAUL,CACEhD,KAAK,CAACkB,eADR,EAEElB,KAAK,CAACoB,eAFR,EAGEpB,KAAK,CAACsB,gBAHR,EAIEtB,KAAK,CAACwB,gBAJR,EAKExB,KAAK,CAACkD,SALR,EAMElD,KAAK,CAACoD,KANR,EAOEpD,KAAK,CAAC6D,WAPR,EAQE7D,KAAK,CAAC+D,cARR,EASE/D,KAAK,CAACiE,IATR,CAVK,EAqBLjE,KAAK,CAAC+B,SArBD,EAsBL/B,KAAK,CAACmC,IAtBD,EAuBLnC,KAAK,CAACoC,QAvBD,EAwBLpC,KAAK,CAACuC,SAxBD,EAyBLvC,KAAK,CAACyC,QAzBD,EA0BLzC,KAAK,CAAC0C,kBA1BD,EA2BL1C,KAAK,CAAC8C,eA3BD,EA4BL9C,KAAK,CAACkE,CAAN,IAAW,CA5BN,EA6BLlE,KAAK,CAACoE,CAAN,IAAWsH,eA7BN,EA8BL1L,KAAK,CAACqE,CAAN,IAAWqH,eA9BN,CAAP;AAgCD;;AAED,eAAe6O,eAAf,SAiBG;EAAA,IAjB4B;IAC7B9N,QAD6B;IAE7BhI,KAF6B;IAG7B+D,cAH6B;IAI7B4F,WAJ6B;IAK7BC,SAL6B;IAM7BzN,QAAQ,GAAG,CANkB;IAO7BiD,WAP6B;IAQ7BE,cAAc,GAAG,CARY;IAS7B6K,iBAAiB,GAAG,KATS;IAU7BN,0BAV6B;IAW7BgI,mBAX6B;IAY7BjJ,sBAAsB,GAAG,CAZI;IAa7BkJ,YAb6B;IAc7BK,IAd6B;IAe7BlO,QAAQ,GAAGI,YAAY,CAACC,OAfK;IAgB7ByR;EAhB6B,CAiB5B;EACD,MAAMxa,KAAK,GAAG,MAAMqW,cAAc,CAAC;IACjC5R,KADiC;IAEjC7D,QAFiC;IAGjC4H,cAHiC;IAIjC4F,WAJiC;IAKjCC,SALiC;IAMjCxK,WANiC;IAOjCE,cAPiC;IAQjC6K,iBARiC;IASjCN,0BATiC;IAUjCgI,mBAAmB,EAAEA,mBAAmB,IAAItZ,cAAc,CAAC8E,YAV1B;IAWjCuL,sBAXiC;IAYjC3E,QAZiC;IAajC8N,YAAY,EAAEI,IAbmB;IAcjCL,YAAY,EAAEA,YAAY,IAAIvZ,cAAc,CAAC8E;EAdZ,CAAD,CAAlC;EAgBA,MAAMyI,cAAc,GAAGzL,cAAc,CAAC2N,QAAD,CAArC;EACA,MAAMuK,mBAAmB,CAAC;IAAEhX,KAAF;IAASwI,cAAT;IAAyB+B;EAAzB,CAAD,CAAzB;EACA,MAAMkQ,WAAW,GAAG,EAClB,GAAGza,KADe;IAElBI,IAAI,EAAE8H,YAAY,CAAClI,KAAD;EAFA,CAApB;EAIA,MAAMoZ,KAAK,GAAGsB,MAAM,CAClB,MAAMnQ,cAAc,CAAClD,SAAf,CAAyBsT,MAAzB,CAAgCnS,cAAhC,CADY,CAApB;EAGA,IAAI+O,SAAJ;;EACA,IAAI;IACFA,SAAS,GAAG,MAAM4B,eAAe,CAAC;MAAE1M,QAAF;MAAYzM,KAAK,EAAEya,WAAnB;MAAgCrB;IAAhC,CAAD,CAAjC;EACD,CAFD,CAEE,OAAOnR,KAAP,EAAc;IACdD,OAAO,CAACC,KAAR,CAAcA,KAAd;IACA,MAAM,IAAIpC,KAAJ,CAAU,wCAAV,CAAN;EACD;;EACD,MAAM+U,kBAAkB,GAAG,EACzB,GAAGH,WADsB;IAEzB,GAAGlD;EAFsB,CAA3B;EAIA,OAAO6C,oBAAoB,CAAC;IAAEpa,KAAK,EAAE4a,kBAAT;IAA6BlS;EAA7B,CAAD,CAA3B;AACD;;AAED,SAAS8D,YAAT,EAAuB+N,eAAvB,EAAwCF,aAAxC,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}