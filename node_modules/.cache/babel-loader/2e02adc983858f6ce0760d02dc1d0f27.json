{"ast":null,"code":"// Wyvern\nimport { WyvernProtocol } from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\"; // Ethereum\n\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\"; // Other\n\nimport axios from \"axios\"; // import * as _ from \"lodash\";\n// Constants\n\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { OPENSEA_FEE_RECIPIENT, NULL_BLOCK_HASH, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport { mainnetWyvernConfigByNetwork } from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\";\nimport { StaticCheckTxOrigin } from \"./Constants\"; // Contracts\n\nimport { WyvernContract } from \"./contracts\"; // Methods\n\nimport createOrder from \"./methods/CreateOrder\";\nimport cancelOrder from \"./methods/CancelOrder\";\nimport performOrder from \"./methods/PerformOrder\"; // Helpers\n\nimport encodeSell from \"./helpers/EncodeSell\";\nimport signTypedDataAsync from \"./helpers/SignTypedDataAsync\";\nimport encodeCall from \"./helpers/EncodeCall\"; // FUNCTIONS\n\nconst tokenFromJSON = token => {\n  const fromJSON = {\n    name: token.name,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    address: token.address,\n    imageUrl: token.image_url,\n    ethPrice: token.eth_price,\n    usdPrice: token.usd_price\n  };\n  return fromJSON;\n}; // const orderFromJSON = (order) => {\n//     const createdDate = new Date(`${order.created_date}Z`);\n//     const fromJSON = {\n//         hash: order.order_hash || order.hash,\n//         cancelledOrFinalized: order.cancelled || order.finalized,\n//         markedInvalid: order.marked_invalid,\n//         metadata: order.metadata,\n//         quantity: new BigNumber(order.quantity || 1),\n//         exchange: order.exchange,\n//         makerAccount: order.maker,\n//         takerAccount: order.taker,\n//         // Use string address to conform to Wyvern Order schema\n//         maker: order.maker.address,\n//         taker: order.taker.address,\n//         makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n//         takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n//         makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n//         takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n//         makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n//         waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n//         feeMethod: order.fee_method,\n//         feeRecipientAccount: order.fee_recipient,\n//         feeRecipient: order.fee_recipient.address,\n//         side: order.side,\n//         saleKind: order.sale_kind,\n//         target: order.target,\n//         howToCall: order.how_to_call,\n//         calldata: order.calldata,\n//         replacementPattern: order.replacement_pattern,\n//         staticTarget: order.static_target,\n//         staticExtradata: order.static_extradata,\n//         paymentToken: order.payment_token,\n//         basePrice: new BigNumber(order.base_price),\n//         extra: new BigNumber(order.extra),\n//         currentBounty: new BigNumber(order.current_bounty || 0),\n//         currentPrice: new BigNumber(order.current_price || 0),\n//         createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n//         listingTime: new BigNumber(order.listing_time),\n//         expirationTime: new BigNumber(order.expiration_time),\n//         salt: new BigNumber(order.salt),\n//         v: parseInt(order.v),\n//         r: order.r,\n//         s: order.s,\n//         paymentTokenContract: order.payment_token_contract\n//           ? tokenFromJSON(order.payment_token_contract)\n//           : undefined,\n//         asset: order.asset,\n//         assetBundle: order.asset_bundle,\n//     };\n//     // Use client-side price calc, to account for buyer fee (not added by server) and latency\n//     fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n//     return fromJSON;\n// };\n\n\nfunction assignOrdersToSides(order, matchingOrder) {\n  const isSellOrder = order.side == 1;\n  let buy;\n  let sell;\n\n  if (!isSellOrder) {\n    buy = order;\n    sell = { ...matchingOrder,\n      v: buy.v,\n      r: buy.r,\n      s: buy.s\n    };\n  } else {\n    sell = order;\n    buy = { ...matchingOrder,\n      v: sell.v,\n      r: sell.r,\n      s: sell.s\n    };\n  }\n\n  return {\n    buy,\n    sell\n  };\n}\n\n;\n\nconst assetContractFromJSON = assetContract => {\n  return {\n    name: assetContract.name,\n    description: assetContract.description,\n    type: assetContract.assetContract_type,\n    schemaName: assetContract.schema_name,\n    address: assetContract.address,\n    tokenSymbol: assetContract.symbol,\n    buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n    sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n    openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n    imageUrl: assetContract.image_url,\n    externalLink: assetContract.external_link,\n    wikiLink: assetContract.wiki_link\n  };\n};\n\nexport const collectionFromJSON = collection => {\n  const createdDate = new Date(`${collection.created_date}Z`);\n  return {\n    createdDate,\n    name: collection.name,\n    description: collection.description,\n    slug: collection.slug,\n    editors: collection.editors,\n    hidden: collection.hidden,\n    featured: collection.featured,\n    featuredImageUrl: collection.featured_image_url,\n    displayData: collection.display_data,\n    paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n    openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n    payoutAddress: collection.payout_address,\n    imageUrl: collection.image_url,\n    largeImageUrl: collection.large_image_url,\n    stats: collection.stats,\n    traitStats: collection.traits,\n    externalLink: collection.external_url,\n    wikiLink: collection.wiki_url\n  };\n};\n\nconst userFromJSON = user => {\n  return {\n    username: user.username\n  };\n};\n\nconst accountFromJSON = account => {\n  return {\n    address: account.address,\n    config: account.config,\n    profileImgUrl: account.profile_img_url,\n    user: account.user ? userFromJSON(account.user) : null\n  };\n};\n\nconst transactionFromJSON = transaction => {\n  return {\n    fromAccount: accountFromJSON(transaction.from_account),\n    toAccount: accountFromJSON(transaction.to_account),\n    createdDate: new Date(`${transaction.created_date}Z`),\n    modifiedDate: new Date(`${transaction.modified_date}Z`),\n    transactionHash: transaction.transaction_hash,\n    transactionIndex: transaction.transaction_index,\n    blockNumber: transaction.block_number,\n    blockHash: transaction.block_hash,\n    timestamp: new Date(`${transaction.timestamp}Z`)\n  };\n};\n\nconst assetEventFromJSON = assetEvent => {\n  return {\n    eventType: assetEvent.event_type,\n    eventTimestamp: assetEvent.event_timestamp,\n    auctionType: assetEvent.auction_type,\n    totalPrice: assetEvent.total_price,\n    transaction: assetEvent.transaction ? transactionFromJSON(assetEvent.transaction) : null,\n    paymentToken: assetEvent.payment_token ? tokenFromJSON(assetEvent.payment_token) : null\n  };\n};\n\nconst assetFromJSON = asset => {\n  const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n  const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n  const fromJSON = {\n    tokenId: asset.token_id.toString(),\n    tokenAddress: asset.asset_contract.address,\n    name: asset.name,\n    description: asset.description,\n    owner: asset.owner,\n    assetContract: assetContractFromJSON(asset.asset_contract),\n    collection: collectionFromJSON(asset.collection),\n    orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n    sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n    buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n    isPresale: asset.is_presale,\n    // Don't use previews if it's a special image\n    imageUrl: isAnimated || isSvg ? asset.image_url : asset.image_preview_url || asset.image_url,\n    imagePreviewUrl: asset.image_preview_url,\n    imageUrlOriginal: asset.image_original_url,\n    imageUrlThumbnail: asset.image_thumbnail_url,\n    externalLink: asset.external_link,\n    openseaLink: asset.permalink,\n    traits: asset.traits,\n    numSales: asset.num_sales,\n    lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n    backgroundColor: asset.background_color ? `#${asset.background_color}` : null,\n    transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n    transferFeePaymentToken: asset.transfer_fee_payment_token ? tokenFromJSON(asset.transfer_fee_payment_token) : null\n  }; // If orders were included, put them in sell/buy order groups\n\n  if (fromJSON.orders && !fromJSON.sellOrders) {\n    fromJSON.sellOrders = fromJSON.orders.filter(o => o.side == 1);\n  }\n\n  if (fromJSON.orders && !fromJSON.buyOrders) {\n    fromJSON.buyOrders = fromJSON.orders.filter(o => o.side == 0);\n  }\n\n  return fromJSON;\n};\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\n\n\nasync function getAsset(_ref) {\n  let {\n    tokenAddress,\n    tokenId\n  } = _ref;\n  const {\n    data\n  } = await axios(`${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`);\n  return assetFromJSON(data);\n}\n\nasync function postOrder(order) {\n  let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  try {\n    const {\n      data\n    } = await axios.post(`https://api.opensea.io/wyvern/v1/orders/post/`, order, {\n      headers: {\n        \"x-api-key\": X_API_KEY\n      }\n    });\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n\n  ;\n}\n\n;\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\n\nconst orderToGolomJSON = order => {\n  const asJSON = {\n    exchange: order.exchange.toLowerCase(),\n    maker: {\n      address: order.maker.toLowerCase()\n    },\n    taker: {\n      address: order.taker.toLowerCase()\n    },\n    maker_relayer_fee: order.makerRelayerFee.toString(),\n    taker_relayer_fee: order.takerRelayerFee.toString(),\n    maker_protocol_fee: order.makerProtocolFee.toString(),\n    taker_protocol_fee: order.takerProtocolFee.toString(),\n    makerReferrerFee: order.makerReferrerFee.toString(),\n    fee_method: order.feeMethod,\n    fee_recipient: {\n      address: order.feeRecipient.toLowerCase()\n    },\n    side: order.side,\n    sale_kind: order.saleKind,\n    target: order.target.toLowerCase(),\n    how_to_call: order.howToCall,\n    calldata: order.calldata,\n    replacement_pattern: order.replacementPattern,\n    static_target: order.staticTarget.toLowerCase(),\n    static_extradata: order.staticExtradata,\n    payment_token: order.paymentToken.toLowerCase(),\n    quantity: order.quantity.toString(),\n    base_price: order.basePrice.toString(),\n    englishAuctionReservePrice: order.englishAuctionReservePrice ? order.englishAuctionReservePrice.toString() : undefined,\n    extra: order.extra.toString(),\n    createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n    listing_time: order.listingTime.toString(),\n    expiration_time: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n    metadata: order.metadata,\n    v: order.v,\n    r: order.r,\n    s: order.s,\n    prefixed_hash: order.hash\n  };\n  return asJSON;\n};\n\nexport { createOrder, cancelOrder, performOrder }; // maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28","map":{"version":3,"names":["WyvernProtocol","HowToCall","Network","ERC721Schema","isValidAddress","parseEther","BigNumber","axios","OPENSEA_URL","X_API_KEY","ACTIVITY_POLLING_INTERVAL","LISTING_POLLING_INTERVAL","OFFERS_POLLING_INTERVAL","OPENSEA_FEE_RECIPIENT","NULL_BLOCK_HASH","INVERSE_BASIS_POINT","DEFAULT_BUYER_FEE_BASIS_POINTS","DEFAULT_SELLER_FEE_BASIS_POINTS","OPENSEA_SELLER_BOUNTY_BASIS_POINTS","DEFAULT_MAX_BOUNTY","STATIC_CALL_TX_ORIGIN_ADDRESS","MERKLE_VALIDATOR_MAINNET","mainnetWyvernConfigByNetwork","OrderTypesEIP712","WyvernDomainNameEIP712","WyvernDomainVersionEIP712","StaticCheckTxOrigin","WyvernContract","createOrder","cancelOrder","performOrder","encodeSell","signTypedDataAsync","encodeCall","tokenFromJSON","token","fromJSON","name","symbol","decimals","address","imageUrl","image_url","ethPrice","eth_price","usdPrice","usd_price","assignOrdersToSides","order","matchingOrder","isSellOrder","side","buy","sell","v","r","s","assetContractFromJSON","assetContract","description","type","assetContract_type","schemaName","schema_name","tokenSymbol","buyerFeeBasisPoints","buyer_fee_basis_points","sellerFeeBasisPoints","seller_fee_basis_points","openseaBuyerFeeBasisPoints","opensea_buyer_fee_basis_points","openseaSellerFeeBasisPoints","opensea_seller_fee_basis_points","devBuyerFeeBasisPoints","dev_buyer_fee_basis_points","devSellerFeeBasisPoints","dev_seller_fee_basis_points","externalLink","external_link","wikiLink","wiki_link","collectionFromJSON","collection","createdDate","Date","created_date","slug","editors","hidden","featured","featuredImageUrl","featured_image_url","displayData","display_data","paymentTokens","payment_tokens","map","payoutAddress","payout_address","largeImageUrl","large_image_url","stats","traitStats","traits","external_url","wiki_url","userFromJSON","user","username","accountFromJSON","account","config","profileImgUrl","profile_img_url","transactionFromJSON","transaction","fromAccount","from_account","toAccount","to_account","modifiedDate","modified_date","transactionHash","transaction_hash","transactionIndex","transaction_index","blockNumber","block_number","blockHash","block_hash","timestamp","assetEventFromJSON","assetEvent","eventType","event_type","eventTimestamp","event_timestamp","auctionType","auction_type","totalPrice","total_price","paymentToken","payment_token","assetFromJSON","asset","isAnimated","endsWith","isSvg","tokenId","token_id","toString","tokenAddress","asset_contract","owner","orders","orderFromJSON","sellOrders","sell_orders","buyOrders","buy_orders","isPresale","is_presale","image_preview_url","imagePreviewUrl","imageUrlOriginal","image_original_url","imageUrlThumbnail","image_thumbnail_url","openseaLink","permalink","numSales","num_sales","lastSale","last_sale","backgroundColor","background_color","transferFee","transfer_fee","transferFeePaymentToken","transfer_fee_payment_token","filter","o","getAsset","data","postOrder","retries","post","headers","error","Error","orderToGolomJSON","asJSON","exchange","toLowerCase","maker","taker","maker_relayer_fee","makerRelayerFee","taker_relayer_fee","takerRelayerFee","maker_protocol_fee","makerProtocolFee","taker_protocol_fee","takerProtocolFee","makerReferrerFee","fee_method","feeMethod","fee_recipient","feeRecipient","sale_kind","saleKind","target","how_to_call","howToCall","calldata","replacement_pattern","replacementPattern","static_target","staticTarget","static_extradata","staticExtradata","quantity","base_price","basePrice","englishAuctionReservePrice","undefined","extra","createdTime","listing_time","listingTime","expiration_time","expirationTime","salt","metadata","prefixed_hash","hash"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/opensea.js"],"sourcesContent":["// Wyvern\nimport { WyvernProtocol } from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\";\n\n// Ethereum\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\";\n\n// Other\nimport axios from \"axios\";\n// import * as _ from \"lodash\";\n\n// Constants\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { OPENSEA_FEE_RECIPIENT, NULL_BLOCK_HASH, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport { mainnetWyvernConfigByNetwork } from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\";\nimport { StaticCheckTxOrigin } from \"./Constants\";\n\n// Contracts\nimport { WyvernContract } from \"./contracts\";\n\n// Methods\nimport createOrder from \"./methods/CreateOrder\";\nimport cancelOrder from \"./methods/CancelOrder\";\nimport performOrder from \"./methods/PerformOrder\";\n\n// Helpers\nimport encodeSell from \"./helpers/EncodeSell\";\nimport signTypedDataAsync from \"./helpers/SignTypedDataAsync\";\nimport encodeCall from \"./helpers/EncodeCall\";\n\n// FUNCTIONS\nconst tokenFromJSON = (token) => {\n    const fromJSON = {\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        address: token.address,\n        imageUrl: token.image_url,\n        ethPrice: token.eth_price,\n        usdPrice: token.usd_price,\n    };\n\n    return fromJSON;\n};\n\n// const orderFromJSON = (order) => {\n//     const createdDate = new Date(`${order.created_date}Z`);\n//     const fromJSON = {\n//         hash: order.order_hash || order.hash,\n//         cancelledOrFinalized: order.cancelled || order.finalized,\n//         markedInvalid: order.marked_invalid,\n//         metadata: order.metadata,\n//         quantity: new BigNumber(order.quantity || 1),\n//         exchange: order.exchange,\n//         makerAccount: order.maker,\n//         takerAccount: order.taker,\n\n//         // Use string address to conform to Wyvern Order schema\n//         maker: order.maker.address,\n//         taker: order.taker.address,\n//         makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n//         takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n//         makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n//         takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n//         makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n//         waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n//         feeMethod: order.fee_method,\n//         feeRecipientAccount: order.fee_recipient,\n//         feeRecipient: order.fee_recipient.address,\n//         side: order.side,\n//         saleKind: order.sale_kind,\n//         target: order.target,\n//         howToCall: order.how_to_call,\n//         calldata: order.calldata,\n//         replacementPattern: order.replacement_pattern,\n//         staticTarget: order.static_target,\n//         staticExtradata: order.static_extradata,\n//         paymentToken: order.payment_token,\n//         basePrice: new BigNumber(order.base_price),\n//         extra: new BigNumber(order.extra),\n//         currentBounty: new BigNumber(order.current_bounty || 0),\n//         currentPrice: new BigNumber(order.current_price || 0),\n\n//         createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n//         listingTime: new BigNumber(order.listing_time),\n//         expirationTime: new BigNumber(order.expiration_time),\n\n//         salt: new BigNumber(order.salt),\n//         v: parseInt(order.v),\n//         r: order.r,\n//         s: order.s,\n\n//         paymentTokenContract: order.payment_token_contract\n//           ? tokenFromJSON(order.payment_token_contract)\n//           : undefined,\n//         asset: order.asset,\n//         assetBundle: order.asset_bundle,\n//     };\n\n//     // Use client-side price calc, to account for buyer fee (not added by server) and latency\n//     fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n//     return fromJSON;\n// };\n\nfunction assignOrdersToSides(order, matchingOrder) {\n    const isSellOrder = order.side == 1;\n\n    let buy;\n    let sell;\n\n    if (!isSellOrder) {\n        buy = order;\n        sell = {\n            ...matchingOrder,\n            v: buy.v,\n            r: buy.r,\n            s: buy.s,\n        };\n    } else {\n        sell = order;\n        buy = {\n            ...matchingOrder,\n            v: sell.v,\n            r: sell.r,\n            s: sell.s,\n        };\n    }\n\n    return { buy, sell };\n};\n\nconst assetContractFromJSON = (assetContract) => {\n    return {\n        name: assetContract.name,\n        description: assetContract.description,\n        type: assetContract.assetContract_type,\n        schemaName: assetContract.schema_name,\n        address: assetContract.address,\n        tokenSymbol: assetContract.symbol,\n        buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n        sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n        openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n        openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n        devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n        devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n        imageUrl: assetContract.image_url,\n        externalLink: assetContract.external_link,\n        wikiLink: assetContract.wiki_link,\n    };\n};\n\nexport const collectionFromJSON = (collection) => {\n    const createdDate = new Date(`${collection.created_date}Z`);\n\n    return {\n        createdDate,\n        name: collection.name,\n        description: collection.description,\n        slug: collection.slug,\n        editors: collection.editors,\n        hidden: collection.hidden,\n        featured: collection.featured,\n        featuredImageUrl: collection.featured_image_url,\n        displayData: collection.display_data,\n        paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n        openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n        openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n        devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n        devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n        payoutAddress: collection.payout_address,\n        imageUrl: collection.image_url,\n        largeImageUrl: collection.large_image_url,\n        stats: collection.stats,\n        traitStats: collection.traits,\n        externalLink: collection.external_url,\n        wikiLink: collection.wiki_url,\n    };\n};\n\nconst userFromJSON = (user) => {\n    return { username: user.username };\n};\n\nconst accountFromJSON = (account) => {\n    return {\n        address: account.address,\n        config: account.config,\n        profileImgUrl: account.profile_img_url,\n        user: account.user ? userFromJSON(account.user) : null\n    };\n};\n\nconst transactionFromJSON = (transaction) => {\n    return {\n        fromAccount: accountFromJSON(transaction.from_account),\n        toAccount: accountFromJSON(transaction.to_account),\n        createdDate: new Date(`${transaction.created_date}Z`),\n        modifiedDate: new Date(`${transaction.modified_date}Z`),\n        transactionHash: transaction.transaction_hash,\n        transactionIndex: transaction.transaction_index,\n        blockNumber: transaction.block_number,\n        blockHash: transaction.block_hash,\n        timestamp: new Date(`${transaction.timestamp}Z`)\n    };\n};\n\nconst assetEventFromJSON = (assetEvent) => {\n    return {\n        eventType: assetEvent.event_type,\n        eventTimestamp: assetEvent.event_timestamp,\n        auctionType: assetEvent.auction_type,\n        totalPrice: assetEvent.total_price,\n        transaction: assetEvent.transaction\n          ? transactionFromJSON(assetEvent.transaction)\n          : null,\n        paymentToken: assetEvent.payment_token\n          ? tokenFromJSON(assetEvent.payment_token)\n          : null\n    };\n};\n\nconst assetFromJSON = (asset) => {\n    const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n    const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n    const fromJSON = {\n        tokenId: asset.token_id.toString(),\n        tokenAddress: asset.asset_contract.address,\n        name: asset.name,\n        description: asset.description,\n        owner: asset.owner,\n        assetContract: assetContractFromJSON(asset.asset_contract),\n        collection: collectionFromJSON(asset.collection),\n        orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n        sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n        buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n\n        isPresale: asset.is_presale,\n        // Don't use previews if it's a special image\n        imageUrl:\n          isAnimated || isSvg\n            ? asset.image_url\n            : asset.image_preview_url || asset.image_url,\n        imagePreviewUrl: asset.image_preview_url,\n        imageUrlOriginal: asset.image_original_url,\n        imageUrlThumbnail: asset.image_thumbnail_url,\n\n        externalLink: asset.external_link,\n        openseaLink: asset.permalink,\n        traits: asset.traits,\n        numSales: asset.num_sales,\n        lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n        backgroundColor: asset.background_color\n          ? `#${asset.background_color}`\n          : null,\n\n        transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n        transferFeePaymentToken: asset.transfer_fee_payment_token\n          ? tokenFromJSON(asset.transfer_fee_payment_token)\n          : null\n    };\n\n    // If orders were included, put them in sell/buy order groups\n    if (fromJSON.orders && !fromJSON.sellOrders) {\n        fromJSON.sellOrders = fromJSON.orders.filter((o) => o.side == 1);\n    }\n\n    if (fromJSON.orders && !fromJSON.buyOrders) {\n        fromJSON.buyOrders = fromJSON.orders.filter((o) => o.side == 0);\n    }\n\n    return fromJSON;\n};\n\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\nasync function getAsset({ tokenAddress, tokenId }) {\n    const { data } = await axios(`${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`);\n    return assetFromJSON(data);\n}\n\nasync function postOrder(order, retries = 2) {\n    try {\n        const { data } = await axios.post(\n            `https://api.opensea.io/wyvern/v1/orders/post/`,\n            order,\n            { headers: { \"x-api-key\": X_API_KEY }}\n        );\n\n        return data;\n    } catch (error) {\n        throw new Error(error);\n    };\n};\n\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\nconst orderToGolomJSON = (order) => {\n    const asJSON = {\n        exchange: order.exchange.toLowerCase(),\n        maker: { address: order.maker.toLowerCase() },\n        taker: { address: order.taker.toLowerCase() },\n        maker_relayer_fee: order.makerRelayerFee.toString(),\n        taker_relayer_fee: order.takerRelayerFee.toString(),\n        maker_protocol_fee: order.makerProtocolFee.toString(),\n        taker_protocol_fee: order.takerProtocolFee.toString(),\n        makerReferrerFee: order.makerReferrerFee.toString(),\n        fee_method: order.feeMethod,\n        fee_recipient: { address: order.feeRecipient.toLowerCase() },\n        side: order.side,\n        sale_kind: order.saleKind,\n        target: order.target.toLowerCase(),\n        how_to_call: order.howToCall,\n        calldata: order.calldata,\n        replacement_pattern: order.replacementPattern,\n        static_target: order.staticTarget.toLowerCase(),\n        static_extradata: order.staticExtradata,\n        payment_token: order.paymentToken.toLowerCase(),\n        quantity: order.quantity.toString(),\n        base_price: order.basePrice.toString(),\n        englishAuctionReservePrice: order.englishAuctionReservePrice\n          ? order.englishAuctionReservePrice.toString()\n          : undefined,\n        extra: order.extra.toString(),\n        createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n        listing_time: order.listingTime.toString(),\n        expiration_time: order.expirationTime.toString(),\n        salt: order.salt.toString(),\n        metadata: order.metadata,\n        v: order.v,\n        r: order.r,\n        s: order.s,\n        prefixed_hash: order.hash,\n      };\n    \n    return asJSON;\n};\n\nexport { createOrder, cancelOrder, performOrder };\n\n// maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}