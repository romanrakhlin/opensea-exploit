{"ast":null,"code":"import * as ethABI from \"ethereumjs-abi\";\n\nconst encodeCall = (abi, parameters) => {\n  const inputTypes = abi.inputs.map(i => i.type);\n  const id = ethABI.methodID(abi.name, inputTypes);\n  const encode = ethABI.rawEncode(inputTypes.slice(0, 3), parameters.slice(0, 3));\n  return \"0x\" + Buffer.concat([id, encode]).toString(\"hex\");\n};\n\nexport default encodeCall;","map":{"version":3,"names":["ethABI","encodeCall","abi","parameters","inputTypes","inputs","map","i","type","id","methodID","name","encode","rawEncode","slice","Buffer","concat","toString"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeCall.js"],"sourcesContent":["import * as ethABI from \"ethereumjs-abi\";\n\nconst encodeCall = (abi, parameters) => {\n    const inputTypes = abi.inputs.map((i) => i.type);\n    const id = ethABI.methodID(abi.name, inputTypes);\n    const encode = ethABI.rawEncode(inputTypes.slice(0, 3), parameters.slice(0, 3));\n    return (\"0x\" + Buffer.concat([id, encode]).toString(\"hex\"));\n};\n\nexport default encodeCall;"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,gBAAxB;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;EACpC,MAAMC,UAAU,GAAGF,GAAG,CAACG,MAAJ,CAAWC,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAACC,IAAxB,CAAnB;EACA,MAAMC,EAAE,GAAGT,MAAM,CAACU,QAAP,CAAgBR,GAAG,CAACS,IAApB,EAA0BP,UAA1B,CAAX;EACA,MAAMQ,MAAM,GAAGZ,MAAM,CAACa,SAAP,CAAiBT,UAAU,CAACU,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAjB,EAAyCX,UAAU,CAACW,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAzC,CAAf;EACA,OAAQ,OAAOC,MAAM,CAACC,MAAP,CAAc,CAACP,EAAD,EAAKG,MAAL,CAAd,EAA4BK,QAA5B,CAAqC,KAArC,CAAf;AACH,CALD;;AAOA,eAAehB,UAAf"},"metadata":{},"sourceType":"module"}