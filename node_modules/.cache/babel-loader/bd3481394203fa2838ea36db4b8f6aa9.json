{"ast":null,"code":"import { WyvernProtocol } from \"wyvern-js\";\nimport { ERC721Schema } from \"./WyvernSchema\";\nimport encodeCall from \"./EncodeCall\";\n\nconst encodeSell = (schema, asset, address, validatorAddress) => {\n  const transfer = validatorAddress && schema.functions.checkAndTransfer ? schema.functions.checkAndTransfer(asset, validatorAddress) : schema.functions.transfer(asset); // const transfer = schema.functions.transfer(asset);\n\n  let defaultCall = encodeDefaultCall(transfer, address);\n  let pattern = WyvernProtocol.encodeReplacementPattern(transfer);\n  return {\n    target: transfer.target,\n    calldata: defaultCall,\n    replacementPattern: pattern\n  };\n};\n\nconst encodeDefaultCall = (abi, address) => {\n  const parameters = abi.inputs.map(input => {\n    switch (input.kind) {\n      case \"replaceable\":\n        return WyvernProtocol.generateDefaultValue(input.type);\n\n      case \"owner\":\n        return address;\n\n      case \"asset\":\n      default:\n        return input.value;\n    }\n  });\n  return encodeCall(abi, parameters);\n};\n\nexport default encodeSell;","map":{"version":3,"names":["WyvernProtocol","ERC721Schema","encodeCall","encodeSell","schema","asset","address","validatorAddress","transfer","functions","checkAndTransfer","defaultCall","encodeDefaultCall","pattern","encodeReplacementPattern","target","calldata","replacementPattern","abi","parameters","inputs","map","input","kind","generateDefaultValue","type","value"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/helpers/EncodeSell.js"],"sourcesContent":["import { WyvernProtocol } from \"wyvern-js\";\nimport { ERC721Schema } from \"./WyvernSchema\";\n\nimport encodeCall from \"./EncodeCall\";\n\nconst encodeSell = (schema, asset, address, validatorAddress) => {\n    const transfer = validatorAddress && schema.functions.checkAndTransfer\n        ? schema.functions.checkAndTransfer(asset, validatorAddress)\n        : schema.functions.transfer(asset);\n    \n    // const transfer = schema.functions.transfer(asset);\n    let defaultCall = encodeDefaultCall(transfer, address)\n    let pattern = WyvernProtocol.encodeReplacementPattern(transfer)\n\n    return {\n        target: transfer.target,\n        calldata: defaultCall,\n        replacementPattern: pattern\n    };\n};\n\nconst encodeDefaultCall = (abi, address) => {\n    const parameters = abi.inputs.map((input) => {\n        switch (input.kind) {\n            case \"replaceable\":\n                return WyvernProtocol.generateDefaultValue(input.type);\n            case \"owner\":\n                return address;\n            case \"asset\":\n            default:\n                return input.value;\n        }\n    });\n\n    return encodeCall(abi, parameters);\n};\n\nexport default encodeSell;"],"mappings":"AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,EAAyBC,gBAAzB,KAA8C;EAC7D,MAAMC,QAAQ,GAAGD,gBAAgB,IAAIH,MAAM,CAACK,SAAP,CAAiBC,gBAArC,GACXN,MAAM,CAACK,SAAP,CAAiBC,gBAAjB,CAAkCL,KAAlC,EAAyCE,gBAAzC,CADW,GAEXH,MAAM,CAACK,SAAP,CAAiBD,QAAjB,CAA0BH,KAA1B,CAFN,CAD6D,CAK7D;;EACA,IAAIM,WAAW,GAAGC,iBAAiB,CAACJ,QAAD,EAAWF,OAAX,CAAnC;EACA,IAAIO,OAAO,GAAGb,cAAc,CAACc,wBAAf,CAAwCN,QAAxC,CAAd;EAEA,OAAO;IACHO,MAAM,EAAEP,QAAQ,CAACO,MADd;IAEHC,QAAQ,EAAEL,WAFP;IAGHM,kBAAkB,EAAEJ;EAHjB,CAAP;AAKH,CAdD;;AAgBA,MAAMD,iBAAiB,GAAG,CAACM,GAAD,EAAMZ,OAAN,KAAkB;EACxC,MAAMa,UAAU,GAAGD,GAAG,CAACE,MAAJ,CAAWC,GAAX,CAAgBC,KAAD,IAAW;IACzC,QAAQA,KAAK,CAACC,IAAd;MACI,KAAK,aAAL;QACI,OAAOvB,cAAc,CAACwB,oBAAf,CAAoCF,KAAK,CAACG,IAA1C,CAAP;;MACJ,KAAK,OAAL;QACI,OAAOnB,OAAP;;MACJ,KAAK,OAAL;MACA;QACI,OAAOgB,KAAK,CAACI,KAAb;IAPR;EASH,CAVkB,CAAnB;EAYA,OAAOxB,UAAU,CAACgB,GAAD,EAAMC,UAAN,CAAjB;AACH,CAdD;;AAgBA,eAAehB,UAAf"},"metadata":{},"sourceType":"module"}