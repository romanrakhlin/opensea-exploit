{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_schemas_1 = require(\"@0xproject/json-schemas\");\n\nvar utils_1 = require(\"@0xproject/utils\");\n\nvar _ = require(\"lodash\");\n\nvar validUrl = require(\"valid-url\");\n\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nexports.assert = {\n  isBigNumber: function (variableName, value) {\n    var isBigNumber = _.isObject(value) && value.isBigNumber;\n    this.assert(isBigNumber, this.typeAssertionMessage(variableName, 'BigNumber', value));\n  },\n  isValidBaseUnitAmount: function (variableName, value) {\n    exports.assert.isBigNumber(variableName, value);\n    var hasDecimals = value.decimalPlaces() !== 0;\n    this.assert(!hasDecimals, variableName + \" should be in baseUnits (no decimals), found value: \" + value.toNumber());\n  },\n  isString: function (variableName, value) {\n    this.assert(_.isString(value), this.typeAssertionMessage(variableName, 'string', value));\n  },\n  isFunction: function (variableName, value) {\n    this.assert(_.isFunction(value), this.typeAssertionMessage(variableName, 'function', value));\n  },\n  isHexString: function (variableName, value) {\n    this.assert(_.isString(value) && HEX_REGEX.test(value), this.typeAssertionMessage(variableName, 'HexString', value));\n  },\n  isETHAddressHex: function (variableName, value) {\n    this.assert(utils_1.addressUtils.isAddress(value), this.typeAssertionMessage(variableName, 'ETHAddressHex', value));\n    this.assert(utils_1.addressUtils.isAddress(value) && value.toLowerCase() === value, \"Checksummed addresses are not supported. Convert \" + variableName + \" to lower case before passing\");\n  },\n  doesBelongToStringEnum: function (variableName, value, stringEnum\n  /* There is no base type for every string enum */\n  ) {\n    var doesBelongToStringEnum = !_.isUndefined(stringEnum[value]);\n\n    var enumValues = _.keys(stringEnum);\n\n    var enumValuesAsStrings = _.map(enumValues, function (enumValue) {\n      return \"'\" + enumValue + \"'\";\n    });\n\n    var enumValuesAsString = enumValuesAsStrings.join(', ');\n    exports.assert.assert(doesBelongToStringEnum, \"Expected \" + variableName + \" to be one of: \" + enumValuesAsString + \", encountered: \" + value);\n  },\n  hasAtMostOneUniqueValue: function (value, errMsg) {\n    this.assert(_.uniq(value).length <= 1, errMsg);\n  },\n  isNumber: function (variableName, value) {\n    this.assert(_.isFinite(value), this.typeAssertionMessage(variableName, 'number', value));\n  },\n  isBoolean: function (variableName, value) {\n    this.assert(_.isBoolean(value), this.typeAssertionMessage(variableName, 'boolean', value));\n  },\n  isWeb3Provider: function (variableName, value) {\n    var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);\n\n    this.assert(isWeb3Provider, this.typeAssertionMessage(variableName, 'Web3.Provider', value));\n  },\n  doesConformToSchema: function (variableName, value, schema) {\n    var schemaValidator = new json_schemas_1.SchemaValidator();\n    var validationResult = schemaValidator.validate(value, schema);\n    var hasValidationErrors = validationResult.errors.length > 0;\n    var msg = \"Expected \" + variableName + \" to conform to schema \" + schema.id + \"\\nEncountered: \" + JSON.stringify(value, null, '\\t') + \"\\nValidation errors: \" + validationResult.errors.join(', ');\n    this.assert(!hasValidationErrors, msg);\n  },\n  isHttpUrl: function (variableName, value) {\n    var isValidUrl = !_.isUndefined(validUrl.isWebUri(value));\n    this.assert(isValidUrl, this.typeAssertionMessage(variableName, 'http url', value));\n  },\n  isUri: function (variableName, value) {\n    var isValidUri = !_.isUndefined(validUrl.isUri(value));\n    this.assert(isValidUri, this.typeAssertionMessage(variableName, 'uri', value));\n  },\n  assert: function (condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  },\n  typeAssertionMessage: function (variableName, type, value) {\n    return \"Expected \" + variableName + \" to be of type \" + type + \", encountered: \" + value;\n  }\n};","map":{"version":3,"mappings":"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","names":["HEX_REGEX","exports","isBigNumber","variableName","value","_","isObject","assert","typeAssertionMessage","isValidBaseUnitAmount","hasDecimals","decimalPlaces","toNumber","isString","isFunction","isHexString","test","isETHAddressHex","utils_1","isAddress","toLowerCase","doesBelongToStringEnum","stringEnum","isUndefined","enumValues","keys","enumValuesAsStrings","map","enumValue","enumValuesAsString","join","hasAtMostOneUniqueValue","errMsg","uniq","length","isNumber","isFinite","isBoolean","isWeb3Provider","send","sendAsync","doesConformToSchema","schema","schemaValidator","json_schemas_1","validationResult","validate","hasValidationErrors","errors","msg","id","JSON","stringify","isHttpUrl","isValidUrl","validUrl","isWebUri","isUri","isValidUri","condition","message","Error","type"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}