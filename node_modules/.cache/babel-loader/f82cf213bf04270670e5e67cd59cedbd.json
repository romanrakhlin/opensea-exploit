{"ast":null,"code":"// Wyvern\nimport { WyvernProtocol } from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\"; // Ethereum\n\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\"; // Other\n\nimport axios from \"axios\"; // import * as _ from \"lodash\";\n// Constants\n\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { OPENSEA_FEE_RECIPIENT, NULL_BLOCK_HASH, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport { mainnetWyvernConfigByNetwork } from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\";\nimport { StaticCheckTxOrigin } from \"./Constants\"; // Contracts\n\nimport { WyvernContract } from \"./contracts\"; // Methods\n\nimport createOrder from \"./methods/CreateOrder\";\nimport cancelOrder from \"./methods/CancelOrder\";\nimport performOrder from \"./methods/PerformOrder\"; // Helpers\n\nimport encodeSell from \"./helpers/EncodeSell\";\nimport getTimeParameters from \"./helpers/GetTimeParameters\";\nimport signTypedDataAsync from \"./helpers/SignTypedDataAsync\";\nimport encodeCall from \"./helpers/EncodeCall\"; // FUNCTIONS\n\nconst tokenFromJSON = token => {\n  const fromJSON = {\n    name: token.name,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    address: token.address,\n    imageUrl: token.image_url,\n    ethPrice: token.eth_price,\n    usdPrice: token.usd_price\n  };\n  return fromJSON;\n};\n\nconst orderFromJSON = order => {\n  const createdDate = new Date(`${order.created_date}Z`);\n  const fromJSON = {\n    hash: order.order_hash || order.hash,\n    cancelledOrFinalized: order.cancelled || order.finalized,\n    markedInvalid: order.marked_invalid,\n    metadata: order.metadata,\n    quantity: new BigNumber(order.quantity || 1),\n    exchange: order.exchange,\n    makerAccount: order.maker,\n    takerAccount: order.taker,\n    // Use string address to conform to Wyvern Order schema\n    maker: order.maker.address,\n    taker: order.taker.address,\n    makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n    takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n    makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n    takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n    makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n    waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n    feeMethod: order.fee_method,\n    feeRecipientAccount: order.fee_recipient,\n    feeRecipient: order.fee_recipient.address,\n    side: order.side,\n    saleKind: order.sale_kind,\n    target: order.target,\n    howToCall: order.how_to_call,\n    calldata: order.calldata,\n    replacementPattern: order.replacement_pattern,\n    staticTarget: order.static_target,\n    staticExtradata: order.static_extradata,\n    paymentToken: order.payment_token,\n    basePrice: new BigNumber(order.base_price),\n    extra: new BigNumber(order.extra),\n    currentBounty: new BigNumber(order.current_bounty || 0),\n    currentPrice: new BigNumber(order.current_price || 0),\n    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n    listingTime: new BigNumber(order.listing_time),\n    expirationTime: new BigNumber(order.expiration_time),\n    salt: new BigNumber(order.salt),\n    v: parseInt(order.v),\n    r: order.r,\n    s: order.s,\n    paymentTokenContract: order.payment_token_contract ? tokenFromJSON(order.payment_token_contract) : undefined,\n    asset: order.asset,\n    assetBundle: order.asset_bundle\n  }; // Use client-side price calc, to account for buyer fee (not added by server) and latency\n\n  fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n  return fromJSON;\n};\n\nfunction assignOrdersToSides(order, matchingOrder) {\n  const isSellOrder = order.side == 1;\n  let buy;\n  let sell;\n\n  if (!isSellOrder) {\n    buy = order;\n    sell = { ...matchingOrder,\n      v: buy.v,\n      r: buy.r,\n      s: buy.s\n    };\n  } else {\n    sell = order;\n    buy = { ...matchingOrder,\n      v: sell.v,\n      r: sell.r,\n      s: sell.s\n    };\n  }\n\n  return {\n    buy,\n    sell\n  };\n}\n/**\n * Gets the price for the order using the contract\n * @param order The order to calculate the price for\n */\n\n\nasync function getCurrentPrice(order, wyvernExchange) {\n  const currentPrice = await wyvernExchange.methods.calculateCurrentPrice_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee.toFixed(), order.takerRelayerFee.toFixed(), order.makerProtocolFee.toFixed(), order.takerProtocolFee.toFixed(), order.basePrice.toFixed(), order.extra.toFixed(), order.listingTime.toFixed(), order.expirationTime.toFixed(), order.salt.toFixed()], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata);\n  return currentPrice;\n}\n/**\n * Estimates the price of an order\n * @param order The order to estimate price on\n * @param secondsToBacktrack The number of seconds to subtract on current time,\n *  to fix race conditions\n * @param shouldRoundUp Whether to round up fractional wei\n */\n\n\nexport function estimateCurrentPrice(order) {\n  let secondsToBacktrack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n  let shouldRoundUp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // round up should be enabled\n  let {\n    basePrice,\n    listingTime,\n    expirationTime,\n    extra\n  } = order;\n  const {\n    side,\n    takerRelayerFee,\n    saleKind\n  } = order;\n  const now = new BigNumber(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);\n  basePrice = new BigNumber(basePrice);\n  listingTime = new BigNumber(listingTime);\n  expirationTime = new BigNumber(expirationTime);\n  extra = new BigNumber(extra);\n  let exactPrice = basePrice; // saleKind 0 : Fixed price 1: Duction acution\n\n  if (saleKind === 0) {// Do nothing, price is correct\n  } else if (saleKind === 1) {\n    const diff = extra.times(now.minus(listingTime)).dividedBy(expirationTime.minus(listingTime)); // side 0 : buy 1: sell\n\n    exactPrice = side == 1 ?\n    /* Sell-side - start price: basePrice. End price: basePrice - extra. */\n    basePrice.minus(diff) :\n    /* Buy-side - start price: basePrice. End price: basePrice + extra. */\n    basePrice.plus(diff);\n  } // Add taker fee only for buyers\n\n\n  if (side === 1 && !order.waitingForBestCounterOrder) {\n    // Buyer fee increases sale price\n    exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1);\n  }\n\n  return shouldRoundUp ? exactPrice.ceil() : exactPrice;\n}\n\nasync function _getRequiredAmountForTakingSellOrder(sell, wyvernExchange) {\n  const currentPrice = await getCurrentPrice(sell, wyvernExchange);\n  const estimatedPrice = estimateCurrentPrice(sell);\n  const maxPrice = BigNumber.max(currentPrice, estimatedPrice); // TODO Why is this not always a big number?\n\n  sell.takerRelayerFee = BigNumber(sell.takerRelayerFee);\n  const feePercentage = sell.takerRelayerFee.div(INVERSE_BASIS_POINT);\n  const fee = feePercentage.times(maxPrice);\n  return fee.plus(maxPrice); // use .ceil()\n}\n\nasync function _atomicMatch(_ref) {\n  let {\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata = NULL_BLOCK_HASH\n  } = _ref;\n  let value;\n\n  if (buy.paymentToken == WyvernProtocol.NULL_ADDRESS) {\n    value = await _getRequiredAmountForTakingSellOrder(sell, wyvernExchange);\n  }\n\n  const txnData = {\n    from: accountAddress,\n    value\n  };\n  const args = [[buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target, buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken], [250.0.toString(), 0.0.toString(), buy.makerProtocolFee.toString(), buy.takerProtocolFee.toString(), 0.0.toString(), buy.extra.toString(), buy.listingTime.toString(), buy.expirationTime.toString(), buy.salt.toString(), 250.0.toString(), 0.0.toString(), sell.makerProtocolFee.toString(), sell.takerProtocolFee.toString(), 0.0.toString(), 0.0.toString(), sell.listingTime.toString(), sell.expirationTime.toString(), sell.salt.toString()], [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall], buy.calldata, sell.calldata, buy.replacementPattern, sell.replacementPattern, buy.staticExtradata, sell.staticExtradata, [buy.v || 0, sell.v || 0], [buy.r || NULL_BLOCK_HASH, buy.s || NULL_BLOCK_HASH, sell.r || NULL_BLOCK_HASH, sell.s || NULL_BLOCK_HASH, metadata]]; // const gasEstimate = await wyvernExchange.functions.estimateGasAsync(txnData);\n  // txnData.gas = _correctGasAmount(gasEstimate);\n\n  const atomicMatchMethod = wyvernExchange.functions.atomicMatch_(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], txnData).then(res => {\n    console.log(res);\n  });\n  return {\n    atomicMatchMethod,\n    txnData\n  };\n}\n\nconst assetContractFromJSON = assetContract => {\n  return {\n    name: assetContract.name,\n    description: assetContract.description,\n    type: assetContract.assetContract_type,\n    schemaName: assetContract.schema_name,\n    address: assetContract.address,\n    tokenSymbol: assetContract.symbol,\n    buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n    sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n    openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n    imageUrl: assetContract.image_url,\n    externalLink: assetContract.external_link,\n    wikiLink: assetContract.wiki_link\n  };\n};\n\nexport const collectionFromJSON = collection => {\n  const createdDate = new Date(`${collection.created_date}Z`);\n  return {\n    createdDate,\n    name: collection.name,\n    description: collection.description,\n    slug: collection.slug,\n    editors: collection.editors,\n    hidden: collection.hidden,\n    featured: collection.featured,\n    featuredImageUrl: collection.featured_image_url,\n    displayData: collection.display_data,\n    paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n    openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n    openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n    devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n    devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n    payoutAddress: collection.payout_address,\n    imageUrl: collection.image_url,\n    largeImageUrl: collection.large_image_url,\n    stats: collection.stats,\n    traitStats: collection.traits,\n    externalLink: collection.external_url,\n    wikiLink: collection.wiki_url\n  };\n};\n\nconst userFromJSON = user => {\n  return {\n    username: user.username\n  };\n};\n\nconst accountFromJSON = account => {\n  return {\n    address: account.address,\n    config: account.config,\n    profileImgUrl: account.profile_img_url,\n    user: account.user ? userFromJSON(account.user) : null\n  };\n};\n\nconst transactionFromJSON = transaction => {\n  return {\n    fromAccount: accountFromJSON(transaction.from_account),\n    toAccount: accountFromJSON(transaction.to_account),\n    createdDate: new Date(`${transaction.created_date}Z`),\n    modifiedDate: new Date(`${transaction.modified_date}Z`),\n    transactionHash: transaction.transaction_hash,\n    transactionIndex: transaction.transaction_index,\n    blockNumber: transaction.block_number,\n    blockHash: transaction.block_hash,\n    timestamp: new Date(`${transaction.timestamp}Z`)\n  };\n};\n\nconst assetEventFromJSON = assetEvent => {\n  return {\n    eventType: assetEvent.event_type,\n    eventTimestamp: assetEvent.event_timestamp,\n    auctionType: assetEvent.auction_type,\n    totalPrice: assetEvent.total_price,\n    transaction: assetEvent.transaction ? transactionFromJSON(assetEvent.transaction) : null,\n    paymentToken: assetEvent.payment_token ? tokenFromJSON(assetEvent.payment_token) : null\n  };\n};\n\nconst assetFromJSON = asset => {\n  const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n  const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n  const fromJSON = {\n    tokenId: asset.token_id.toString(),\n    tokenAddress: asset.asset_contract.address,\n    name: asset.name,\n    description: asset.description,\n    owner: asset.owner,\n    assetContract: assetContractFromJSON(asset.asset_contract),\n    collection: collectionFromJSON(asset.collection),\n    orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n    sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n    buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n    isPresale: asset.is_presale,\n    // Don't use previews if it's a special image\n    imageUrl: isAnimated || isSvg ? asset.image_url : asset.image_preview_url || asset.image_url,\n    imagePreviewUrl: asset.image_preview_url,\n    imageUrlOriginal: asset.image_original_url,\n    imageUrlThumbnail: asset.image_thumbnail_url,\n    externalLink: asset.external_link,\n    openseaLink: asset.permalink,\n    traits: asset.traits,\n    numSales: asset.num_sales,\n    lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n    backgroundColor: asset.background_color ? `#${asset.background_color}` : null,\n    transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n    transferFeePaymentToken: asset.transfer_fee_payment_token ? tokenFromJSON(asset.transfer_fee_payment_token) : null\n  }; // If orders were included, put them in sell/buy order groups\n\n  if (fromJSON.orders && !fromJSON.sellOrders) {\n    fromJSON.sellOrders = fromJSON.orders.filter(o => o.side == 1);\n  }\n\n  if (fromJSON.orders && !fromJSON.buyOrders) {\n    fromJSON.buyOrders = fromJSON.orders.filter(o => o.side == 0);\n  }\n\n  return fromJSON;\n};\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\n\n\nasync function getAsset(_ref2) {\n  let {\n    tokenAddress,\n    tokenId\n  } = _ref2;\n  const {\n    data\n  } = await axios(`${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`);\n  return assetFromJSON(data);\n}\n\nasync function postOrder(order) {\n  let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  try {\n    const {\n      data\n    } = await axios.post(`https://api.opensea.io/wyvern/v1/orders/post/`, order, {\n      headers: {\n        \"x-api-key\": X_API_KEY\n      }\n    });\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n\n  ;\n}\n\n;\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\n\nconst orderToGolomJSON = order => {\n  const asJSON = {\n    exchange: order.exchange.toLowerCase(),\n    maker: {\n      address: order.maker.toLowerCase()\n    },\n    taker: {\n      address: order.taker.toLowerCase()\n    },\n    maker_relayer_fee: order.makerRelayerFee.toString(),\n    taker_relayer_fee: order.takerRelayerFee.toString(),\n    maker_protocol_fee: order.makerProtocolFee.toString(),\n    taker_protocol_fee: order.takerProtocolFee.toString(),\n    makerReferrerFee: order.makerReferrerFee.toString(),\n    fee_method: order.feeMethod,\n    fee_recipient: {\n      address: order.feeRecipient.toLowerCase()\n    },\n    side: order.side,\n    sale_kind: order.saleKind,\n    target: order.target.toLowerCase(),\n    how_to_call: order.howToCall,\n    calldata: order.calldata,\n    replacement_pattern: order.replacementPattern,\n    static_target: order.staticTarget.toLowerCase(),\n    static_extradata: order.staticExtradata,\n    payment_token: order.paymentToken.toLowerCase(),\n    quantity: order.quantity.toString(),\n    base_price: order.basePrice.toString(),\n    englishAuctionReservePrice: order.englishAuctionReservePrice ? order.englishAuctionReservePrice.toString() : undefined,\n    extra: order.extra.toString(),\n    createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n    listing_time: order.listingTime.toString(),\n    expiration_time: order.expirationTime.toString(),\n    salt: order.salt.toString(),\n    metadata: order.metadata,\n    v: order.v,\n    r: order.r,\n    s: order.s,\n    prefixed_hash: order.hash\n  };\n  return asJSON;\n};\n\nexport { createOrder, cancelOrder, performOrder }; // maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28","map":{"version":3,"names":["WyvernProtocol","HowToCall","Network","ERC721Schema","isValidAddress","parseEther","BigNumber","axios","OPENSEA_URL","X_API_KEY","ACTIVITY_POLLING_INTERVAL","LISTING_POLLING_INTERVAL","OFFERS_POLLING_INTERVAL","OPENSEA_FEE_RECIPIENT","NULL_BLOCK_HASH","INVERSE_BASIS_POINT","DEFAULT_BUYER_FEE_BASIS_POINTS","DEFAULT_SELLER_FEE_BASIS_POINTS","OPENSEA_SELLER_BOUNTY_BASIS_POINTS","DEFAULT_MAX_BOUNTY","STATIC_CALL_TX_ORIGIN_ADDRESS","MERKLE_VALIDATOR_MAINNET","mainnetWyvernConfigByNetwork","OrderTypesEIP712","WyvernDomainNameEIP712","WyvernDomainVersionEIP712","StaticCheckTxOrigin","WyvernContract","createOrder","cancelOrder","performOrder","encodeSell","getTimeParameters","signTypedDataAsync","encodeCall","tokenFromJSON","token","fromJSON","name","symbol","decimals","address","imageUrl","image_url","ethPrice","eth_price","usdPrice","usd_price","orderFromJSON","order","createdDate","Date","created_date","hash","order_hash","cancelledOrFinalized","cancelled","finalized","markedInvalid","marked_invalid","metadata","quantity","exchange","makerAccount","maker","takerAccount","taker","makerRelayerFee","maker_relayer_fee","takerRelayerFee","taker_relayer_fee","makerProtocolFee","maker_protocol_fee","takerProtocolFee","taker_protocol_fee","makerReferrerFee","maker_referrer_fee","waitingForBestCounterOrder","fee_recipient","NULL_ADDRESS","feeMethod","fee_method","feeRecipientAccount","feeRecipient","side","saleKind","sale_kind","target","howToCall","how_to_call","calldata","replacementPattern","replacement_pattern","staticTarget","static_target","staticExtradata","static_extradata","paymentToken","payment_token","basePrice","base_price","extra","currentBounty","current_bounty","currentPrice","current_price","createdTime","Math","round","getTime","listingTime","listing_time","expirationTime","expiration_time","salt","v","parseInt","r","s","paymentTokenContract","payment_token_contract","undefined","asset","assetBundle","asset_bundle","estimateCurrentPrice","assignOrdersToSides","matchingOrder","isSellOrder","buy","sell","getCurrentPrice","wyvernExchange","methods","calculateCurrentPrice_","toFixed","secondsToBacktrack","shouldRoundUp","now","minus","exactPrice","diff","times","dividedBy","plus","ceil","_getRequiredAmountForTakingSellOrder","estimatedPrice","maxPrice","max","feePercentage","div","fee","_atomicMatch","accountAddress","value","txnData","from","args","toString","atomicMatchMethod","functions","atomicMatch_","then","res","console","log","assetContractFromJSON","assetContract","description","type","assetContract_type","schemaName","schema_name","tokenSymbol","buyerFeeBasisPoints","buyer_fee_basis_points","sellerFeeBasisPoints","seller_fee_basis_points","openseaBuyerFeeBasisPoints","opensea_buyer_fee_basis_points","openseaSellerFeeBasisPoints","opensea_seller_fee_basis_points","devBuyerFeeBasisPoints","dev_buyer_fee_basis_points","devSellerFeeBasisPoints","dev_seller_fee_basis_points","externalLink","external_link","wikiLink","wiki_link","collectionFromJSON","collection","slug","editors","hidden","featured","featuredImageUrl","featured_image_url","displayData","display_data","paymentTokens","payment_tokens","map","payoutAddress","payout_address","largeImageUrl","large_image_url","stats","traitStats","traits","external_url","wiki_url","userFromJSON","user","username","accountFromJSON","account","config","profileImgUrl","profile_img_url","transactionFromJSON","transaction","fromAccount","from_account","toAccount","to_account","modifiedDate","modified_date","transactionHash","transaction_hash","transactionIndex","transaction_index","blockNumber","block_number","blockHash","block_hash","timestamp","assetEventFromJSON","assetEvent","eventType","event_type","eventTimestamp","event_timestamp","auctionType","auction_type","totalPrice","total_price","assetFromJSON","isAnimated","endsWith","isSvg","tokenId","token_id","tokenAddress","asset_contract","owner","orders","sellOrders","sell_orders","buyOrders","buy_orders","isPresale","is_presale","image_preview_url","imagePreviewUrl","imageUrlOriginal","image_original_url","imageUrlThumbnail","image_thumbnail_url","openseaLink","permalink","numSales","num_sales","lastSale","last_sale","backgroundColor","background_color","transferFee","transfer_fee","transferFeePaymentToken","transfer_fee_payment_token","filter","o","getAsset","data","postOrder","retries","post","headers","error","Error","orderToGolomJSON","asJSON","toLowerCase","englishAuctionReservePrice","prefixed_hash"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/opensea.js"],"sourcesContent":["// Wyvern\nimport { WyvernProtocol } from \"wyvern-js\";\nimport { HowToCall, Network } from \"wyvern-js/lib/types\";\nimport { ERC721Schema } from \"./WyvernSchema\";\n\n// Ethereum\nimport isValidAddress from \"ethereumjs-util\";\nimport { parseEther } from \"@ethersproject/units\";\nimport BigNumber from \"bignumber.js\";\n\n// Other\nimport axios from \"axios\";\n// import * as _ from \"lodash\";\n\n// Constants\nimport { OPENSEA_URL, X_API_KEY } from \"./Constants\";\nimport { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from \"./Constants\";\nimport { OPENSEA_FEE_RECIPIENT, NULL_BLOCK_HASH, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from \"./Constants\";\nimport { mainnetWyvernConfigByNetwork } from \"./Constants\";\nimport { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from \"./Constants\";\nimport { StaticCheckTxOrigin } from \"./Constants\";\n\n// Contracts\nimport { WyvernContract } from \"./contracts\";\n\n// Methods\nimport createOrder from \"./methods/CreateOrder\";\nimport cancelOrder from \"./methods/CancelOrder\";\nimport performOrder from \"./methods/PerformOrder\";\n\n// Helpers\nimport encodeSell from \"./helpers/EncodeSell\";\nimport getTimeParameters from \"./helpers/GetTimeParameters\";\nimport signTypedDataAsync from \"./helpers/SignTypedDataAsync\";\nimport encodeCall from \"./helpers/EncodeCall\";\n\n// FUNCTIONS\nconst tokenFromJSON = (token) => {\n    const fromJSON = {\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        address: token.address,\n        imageUrl: token.image_url,\n        ethPrice: token.eth_price,\n        usdPrice: token.usd_price,\n    };\n\n    return fromJSON;\n};\n\nconst orderFromJSON = (order) => {\n    const createdDate = new Date(`${order.created_date}Z`);\n    const fromJSON = {\n        hash: order.order_hash || order.hash,\n        cancelledOrFinalized: order.cancelled || order.finalized,\n        markedInvalid: order.marked_invalid,\n        metadata: order.metadata,\n        quantity: new BigNumber(order.quantity || 1),\n        exchange: order.exchange,\n        makerAccount: order.maker,\n        takerAccount: order.taker,\n\n        // Use string address to conform to Wyvern Order schema\n        maker: order.maker.address,\n        taker: order.taker.address,\n        makerRelayerFee: new BigNumber(order.maker_relayer_fee),\n        takerRelayerFee: new BigNumber(order.taker_relayer_fee),\n        makerProtocolFee: new BigNumber(order.maker_protocol_fee),\n        takerProtocolFee: new BigNumber(order.taker_protocol_fee),\n        makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),\n        waitingForBestCounterOrder: order.fee_recipient.address == WyvernProtocol.NULL_ADDRESS,\n        feeMethod: order.fee_method,\n        feeRecipientAccount: order.fee_recipient,\n        feeRecipient: order.fee_recipient.address,\n        side: order.side,\n        saleKind: order.sale_kind,\n        target: order.target,\n        howToCall: order.how_to_call,\n        calldata: order.calldata,\n        replacementPattern: order.replacement_pattern,\n        staticTarget: order.static_target,\n        staticExtradata: order.static_extradata,\n        paymentToken: order.payment_token,\n        basePrice: new BigNumber(order.base_price),\n        extra: new BigNumber(order.extra),\n        currentBounty: new BigNumber(order.current_bounty || 0),\n        currentPrice: new BigNumber(order.current_price || 0),\n\n        createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),\n        listingTime: new BigNumber(order.listing_time),\n        expirationTime: new BigNumber(order.expiration_time),\n\n        salt: new BigNumber(order.salt),\n        v: parseInt(order.v),\n        r: order.r,\n        s: order.s,\n\n        paymentTokenContract: order.payment_token_contract\n          ? tokenFromJSON(order.payment_token_contract)\n          : undefined,\n        asset: order.asset,\n        assetBundle: order.asset_bundle,\n    };\n\n    // Use client-side price calc, to account for buyer fee (not added by server) and latency\n    fromJSON.currentPrice = estimateCurrentPrice(fromJSON);\n    return fromJSON;\n};\n\nfunction assignOrdersToSides(order, matchingOrder) {\n    const isSellOrder = order.side == 1;\n\n    let buy;\n    let sell;\n\n    if (!isSellOrder) {\n        buy = order;\n        sell = {\n            ...matchingOrder,\n            v: buy.v,\n            r: buy.r,\n            s: buy.s,\n        };\n    } else {\n        sell = order;\n        buy = {\n            ...matchingOrder,\n            v: sell.v,\n            r: sell.r,\n            s: sell.s,\n        };\n    }\n\n    return { buy, sell };\n}\n\n/**\n * Gets the price for the order using the contract\n * @param order The order to calculate the price for\n */\nasync function getCurrentPrice(order, wyvernExchange) {\n    const currentPrice = await wyvernExchange.methods.calculateCurrentPrice_(\n        [\n            order.exchange,\n            order.maker,\n            order.taker,\n            order.feeRecipient,\n            order.target,\n            order.staticTarget,\n            order.paymentToken,\n        ],\n        [\n            order.makerRelayerFee.toFixed(),\n            order.takerRelayerFee.toFixed(),\n            order.makerProtocolFee.toFixed(),\n            order.takerProtocolFee.toFixed(),\n            order.basePrice.toFixed(),\n            order.extra.toFixed(),\n            order.listingTime.toFixed(),\n            order.expirationTime.toFixed(),\n            order.salt.toFixed(),\n        ],\n        order.feeMethod,\n        order.side,\n        order.saleKind,\n        order.howToCall,\n        order.calldata,\n        order.replacementPattern,\n        order.staticExtradata\n    );\n\n    return currentPrice;\n}\n\n/**\n * Estimates the price of an order\n * @param order The order to estimate price on\n * @param secondsToBacktrack The number of seconds to subtract on current time,\n *  to fix race conditions\n * @param shouldRoundUp Whether to round up fractional wei\n */\nexport function estimateCurrentPrice(order, secondsToBacktrack = 30, shouldRoundUp = false) {\n    // round up should be enabled\n    let { basePrice, listingTime, expirationTime, extra } = order;\n    const { side, takerRelayerFee, saleKind } = order;\n\n    const now = new BigNumber(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);\n    basePrice = new BigNumber(basePrice);\n    listingTime = new BigNumber(listingTime);\n    expirationTime = new BigNumber(expirationTime);\n    extra = new BigNumber(extra);\n\n    let exactPrice = basePrice;\n    \n    // saleKind 0 : Fixed price 1: Duction acution\n    if (saleKind === 0) {\n        // Do nothing, price is correct\n    } else if (saleKind === 1) {\n        const diff = extra\n            .times(now.minus(listingTime))\n            .dividedBy(expirationTime.minus(listingTime));\n\n        // side 0 : buy 1: sell\n        exactPrice =\n\n        side == 1\n            ? /* Sell-side - start price: basePrice. End price: basePrice - extra. */\n                basePrice.minus(diff)\n            : /* Buy-side - start price: basePrice. End price: basePrice + extra. */\n            basePrice.plus(diff);\n    }\n\n    // Add taker fee only for buyers\n    if (side === 1 && !order.waitingForBestCounterOrder) {\n        // Buyer fee increases sale price\n        exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1);\n    }\n\n    return shouldRoundUp ? exactPrice.ceil() : exactPrice;\n}\n\nasync function _getRequiredAmountForTakingSellOrder(sell, wyvernExchange) {\n    const currentPrice = await getCurrentPrice(sell, wyvernExchange);\n    const estimatedPrice = estimateCurrentPrice(sell);\n\n    const maxPrice = BigNumber.max(currentPrice, estimatedPrice);\n\n    // TODO Why is this not always a big number?\n    sell.takerRelayerFee = BigNumber(sell.takerRelayerFee);\n    const feePercentage = sell.takerRelayerFee.div(INVERSE_BASIS_POINT);\n    const fee = feePercentage.times(maxPrice);\n\n    return fee.plus(maxPrice); // use .ceil()\n}\n\nasync function _atomicMatch({\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata = NULL_BLOCK_HASH,\n}) {\n    let value;\n\n    if (buy.paymentToken == WyvernProtocol.NULL_ADDRESS) {\n        value = await _getRequiredAmountForTakingSellOrder(sell, wyvernExchange);\n    }\n\n    const txnData = { from: accountAddress, value };\n\n    const args = [\n        [\n            buy.exchange,\n            buy.maker,\n            buy.taker,\n            buy.feeRecipient,\n            buy.target,\n            buy.staticTarget,\n            buy.paymentToken,\n            sell.exchange,\n            sell.maker,\n            sell.taker,\n            sell.feeRecipient,\n            sell.target,\n            sell.staticTarget,\n            sell.paymentToken,\n        ],\n        [\n            250.0.toString(),\n            0.0.toString(),\n            buy.makerProtocolFee.toString(),\n            buy.takerProtocolFee.toString(),\n            0.0.toString(),\n            buy.extra.toString(),\n            buy.listingTime.toString(),\n            buy.expirationTime.toString(),\n            buy.salt.toString(),\n            250.0.toString(),\n            0.0.toString(),\n            sell.makerProtocolFee.toString(),\n            sell.takerProtocolFee.toString(),\n            0.0.toString(),\n            0.0.toString(),\n            sell.listingTime.toString(),\n            sell.expirationTime.toString(),\n            sell.salt.toString(),\n        ],\n        [\n            buy.feeMethod,\n            buy.side,\n            buy.saleKind,\n            buy.howToCall,\n            sell.feeMethod,\n            sell.side,\n            sell.saleKind,\n            sell.howToCall,\n        ],\n        buy.calldata,\n        sell.calldata,\n        buy.replacementPattern,\n        sell.replacementPattern,\n        buy.staticExtradata,\n        sell.staticExtradata,\n        [buy.v || 0, sell.v || 0],\n        [\n            buy.r || NULL_BLOCK_HASH,\n            buy.s || NULL_BLOCK_HASH,\n            sell.r || NULL_BLOCK_HASH,\n            sell.s || NULL_BLOCK_HASH,\n            metadata,\n        ]\n    ];\n\n    // const gasEstimate = await wyvernExchange.functions.estimateGasAsync(txnData);\n    // txnData.gas = _correctGasAmount(gasEstimate);\n\n    const atomicMatchMethod = wyvernExchange.functions.atomicMatch_(\n        args[0],\n        args[1],\n        args[2],\n        args[3],\n        args[4],\n        args[5],\n        args[6],\n        args[7],\n        args[8],\n        args[9],\n        args[10],\n        txnData\n    ).then(res => {\n        console.log(res)\n    });\n\n    return { atomicMatchMethod, txnData };\n}\n\nconst assetContractFromJSON = (assetContract) => {\n    return {\n        name: assetContract.name,\n        description: assetContract.description,\n        type: assetContract.assetContract_type,\n        schemaName: assetContract.schema_name,\n        address: assetContract.address,\n        tokenSymbol: assetContract.symbol,\n        buyerFeeBasisPoints: +assetContract.buyer_fee_basis_points,\n        sellerFeeBasisPoints: +assetContract.seller_fee_basis_points,\n        openseaBuyerFeeBasisPoints: +assetContract.opensea_buyer_fee_basis_points,\n        openseaSellerFeeBasisPoints: +assetContract.opensea_seller_fee_basis_points,\n        devBuyerFeeBasisPoints: +assetContract.dev_buyer_fee_basis_points,\n        devSellerFeeBasisPoints: +assetContract.dev_seller_fee_basis_points,\n        imageUrl: assetContract.image_url,\n        externalLink: assetContract.external_link,\n        wikiLink: assetContract.wiki_link,\n    };\n};\n\nexport const collectionFromJSON = (collection) => {\n    const createdDate = new Date(`${collection.created_date}Z`);\n\n    return {\n        createdDate,\n        name: collection.name,\n        description: collection.description,\n        slug: collection.slug,\n        editors: collection.editors,\n        hidden: collection.hidden,\n        featured: collection.featured,\n        featuredImageUrl: collection.featured_image_url,\n        displayData: collection.display_data,\n        paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),\n        openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,\n        openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,\n        devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,\n        devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,\n        payoutAddress: collection.payout_address,\n        imageUrl: collection.image_url,\n        largeImageUrl: collection.large_image_url,\n        stats: collection.stats,\n        traitStats: collection.traits,\n        externalLink: collection.external_url,\n        wikiLink: collection.wiki_url,\n    };\n};\n\nconst userFromJSON = (user) => {\n    return { username: user.username };\n};\n\nconst accountFromJSON = (account) => {\n    return {\n        address: account.address,\n        config: account.config,\n        profileImgUrl: account.profile_img_url,\n        user: account.user ? userFromJSON(account.user) : null\n    };\n};\n\nconst transactionFromJSON = (transaction) => {\n    return {\n        fromAccount: accountFromJSON(transaction.from_account),\n        toAccount: accountFromJSON(transaction.to_account),\n        createdDate: new Date(`${transaction.created_date}Z`),\n        modifiedDate: new Date(`${transaction.modified_date}Z`),\n        transactionHash: transaction.transaction_hash,\n        transactionIndex: transaction.transaction_index,\n        blockNumber: transaction.block_number,\n        blockHash: transaction.block_hash,\n        timestamp: new Date(`${transaction.timestamp}Z`)\n    };\n};\n\nconst assetEventFromJSON = (assetEvent) => {\n    return {\n        eventType: assetEvent.event_type,\n        eventTimestamp: assetEvent.event_timestamp,\n        auctionType: assetEvent.auction_type,\n        totalPrice: assetEvent.total_price,\n        transaction: assetEvent.transaction\n          ? transactionFromJSON(assetEvent.transaction)\n          : null,\n        paymentToken: assetEvent.payment_token\n          ? tokenFromJSON(assetEvent.payment_token)\n          : null\n    };\n};\n\nconst assetFromJSON = (asset) => {\n    const isAnimated = asset.image_url && asset.image_url.endsWith(\".gif\");\n    const isSvg = asset.image_url && asset.image_url.endsWith(\".svg\");\n    const fromJSON = {\n        tokenId: asset.token_id.toString(),\n        tokenAddress: asset.asset_contract.address,\n        name: asset.name,\n        description: asset.description,\n        owner: asset.owner,\n        assetContract: assetContractFromJSON(asset.asset_contract),\n        collection: collectionFromJSON(asset.collection),\n        orders: asset.orders ? asset.orders.map(orderFromJSON) : null,\n        sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,\n        buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,\n\n        isPresale: asset.is_presale,\n        // Don't use previews if it's a special image\n        imageUrl:\n          isAnimated || isSvg\n            ? asset.image_url\n            : asset.image_preview_url || asset.image_url,\n        imagePreviewUrl: asset.image_preview_url,\n        imageUrlOriginal: asset.image_original_url,\n        imageUrlThumbnail: asset.image_thumbnail_url,\n\n        externalLink: asset.external_link,\n        openseaLink: asset.permalink,\n        traits: asset.traits,\n        numSales: asset.num_sales,\n        lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,\n        backgroundColor: asset.background_color\n          ? `#${asset.background_color}`\n          : null,\n\n        transferFee: asset.transfer_fee ? new BigNumber(asset.transfer_fee) : null,\n        transferFeePaymentToken: asset.transfer_fee_payment_token\n          ? tokenFromJSON(asset.transfer_fee_payment_token)\n          : null\n    };\n\n    // If orders were included, put them in sell/buy order groups\n    if (fromJSON.orders && !fromJSON.sellOrders) {\n        fromJSON.sellOrders = fromJSON.orders.filter((o) => o.side == 1);\n    }\n\n    if (fromJSON.orders && !fromJSON.buyOrders) {\n        fromJSON.buyOrders = fromJSON.orders.filter((o) => o.side == 0);\n    }\n\n    return fromJSON;\n};\n\n/**\n * Fetch an asset from the API, throwing if none is found\n * @param tokenAddress Address of the asset's contract\n * @param tokenId The asset's token ID, or null if ERC-20\n * @param retries Number of times to retry if the service is unavailable for any reason\n */\nasync function getAsset({ tokenAddress, tokenId }) {\n    const { data } = await axios(`${OPENSEA_URL}asset/${tokenAddress}/${tokenId || 0}/`);\n    return assetFromJSON(data);\n}\n\nasync function postOrder(order, retries = 2) {\n    try {\n        const { data } = await axios.post(\n            `https://api.opensea.io/wyvern/v1/orders/post/`,\n            order,\n            { headers: { \"x-api-key\": X_API_KEY }}\n        );\n\n        return data;\n    } catch (error) {\n        throw new Error(error);\n    };\n};\n\n/**\n * Convert an order to JSON for golom, hashing it as well if necessary\n * @param order order (hashed or unhashed)\n */\nconst orderToGolomJSON = (order) => {\n    const asJSON = {\n        exchange: order.exchange.toLowerCase(),\n        maker: { address: order.maker.toLowerCase() },\n        taker: { address: order.taker.toLowerCase() },\n        maker_relayer_fee: order.makerRelayerFee.toString(),\n        taker_relayer_fee: order.takerRelayerFee.toString(),\n        maker_protocol_fee: order.makerProtocolFee.toString(),\n        taker_protocol_fee: order.takerProtocolFee.toString(),\n        makerReferrerFee: order.makerReferrerFee.toString(),\n        fee_method: order.feeMethod,\n        fee_recipient: { address: order.feeRecipient.toLowerCase() },\n        side: order.side,\n        sale_kind: order.saleKind,\n        target: order.target.toLowerCase(),\n        how_to_call: order.howToCall,\n        calldata: order.calldata,\n        replacement_pattern: order.replacementPattern,\n        static_target: order.staticTarget.toLowerCase(),\n        static_extradata: order.staticExtradata,\n        payment_token: order.paymentToken.toLowerCase(),\n        quantity: order.quantity.toString(),\n        base_price: order.basePrice.toString(),\n        englishAuctionReservePrice: order.englishAuctionReservePrice\n          ? order.englishAuctionReservePrice.toString()\n          : undefined,\n        extra: order.extra.toString(),\n        createdTime: order.createdTime ? order.createdTime.toString() : undefined,\n        listing_time: order.listingTime.toString(),\n        expiration_time: order.expirationTime.toString(),\n        salt: order.salt.toString(),\n        metadata: order.metadata,\n        v: order.v,\n        r: order.r,\n        s: order.s,\n        prefixed_hash: order.hash,\n      };\n    \n    return asJSON;\n};\n\nexport { createOrder, cancelOrder, performOrder };\n\n// maker:\n// 0xafac92864611c564e7fa1a6c6d07b45807536943\n// exchange:\n// 0x7f268357a8c2552623316e2562d90e642bb538e5\n// taker:\n// 0x0000000000000000000000000000000000000000\n// makerRelayerFee:\n// 500\n// takerRelayerFee:\n// 0\n// makerProtocolFee:\n// 0\n// takerProtocolFee:\n// 0\n// feeRecipient:\n// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\n// feeMethod:\n// 1\n// side:\n// 1\n// saleKind:\n// 0\n// target:\n// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\n// howToCall:\n// 1\n// calldata:\n// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\n// replacementPattern:\n// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// staticTarget:\n// 0x0000000000000000000000000000000000000000\n// staticExtradata:\n// 0x\n// paymentToken:\n// 0x0000000000000000000000000000000000000000\n// basePrice:\n// 6000000000000000000\n// extra:\n// 0\n// listingTime:\n// 1645298828\n// expirationTime:\n// 1645903716\n// salt:\n// 87906966303110818969546189067137492865825614986988195802067881988151729727179\n// nonce:\n// 0\n\n// basePrice: \"6000000000000000000\"\n// calldata: \"0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\n// exchange: \"0x7f268357a8c2552623316e2562d90e642bb538e5\"\n// expirationTime: \"1645903716\"\n// extra: \"0\"\n// feeMethod: 1\n// feeRecipient: \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\"\n// howToCall: 1\n// listingTime: \"1645298816\"\n// maker: \"0xafac92864611c564e7fa1a6c6d07b45807536943\"\n// makerProtocolFee: \"0\"\n// makerReferrerFee: \"0\"\n// makerRelayerFee: \"500\"\n// metadata: {asset: {id: \"3765\", address: \"0x79fcdef22feed20eddacbb2587640e45491b757f\"}, schema: \"ERC721\"}\n// nonce: 0\n// paymentToken: \"0x0000000000000000000000000000000000000000\"\n// quantity: \"1\"\n// r: \"0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5\"\n// replacementPattern: \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n// s: \"0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60\"\n// saleKind: 0\n// salt: \"87577974536160270209585191401103724053896633202437364720132507693990122512257\"\n// side: 1\n// staticExtradata: \"0x\"\n// staticTarget: \"0x0000000000000000000000000000000000000000\"\n// taker: \"0x0000000000000000000000000000000000000000\"\n// takerProtocolFee: \"0\"\n// takerRelayerFee: \"0\"\n// target: \"0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7\"\n// v: 28\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}