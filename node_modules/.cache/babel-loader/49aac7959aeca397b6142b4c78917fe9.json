{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"@0xproject/types\");\n\nvar _ = require(\"lodash\");\n\nvar Web3 = require(\"web3\");\n\nvar SolidityCoder = require(\"web3/lib/solidity/coder\");\n\nvar configured_bignumber_1 = require(\"./configured_bignumber\");\n\nvar AbiDecoder =\n/** @class */\nfunction () {\n  function AbiDecoder(abiArrays) {\n    this._savedABIs = [];\n    this._methodIds = {};\n\n    _.forEach(abiArrays, this._addABI.bind(this));\n  }\n\n  AbiDecoder._padZeros = function (address) {\n    var formatted = address;\n\n    if (_.startsWith(formatted, '0x')) {\n      formatted = formatted.slice(2);\n    }\n\n    formatted = _.padStart(formatted, 40, '0');\n    return \"0x\" + formatted;\n  }; // This method can only decode logs from the 0x & ERC20 smart contracts\n\n\n  AbiDecoder.prototype.tryToDecodeLogOrNoop = function (log) {\n    var methodId = log.topics[0];\n    var event = this._methodIds[methodId];\n\n    if (_.isUndefined(event)) {\n      return log;\n    }\n\n    var logData = log.data;\n    var decodedParams = {};\n    var dataIndex = 0;\n    var topicsIndex = 1;\n\n    var nonIndexedInputs = _.filter(event.inputs, function (input) {\n      return !input.indexed;\n    });\n\n    var dataTypes = _.map(nonIndexedInputs, function (input) {\n      return input.type;\n    });\n\n    var decodedData = SolidityCoder.decodeParams(dataTypes, logData.slice('0x'.length));\n    var failedToDecode = false;\n\n    _.forEach(event.inputs, function (param) {\n      // Indexed parameters are stored in topics. Non-indexed ones in decodedData\n      var value = param.indexed ? log.topics[topicsIndex++] : decodedData[dataIndex++];\n\n      if (_.isUndefined(value)) {\n        failedToDecode = true;\n        return;\n      }\n\n      if (param.type === types_1.SolidityTypes.Address) {\n        value = AbiDecoder._padZeros(new configured_bignumber_1.BigNumber(value).toString(16));\n      } else if (param.type === types_1.SolidityTypes.Uint256 || param.type === types_1.SolidityTypes.Uint8 || param.type === types_1.SolidityTypes.Uint) {\n        value = new configured_bignumber_1.BigNumber(value);\n      }\n\n      decodedParams[param.name] = value;\n    });\n\n    if (failedToDecode) {\n      return log;\n    } else {\n      return __assign({}, log, {\n        event: event.name,\n        args: decodedParams\n      });\n    }\n  };\n\n  AbiDecoder.prototype._addABI = function (abiArray) {\n    var _this = this;\n\n    _.map(abiArray, function (abi) {\n      if (abi.type === types_1.AbiType.Event) {\n        var signature = abi.name + \"(\" + _.map(abi.inputs, function (input) {\n          return input.type;\n        }).join(',') + \")\";\n        var signatureHash = new Web3().sha3(signature);\n        _this._methodIds[signatureHash] = abi;\n      }\n    });\n\n    this._savedABIs = this._savedABIs.concat(abiArray);\n  };\n\n  return AbiDecoder;\n}();\n\nexports.AbiDecoder = AbiDecoder;","map":{"version":3,"mappings":"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","names":["abiArrays","_","forEach","_addABI","bind","AbiDecoder","address","formatted","startsWith","slice","padStart","log","methodId","topics","event","_methodIds","isUndefined","logData","data","decodedParams","dataIndex","topicsIndex","nonIndexedInputs","filter","inputs","input","indexed","dataTypes","map","type","decodedData","SolidityCoder","decodeParams","length","failedToDecode","param","value","types_1","Address","_padZeros","configured_bignumber_1","toString","Uint256","Uint8","Uint","name","__assign","args","abiArray","abi","Event","signature","join","signatureHash","Web3","sha3","_this","_savedABIs","concat","exports"],"sourceRoot":"","sources":["../src/abi_decoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}