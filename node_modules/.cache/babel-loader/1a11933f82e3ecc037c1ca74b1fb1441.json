{"ast":null,"code":"import { FunctionInputKind } from \"wyvern-js/lib/types\";\nexport const ERC721Schema = {\n  version: 2,\n  deploymentBlock: 0,\n  // Not indexed (for now; need asset-specific indexing strategy)\n  name: \"ERC721\",\n  description: \"Items conforming to the ERC721 spec, using transferFrom.\",\n  thumbnail: \"https://opensea.io/static/images/opensea-icon.png\",\n  website: \"http://erc721.org/\",\n  fields: [{\n    name: \"ID\",\n    type: \"uint256\",\n    description: \"Asset Token ID\"\n  }, {\n    name: \"Address\",\n    type: \"address\",\n    description: \"Asset Contract Address\"\n  }],\n  assetFromFields: fields => ({\n    id: fields.ID,\n    address: fields.Address\n  }),\n  assetToFields: asset => ({\n    ID: asset.id,\n    Address: asset.address\n  }),\n  formatter: asset => {\n    return {\n      title: \"ERC721 Asset: Token ID \" + asset.id + \" at \" + asset.address,\n      description: \"\",\n      url: \"\",\n      thumbnail: \"\",\n      properties: []\n    };\n  },\n  functions: {\n    transfer: asset => ({\n      type: \"function\",\n      name: \"transferFrom\",\n      payable: false,\n      constant: false,\n      stateMutability: \"nonpayable\",\n      target: asset.address,\n      inputs: [{\n        kind: FunctionInputKind.Owner,\n        name: \"_from\",\n        type: \"address\"\n      }, {\n        kind: FunctionInputKind.Replaceable,\n        name: \"_to\",\n        type: \"address\"\n      }, {\n        kind: FunctionInputKind.Asset,\n        name: \"_tokenId\",\n        type: \"uint256\",\n        value: asset.id\n      }],\n      outputs: []\n    }),\n    checkAndTransfer: (asset, validatorAddress, merkle) => ({\n      type: \"function\",\n      name: \"matchERC721UsingCriteria\",\n      payable: false,\n      constant: false,\n      stateMutability: \"nonpayable\",\n      target: validatorAddress,\n      inputs: [{\n        kind: FunctionInputKind.Owner,\n        name: \"from\",\n        type: \"address\"\n      }, {\n        kind: FunctionInputKind.Replaceable,\n        name: \"to\",\n        type: \"address\"\n      }, {\n        kind: FunctionInputKind.Asset,\n        name: \"token\",\n        type: \"address\",\n        value: asset.address\n      }, {\n        kind: FunctionInputKind.Asset,\n        name: \"tokenId\",\n        type: \"uint256\",\n        value: asset.id\n      }, {\n        kind: FunctionInputKind.Data,\n        name: \"root\",\n        type: \"bytes32\",\n        value: merkle ? merkle.root : \"\"\n      }, {\n        kind: FunctionInputKind.Data,\n        name: \"proof\",\n        type: \"bytes32[]\",\n        value: merkle ? merkle.proof : \"[]\"\n      }],\n      outputs: []\n    }),\n    ownerOf: asset => ({\n      type: \"function\",\n      name: \"ownerOf\",\n      payable: false,\n      constant: true,\n      stateMutability: \"view\",\n      target: asset.address,\n      inputs: [{\n        kind: FunctionInputKind.Asset,\n        name: \"_tokenId\",\n        type: \"uint256\",\n        value: asset.id\n      }],\n      outputs: [{\n        kind: \"owner\",\n        name: \"owner\",\n        type: \"address\"\n      }]\n    }),\n    assetsOfOwnerByIndex: []\n  },\n  events: {\n    transfer: []\n  },\n  hash: asset => asset.address + \"-\" + asset.id\n};","map":{"version":3,"names":["FunctionInputKind","ERC721Schema","version","deploymentBlock","name","description","thumbnail","website","fields","type","assetFromFields","id","ID","address","Address","assetToFields","asset","formatter","title","url","properties","functions","transfer","payable","constant","stateMutability","target","inputs","kind","Owner","Replaceable","Asset","value","outputs","checkAndTransfer","validatorAddress","merkle","Data","root","proof","ownerOf","assetsOfOwnerByIndex","events","hash"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/WyvernSchema.js"],"sourcesContent":["import { FunctionInputKind } from \"wyvern-js/lib/types\";\n\nexport const ERC721Schema = {\n    version: 2,\n    deploymentBlock: 0, // Not indexed (for now; need asset-specific indexing strategy)\n    name: \"ERC721\",\n    description: \"Items conforming to the ERC721 spec, using transferFrom.\",\n    thumbnail: \"https://opensea.io/static/images/opensea-icon.png\",\n    website: \"http://erc721.org/\",\n    fields: [\n        { \n            name: \"ID\", \n            type: \"uint256\", \n            description: \"Asset Token ID\" \n        },\n        { \n            name: \"Address\", \n            type: \"address\", \n            description: \"Asset Contract Address\" \n        }\n    ],\n    assetFromFields: (fields) => ({\n        id: fields.ID,\n        address: fields.Address\n    }),\n    assetToFields: (asset) => ({\n        ID: asset.id,\n        Address: asset.address\n    }),\n    formatter: (asset) => {\n        return {\n            title: \"ERC721 Asset: Token ID \" + asset.id + \" at \" + asset.address,\n            description: \"\",\n            url: \"\",\n            thumbnail: \"\",\n            properties: []\n        };\n    },\n    functions: {\n        transfer: (asset) => ({\n            type: \"function\",\n            name: \"transferFrom\",\n            payable: false,\n            constant: false,\n            stateMutability: \"nonpayable\",\n            target: asset.address,\n            inputs: [\n                { \n                    kind: FunctionInputKind.Owner, \n                    name: \"_from\", \n                    type: \"address\" \n                },\n                { \n                    kind: FunctionInputKind.Replaceable, \n                    name: \"_to\", \n                    type: \"address\" \n                },\n                {\n                    kind: FunctionInputKind.Asset,\n                    name: \"_tokenId\",\n                    type: \"uint256\",\n                    value: asset.id\n                }\n            ],\n            outputs: []\n        }),\n        checkAndTransfer: (asset, validatorAddress, merkle) => ({\n            type: \"function\",\n            name: \"matchERC721UsingCriteria\",\n            payable: false,\n            constant: false,\n            stateMutability: \"nonpayable\",\n            target: validatorAddress,\n            inputs: [\n                { \n                    kind: FunctionInputKind.Owner, \n                    name: \"from\", \n                    type: \"address\" \n                },\n                { \n                    kind: FunctionInputKind.Replaceable, \n                    name: \"to\", \n                    type: \"address\" \n                },\n                {\n                    kind: FunctionInputKind.Asset,\n                    name: \"token\",\n                    type: \"address\",\n                    value: asset.address\n                },\n                {\n                    kind: FunctionInputKind.Asset,\n                    name: \"tokenId\",\n                    type: \"uint256\",\n                    value: asset.id\n                },\n                {\n                    kind: FunctionInputKind.Data,\n                    name: \"root\",\n                    type: \"bytes32\",\n                    value: merkle ? merkle.root : \"\"\n                },\n                {\n                    kind: FunctionInputKind.Data,\n                    name: \"proof\",\n                    type: \"bytes32[]\",\n                    value: merkle ? merkle.proof : \"[]\"\n                }\n            ],\n            outputs: []\n        }),\n        ownerOf: (asset) => ({\n            type: \"function\",\n            name: \"ownerOf\",\n            payable: false,\n            constant: true,\n            stateMutability: \"view\",\n            target: asset.address,\n            inputs: [\n                {\n                    kind: FunctionInputKind.Asset,\n                    name: \"_tokenId\",\n                    type: \"uint256\",\n                    value: asset.id\n                },\n            ],\n            outputs: [\n                { \n                    kind: \"owner\", \n                    name: \"owner\", \n                    type: \"address\" \n                }\n            ]\n        }),\n        assetsOfOwnerByIndex: [],\n    },\n    events: {\n        transfer: []\n    },\n    hash: (asset) => asset.address + \"-\" + asset.id\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}