{"ast":null,"code":"import { WyvernContract } from \"./contracts\";\n\nconst performOrder = async _ref => {\n  let {\n    order,\n    provider,\n    accountAddress,\n    recipientAddress,\n    referrerAddress\n  } = _ref;\n  console.info(`Account: ${accountAddress} | Recipient: ${recipientAddress} | Referrer: ${referrerAddress}`); // check if valid order\n\n  const wyvernExchange = WyvernContract(provider);\n  const isValid = await validateOrder({\n    order,\n    accountAddress,\n    wyvernExchange\n  });\n  const matchingOrder = makeMatchingOrder({\n    order,\n    accountAddress,\n    recipientAddress: recipientAddress\n  });\n  const {\n    buy,\n    sell\n  } = assignOrdersToSides(order, matchingOrder);\n\n  const metadata = _getMetadata(order, referrerAddress);\n\n  return await _atomicMatch({\n    buy,\n    sell,\n    accountAddress,\n    wyvernExchange,\n    metadata\n  });\n};\n\nasync function validateOrder(_ref2) {\n  let {\n    order,\n    accountAddress,\n    wyvernExchange\n  } = _ref2;\n  // Check sell parameters\n  const sellValid = await wyvernExchange.functions.validateOrder_([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [250.0.toFixed(), 0.0.toFixed(), order.makerProtocolFee, order.takerProtocolFee, 0.0.toFixed(), 0.0.toFixed(), order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, order.v, order.r, order.s);\n\n  if (!sellValid) {\n    // eslint-disable-next-line no-throw-literal\n    throw {\n      message: new Error(`Failed to validate sell order parameters. It looks like this listing is invalid.`),\n      code: \"InvalidOrder\"\n    }; // TODO: call order invalidate API\n  }\n\n  return sellValid;\n}\n\n;\nexport default performOrder;","map":{"version":3,"names":["WyvernContract","performOrder","order","provider","accountAddress","recipientAddress","referrerAddress","console","info","wyvernExchange","isValid","validateOrder","matchingOrder","makeMatchingOrder","buy","sell","assignOrdersToSides","metadata","_getMetadata","_atomicMatch","sellValid","functions","validateOrder_","exchange","maker","taker","feeRecipient","target","staticTarget","paymentToken","toFixed","makerProtocolFee","takerProtocolFee","listingTime","expirationTime","salt","feeMethod","side","saleKind","howToCall","calldata","replacementPattern","staticExtradata","v","r","s","message","Error","code"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/opensea-exploit/src/opensea-sdk/methods/PerformOrder.js"],"sourcesContent":["import { WyvernContract } from \"./contracts\";\n\nconst performOrder = async ({\n    order,\n    provider,\n    accountAddress,\n    recipientAddress,\n    referrerAddress\n}) => {\n    console.info(`Account: ${accountAddress} | Recipient: ${recipientAddress} | Referrer: ${referrerAddress}`);\n\n    // check if valid order\n    const wyvernExchange = WyvernContract(provider);\n    const isValid = await validateOrder({ order, accountAddress, wyvernExchange });\n\n    const matchingOrder = makeMatchingOrder({\n        order,\n        accountAddress,\n        recipientAddress: recipientAddress\n    });\n\n    const { buy, sell } = assignOrdersToSides(order, matchingOrder);\n    const metadata = _getMetadata(order, referrerAddress);\n\n    return await _atomicMatch({\n        buy,\n        sell,\n        accountAddress,\n        wyvernExchange,\n        metadata\n    });\n};\n\nasync function validateOrder({ order, accountAddress, wyvernExchange }) {\n    // Check sell parameters\n    const sellValid = await wyvernExchange.functions.validateOrder_(\n        [\n            order.exchange,\n            order.maker,\n            order.taker,\n            order.feeRecipient,\n            order.target,\n            order.staticTarget,\n            order.paymentToken\n        ],\n        [\n            250.0.toFixed(),\n            0.0.toFixed(),\n            order.makerProtocolFee,\n            order.takerProtocolFee,\n            0.0.toFixed(),\n            0.0.toFixed(),\n            order.listingTime,\n            order.expirationTime,\n            order.salt,\n        ],\n        order.feeMethod,\n        order.side,\n        order.saleKind,\n        order.howToCall,\n        order.calldata,\n        order.replacementPattern,\n        order.staticExtradata,\n        order.v,\n        order.r,\n        order.s\n    );\n\n    if (!sellValid) {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n            message: new Error(`Failed to validate sell order parameters. It looks like this listing is invalid.`),\n            code: \"InvalidOrder\",\n        };\n        // TODO: call order invalidate API\n    }\n\n    return sellValid;\n};\n\nexport default performOrder;"],"mappings":"AAAA,SAASA,cAAT,QAA+B,aAA/B;;AAEA,MAAMC,YAAY,GAAG,cAMf;EAAA,IANsB;IACxBC,KADwB;IAExBC,QAFwB;IAGxBC,cAHwB;IAIxBC,gBAJwB;IAKxBC;EALwB,CAMtB;EACFC,OAAO,CAACC,IAAR,CAAc,YAAWJ,cAAe,iBAAgBC,gBAAiB,gBAAeC,eAAgB,EAAxG,EADE,CAGF;;EACA,MAAMG,cAAc,GAAGT,cAAc,CAACG,QAAD,CAArC;EACA,MAAMO,OAAO,GAAG,MAAMC,aAAa,CAAC;IAAET,KAAF;IAASE,cAAT;IAAyBK;EAAzB,CAAD,CAAnC;EAEA,MAAMG,aAAa,GAAGC,iBAAiB,CAAC;IACpCX,KADoC;IAEpCE,cAFoC;IAGpCC,gBAAgB,EAAEA;EAHkB,CAAD,CAAvC;EAMA,MAAM;IAAES,GAAF;IAAOC;EAAP,IAAgBC,mBAAmB,CAACd,KAAD,EAAQU,aAAR,CAAzC;;EACA,MAAMK,QAAQ,GAAGC,YAAY,CAAChB,KAAD,EAAQI,eAAR,CAA7B;;EAEA,OAAO,MAAMa,YAAY,CAAC;IACtBL,GADsB;IAEtBC,IAFsB;IAGtBX,cAHsB;IAItBK,cAJsB;IAKtBQ;EALsB,CAAD,CAAzB;AAOH,CA7BD;;AA+BA,eAAeN,aAAf,QAAwE;EAAA,IAA3C;IAAET,KAAF;IAASE,cAAT;IAAyBK;EAAzB,CAA2C;EACpE;EACA,MAAMW,SAAS,GAAG,MAAMX,cAAc,CAACY,SAAf,CAAyBC,cAAzB,CACpB,CACIpB,KAAK,CAACqB,QADV,EAEIrB,KAAK,CAACsB,KAFV,EAGItB,KAAK,CAACuB,KAHV,EAIIvB,KAAK,CAACwB,YAJV,EAKIxB,KAAK,CAACyB,MALV,EAMIzB,KAAK,CAAC0B,YANV,EAOI1B,KAAK,CAAC2B,YAPV,CADoB,EAUpB,CACI,MAAMC,OAAN,EADJ,EAEI,IAAIA,OAAJ,EAFJ,EAGI5B,KAAK,CAAC6B,gBAHV,EAII7B,KAAK,CAAC8B,gBAJV,EAKI,IAAIF,OAAJ,EALJ,EAMI,IAAIA,OAAJ,EANJ,EAOI5B,KAAK,CAAC+B,WAPV,EAQI/B,KAAK,CAACgC,cARV,EASIhC,KAAK,CAACiC,IATV,CAVoB,EAqBpBjC,KAAK,CAACkC,SArBc,EAsBpBlC,KAAK,CAACmC,IAtBc,EAuBpBnC,KAAK,CAACoC,QAvBc,EAwBpBpC,KAAK,CAACqC,SAxBc,EAyBpBrC,KAAK,CAACsC,QAzBc,EA0BpBtC,KAAK,CAACuC,kBA1Bc,EA2BpBvC,KAAK,CAACwC,eA3Bc,EA4BpBxC,KAAK,CAACyC,CA5Bc,EA6BpBzC,KAAK,CAAC0C,CA7Bc,EA8BpB1C,KAAK,CAAC2C,CA9Bc,CAAxB;;EAiCA,IAAI,CAACzB,SAAL,EAAgB;IACZ;IACA,MAAM;MACF0B,OAAO,EAAE,IAAIC,KAAJ,CAAW,kFAAX,CADP;MAEFC,IAAI,EAAE;IAFJ,CAAN,CAFY,CAMZ;EACH;;EAED,OAAO5B,SAAP;AACH;;AAAA;AAED,eAAenB,YAAf"},"metadata":{},"sourceType":"module"}