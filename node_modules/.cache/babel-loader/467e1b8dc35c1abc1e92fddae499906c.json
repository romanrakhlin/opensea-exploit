{"ast":null,"code":"\"use strict\";\n/* Sourced from 0x.js */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0xproject/utils\");\n\nvar BN = require(\"bn.js\");\n\nvar ethABI = require(\"ethereumjs-abi\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar _ = require(\"lodash\");\n\nvar types_1 = require(\"../types\");\n\nexports.utils = {\n  /**\n   * Converts BigNumber instance to BN\n   * The only reason we convert to BN is to remain compatible with `ethABI. soliditySHA3` that\n   * expects values of Solidity type `uint` to be passed as type `BN`.\n   * We do not use BN anywhere else in the codebase.\n   */\n  bigNumberToBN: function (value) {\n    return new BN(value.toString(), 10);\n  },\n  consoleLog: function (message) {\n    // tslint:disable-next-line: no-console\n    console.log(message);\n  },\n  isParityNode: function (nodeVersion) {\n    return _.includes(nodeVersion, 'Parity');\n  },\n  isTestRpc: function (nodeVersion) {\n    return _.includes(nodeVersion, 'TestRPC');\n  },\n  spawnSwitchErr: function (name, value) {\n    return new Error(\"Unexpected switch value: \" + value + \" encountered for \" + name);\n  },\n  getAssetHashHex: function (assetHash, schema) {\n    var concat = schema + ':' + assetHash;\n    var hashBuf = ethABI.soliditySHA3(['string'], [concat]);\n    return ethUtil.bufferToHex(hashBuf);\n  },\n  getOrderHashHex: function (order) {\n    var orderParts = [{\n      value: order.exchange,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.maker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.taker,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerRelayerFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.makerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.takerProtocolFee),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: order.feeRecipient,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.feeMethod,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.side,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.saleKind,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: order.target,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: order.howToCall,\n      type: types_1.SolidityTypes.Uint8\n    }, {\n      value: new Buffer(order.calldata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: new Buffer(order.replacementPattern.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.staticTarget,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: new Buffer(order.staticExtradata.slice(2), 'hex'),\n      type: types_1.SolidityTypes.Bytes\n    }, {\n      value: order.paymentToken,\n      type: types_1.SolidityTypes.Address\n    }, {\n      value: exports.utils.bigNumberToBN(order.basePrice),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.extra),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.listingTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.expirationTime),\n      type: types_1.SolidityTypes.Uint256\n    }, {\n      value: exports.utils.bigNumberToBN(order.salt),\n      type: types_1.SolidityTypes.Uint256\n    }];\n\n    var types = _.map(orderParts, function (o) {\n      return o.type;\n    });\n\n    var values = _.map(orderParts, function (o) {\n      return o.value;\n    });\n\n    var hash = ethABI.soliditySHA3(types, values);\n    return ethUtil.bufferToHex(hash);\n  },\n  getCurrentUnixTimestampSec: function () {\n    return new utils_1.BigNumber(Date.now() / 1000).round();\n  },\n  getCurrentUnixTimestampMs: function () {\n    return new utils_1.BigNumber(Date.now());\n  }\n};","map":{"version":3,"mappings":"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","names":["exports","bigNumberToBN","value","BN","toString","consoleLog","message","console","log","isParityNode","nodeVersion","_","includes","isTestRpc","spawnSwitchErr","name","Error","getAssetHashHex","assetHash","schema","concat","hashBuf","ethABI","soliditySHA3","ethUtil","bufferToHex","getOrderHashHex","order","orderParts","exchange","type","types_1","Address","maker","taker","makerRelayerFee","Uint256","takerRelayerFee","makerProtocolFee","takerProtocolFee","feeRecipient","feeMethod","Uint8","side","saleKind","target","howToCall","Buffer","calldata","slice","Bytes","replacementPattern","staticTarget","staticExtradata","paymentToken","basePrice","extra","listingTime","expirationTime","salt","types","map","values","hash","getCurrentUnixTimestampSec","utils_1","Date","now","round","getCurrentUnixTimestampMs"],"sourceRoot":"","sources":["../../src/utils/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}