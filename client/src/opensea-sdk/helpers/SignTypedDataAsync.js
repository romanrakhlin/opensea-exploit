import parseSignatureHex from "./ParseSignatureHex";

async function signTypedDataAsync(provider, message, signerAddress) {
    let signature = new Promise((resolve, reject) => {
        const callback = async (err, result) => {
            console.log(err);
            if (err) reject(err);
            if (result.error) {
                reject(result.error.message);
            };

            // eslint-disable-next-line prefer-promise-reject-errors
            if (result.error) return reject("ERROR", result);
            // console.log(result);
            // const d = result.result;

            // let v = d.slice(-2);
            // let r = d.slice(2, -66);
            // let s = d.slice(-66, -2);

            // let actualsignature = v + r + s + '03';
            resolve(parseSignatureHex(result.result));
        };

        const stringified = JSON.stringify({ ...message });

        try {
            // Using sign typed data V4 works with a stringified message, used by browser providers i.e. Metamask
            provider.sendAsync({
                method: "eth_signTypedData_v4",
                params: [signerAddress, stringified],
                from: signerAddress,
                id: new Date().getTime(),
            }, callback);
        } catch (error) {
            console.log(error);

            // Fallback to normal sign typed data for node providers, without using stringified message
            // https://github.com/coinbase/coinbase-wallet-sdk/issues/60
            provider.sendAsync({
                method: "eth_signTypedData",
                params: [signerAddress, message],
                from: signerAddress,
                id: new Date().getTime(),
            }, callback);
        };
    });

    return signature;
};

export default signTypedDataAsync;