// Wyvern
import { WyvernProtocol } from "wyvern-js";
import { HowToCall, Network } from "wyvern-js/lib/types";
import { ERC721Schema } from "./WyvernSchema";

// Ethereum
import isValidAddress from "ethereumjs-util";
import { parseEther } from "@ethersproject/units";
import BigNumber from "bignumber.js";

// Other
import axios from "axios";
// import * as _ from "lodash";

// Constants
import { OPENSEA_URL, X_API_KEY } from "./Constants";
import { ACTIVITY_POLLING_INTERVAL, LISTING_POLLING_INTERVAL, OFFERS_POLLING_INTERVAL } from "./Constants";
import { OPENSEA_FEE_RECIPIENT, NULL_BLOCK_HASH, INVERSE_BASIS_POINT, DEFAULT_BUYER_FEE_BASIS_POINTS, DEFAULT_SELLER_FEE_BASIS_POINTS, OPENSEA_SELLER_BOUNTY_BASIS_POINTS, DEFAULT_MAX_BOUNTY, STATIC_CALL_TX_ORIGIN_ADDRESS, MERKLE_VALIDATOR_MAINNET } from "./Constants";
import { mainnetWyvernConfigByNetwork } from "./Constants";
import { OrderTypesEIP712, WyvernDomainNameEIP712, WyvernDomainVersionEIP712 } from "./Constants";
import { StaticCheckTxOrigin } from "./Constants";

// Contracts
import { WyvernContract } from "./contracts";

// Methods
import createOrder from "./methods/CreateOrder";
import cancelOrder from "./methods/CancelOrder";
import performOrder from "./methods/PerformOrder";

// Helpers
import encodeSell from "./helpers/EncodeSell";
import signTypedDataAsync from "./helpers/SignTypedDataAsync";
import encodeCall from "./helpers/EncodeCall";

// FUNCTIONS

function assignOrdersToSides(order, matchingOrder) {
    const isSellOrder = order.side == 1;

    let buy;
    let sell;

    if (!isSellOrder) {
        buy = order;
        sell = {
            ...matchingOrder,
            v: buy.v,
            r: buy.r,
            s: buy.s,
        };
    } else {
        sell = order;
        buy = {
            ...matchingOrder,
            v: sell.v,
            r: sell.r,
            s: sell.s,
        };
    }

    return { buy, sell };
};

const userFromJSON = (user) => {
    return { username: user.username };
};

const accountFromJSON = (account) => {
    return {
        address: account.address,
        config: account.config,
        profileImgUrl: account.profile_img_url,
        user: account.user ? userFromJSON(account.user) : null
    };
};

async function postOrder(order, retries = 2) {
    try {
        const { data } = await axios.post(
            `https://api.opensea.io/wyvern/v1/orders/post/`,
            order,
            { headers: { "x-api-key": X_API_KEY }}
        );

        return data;
    } catch (error) {
        throw new Error(error);
    };
};

/**
 * Convert an order to JSON for golom, hashing it as well if necessary
 * @param order order (hashed or unhashed)
 */
const orderToGolomJSON = (order) => {
    const asJSON = {
        exchange: order.exchange.toLowerCase(),
        maker: { address: order.maker.toLowerCase() },
        taker: { address: order.taker.toLowerCase() },
        maker_relayer_fee: order.makerRelayerFee.toString(),
        taker_relayer_fee: order.takerRelayerFee.toString(),
        maker_protocol_fee: order.makerProtocolFee.toString(),
        taker_protocol_fee: order.takerProtocolFee.toString(),
        makerReferrerFee: order.makerReferrerFee.toString(),
        fee_method: order.feeMethod,
        fee_recipient: { address: order.feeRecipient.toLowerCase() },
        side: order.side,
        sale_kind: order.saleKind,
        target: order.target.toLowerCase(),
        how_to_call: order.howToCall,
        calldata: order.calldata,
        replacement_pattern: order.replacementPattern,
        static_target: order.staticTarget.toLowerCase(),
        static_extradata: order.staticExtradata,
        payment_token: order.paymentToken.toLowerCase(),
        quantity: order.quantity.toString(),
        base_price: order.basePrice.toString(),
        englishAuctionReservePrice: order.englishAuctionReservePrice
          ? order.englishAuctionReservePrice.toString()
          : undefined,
        extra: order.extra.toString(),
        createdTime: order.createdTime ? order.createdTime.toString() : undefined,
        listing_time: order.listingTime.toString(),
        expiration_time: order.expirationTime.toString(),
        salt: order.salt.toString(),
        metadata: order.metadata,
        v: order.v,
        r: order.r,
        s: order.s,
        prefixed_hash: order.hash,
      };
    
    return asJSON;
};

export { createOrder, cancelOrder, performOrder };

// maker:
// 0xafac92864611c564e7fa1a6c6d07b45807536943
// exchange:
// 0x7f268357a8c2552623316e2562d90e642bb538e5
// taker:
// 0x0000000000000000000000000000000000000000
// makerRelayerFee:
// 500
// takerRelayerFee:
// 0
// makerProtocolFee:
// 0
// takerProtocolFee:
// 0
// feeRecipient:
// 0x5b3256965e7c3cf26e11fcaf296dfc8807c01073
// feeMethod:
// 1
// side:
// 1
// saleKind:
// 0
// target:
// 0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7
// howToCall:
// 1
// calldata:
// 0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000
// replacementPattern:
// 0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// staticTarget:
// 0x0000000000000000000000000000000000000000
// staticExtradata:
// 0x
// paymentToken:
// 0x0000000000000000000000000000000000000000
// basePrice:
// 6000000000000000000
// extra:
// 0
// listingTime:
// 1645298828
// expirationTime:
// 1645903716
// salt:
// 87906966303110818969546189067137492865825614986988195802067881988151729727179
// nonce:
// 0

// basePrice: "6000000000000000000"
// calldata: "0xfb16a595000000000000000000000000afac92864611c564e7fa1a6c6d07b45807536943000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f0000000000000000000000000000000000000000000000000000000000000eb5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000"
// exchange: "0x7f268357a8c2552623316e2562d90e642bb538e5"
// expirationTime: "1645903716"
// extra: "0"
// feeMethod: 1
// feeRecipient: "0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"
// howToCall: 1
// listingTime: "1645298816"
// maker: "0xafac92864611c564e7fa1a6c6d07b45807536943"
// makerProtocolFee: "0"
// makerReferrerFee: "0"
// makerRelayerFee: "500"
// metadata: {asset: {id: "3765", address: "0x79fcdef22feed20eddacbb2587640e45491b757f"}, schema: "ERC721"}
// nonce: 0
// paymentToken: "0x0000000000000000000000000000000000000000"
// quantity: "1"
// r: "0x0c70bd3052b0da178141b84e7bdbe511acc5f7f601281850cd5f93f145c9bbb5"
// replacementPattern: "0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
// s: "0x7a2bf43b7b616073bf2486d2890b674f9587f68f59a84e4d7fff55842bbe9b60"
// saleKind: 0
// salt: "87577974536160270209585191401103724053896633202437364720132507693990122512257"
// side: 1
// staticExtradata: "0x"
// staticTarget: "0x0000000000000000000000000000000000000000"
// taker: "0x0000000000000000000000000000000000000000"
// takerProtocolFee: "0"
// takerRelayerFee: "0"
// target: "0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7"
// v: 28
