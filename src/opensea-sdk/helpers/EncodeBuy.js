import { WyvernProtocol } from "wyvern-js";
import encodeCall from "./EncodeCall";

const encodeBuy = (schema, asset, address, validatorAddress) => {
    // const transfer = schema.functions.transfer(asset);
    const transfer = validatorAddress && schema.functions.checkAndTransfer
        ? schema.functions.checkAndTransfer(asset, validatorAddress)
        : schema.functions.transfer(asset);
    const replaceables = transfer.inputs.filter((i) => i.kind === "replaceable");
    const ownerInputs = transfer.inputs.filter((i) => i.kind === "owner");

    // Validate
    if (replaceables.length !== 1) {
        throw new Error("Only 1 input can match transfer destination, but instead " + replaceables.length + " did");
    }

    // Compute calldata
    const parameters = transfer.inputs.map((input) => {
        switch (input.kind) {
            case "replaceable":
                return address;
            case "owner":
                return WyvernProtocol.generateDefaultValue(input.type);
            default:
                try {
                  return input.value.toString();
                } catch (e) {
                  console.error(schema);
                  console.error(asset);
                  throw e;
                }
        }
    });

    const calldata = encodeCall(transfer, parameters);

    // Compute replacement pattern
    let replacementPattern = "0x";
    if (ownerInputs.length > 0) {
        replacementPattern = WyvernProtocol.encodeReplacementPattern(transfer, "owner");
    }

    return {
        target: transfer.target,
        calldata,
        replacementPattern,
    };
};

export default encodeBuy;