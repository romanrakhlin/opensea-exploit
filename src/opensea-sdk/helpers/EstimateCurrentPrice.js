import BigNumber from "bignumber.js";
import { INVERSE_BASIS_POINT } from "../Constants";

/**
 * Estimates the price of an order
 * @param order The order to estimate price on
 * @param secondsToBacktrack The number of seconds to subtract on current time,
 *  to fix race conditions
 * @param shouldRoundUp Whether to round up fractional wei
 */
function estimateCurrentPrice(order, secondsToBacktrack = 30, shouldRoundUp = false) {
    // round up should be enabled
    let { basePrice, listingTime, expirationTime, extra } = order;
    const { side, takerRelayerFee, saleKind } = order;

    const now = new BigNumber(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);
    basePrice = new BigNumber(basePrice);
    listingTime = new BigNumber(listingTime);
    expirationTime = new BigNumber(expirationTime);
    extra = new BigNumber(extra);

    let exactPrice = basePrice;
    
    // saleKind 0 : Fixed price 1: Duction acution
    if (saleKind === 0) {
        // Do nothing, price is correct
    } else if (saleKind === 1) {
        const diff = extra
            .times(now.minus(listingTime))
            .dividedBy(expirationTime.minus(listingTime));

        // side 0 : buy 1: sell
        exactPrice =

        side == 1
            ? /* Sell-side - start price: basePrice. End price: basePrice - extra. */
                basePrice.minus(diff)
            : /* Buy-side - start price: basePrice. End price: basePrice + extra. */
            basePrice.plus(diff);
    }

    // Add taker fee only for buyers
    if (side === 1 && !order.waitingForBestCounterOrder) {
        // Buyer fee increases sale price
        exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1);
    }

    return shouldRoundUp ? exactPrice.ceil() : exactPrice;
};

export default estimateCurrentPrice;